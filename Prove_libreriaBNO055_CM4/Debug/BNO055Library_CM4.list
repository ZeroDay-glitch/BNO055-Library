
BNO055Library_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aea8  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a38  0810b148  0810b148  0001b148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810bb80  0810bb80  0001bb80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810bb88  0810bb88  0001bb88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810bb8c  0810bb8c  0001bb8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  10000000  0810bb90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000025c  100001e8  0810bd78  000201e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  10000444  0810bd78  00020444  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 11 .debug_info   00016849  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000029c5  00000000  00000000  00036aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000010e8  00000000  00000000  00039470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000d1c  00000000  00000000  0003a558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003b0f5  00000000  00000000  0003b274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00015c59  00000000  00000000  00076369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00180138  00000000  00000000  0008bfc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005ca8  00000000  00000000  0020c0fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  00211da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001e8 	.word	0x100001e8
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810b130 	.word	0x0810b130

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001ec 	.word	0x100001ec
 81002dc:	0810b130 	.word	0x0810b130

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <strlen>:
 8100380:	4603      	mov	r3, r0
 8100382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8100386:	2a00      	cmp	r2, #0
 8100388:	d1fb      	bne.n	8100382 <strlen+0x2>
 810038a:	1a18      	subs	r0, r3, r0
 810038c:	3801      	subs	r0, #1
 810038e:	4770      	bx	lr

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9a6 	b.w	81010fc <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	; (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	; (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9e08      	ldr	r6, [sp, #32]
 8100e3a:	460d      	mov	r5, r1
 8100e3c:	4604      	mov	r4, r0
 8100e3e:	460f      	mov	r7, r1
 8100e40:	2b00      	cmp	r3, #0
 8100e42:	d14a      	bne.n	8100eda <__udivmoddi4+0xa6>
 8100e44:	428a      	cmp	r2, r1
 8100e46:	4694      	mov	ip, r2
 8100e48:	d965      	bls.n	8100f16 <__udivmoddi4+0xe2>
 8100e4a:	fab2 f382 	clz	r3, r2
 8100e4e:	b143      	cbz	r3, 8100e62 <__udivmoddi4+0x2e>
 8100e50:	fa02 fc03 	lsl.w	ip, r2, r3
 8100e54:	f1c3 0220 	rsb	r2, r3, #32
 8100e58:	409f      	lsls	r7, r3
 8100e5a:	fa20 f202 	lsr.w	r2, r0, r2
 8100e5e:	4317      	orrs	r7, r2
 8100e60:	409c      	lsls	r4, r3
 8100e62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8100e66:	fa1f f58c 	uxth.w	r5, ip
 8100e6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8100e6e:	0c22      	lsrs	r2, r4, #16
 8100e70:	fb0e 7711 	mls	r7, lr, r1, r7
 8100e74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8100e78:	fb01 f005 	mul.w	r0, r1, r5
 8100e7c:	4290      	cmp	r0, r2
 8100e7e:	d90a      	bls.n	8100e96 <__udivmoddi4+0x62>
 8100e80:	eb1c 0202 	adds.w	r2, ip, r2
 8100e84:	f101 37ff 	add.w	r7, r1, #4294967295
 8100e88:	f080 811c 	bcs.w	81010c4 <__udivmoddi4+0x290>
 8100e8c:	4290      	cmp	r0, r2
 8100e8e:	f240 8119 	bls.w	81010c4 <__udivmoddi4+0x290>
 8100e92:	3902      	subs	r1, #2
 8100e94:	4462      	add	r2, ip
 8100e96:	1a12      	subs	r2, r2, r0
 8100e98:	b2a4      	uxth	r4, r4
 8100e9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8100e9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8100ea2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8100ea6:	fb00 f505 	mul.w	r5, r0, r5
 8100eaa:	42a5      	cmp	r5, r4
 8100eac:	d90a      	bls.n	8100ec4 <__udivmoddi4+0x90>
 8100eae:	eb1c 0404 	adds.w	r4, ip, r4
 8100eb2:	f100 32ff 	add.w	r2, r0, #4294967295
 8100eb6:	f080 8107 	bcs.w	81010c8 <__udivmoddi4+0x294>
 8100eba:	42a5      	cmp	r5, r4
 8100ebc:	f240 8104 	bls.w	81010c8 <__udivmoddi4+0x294>
 8100ec0:	4464      	add	r4, ip
 8100ec2:	3802      	subs	r0, #2
 8100ec4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8100ec8:	1b64      	subs	r4, r4, r5
 8100eca:	2100      	movs	r1, #0
 8100ecc:	b11e      	cbz	r6, 8100ed6 <__udivmoddi4+0xa2>
 8100ece:	40dc      	lsrs	r4, r3
 8100ed0:	2300      	movs	r3, #0
 8100ed2:	e9c6 4300 	strd	r4, r3, [r6]
 8100ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100eda:	428b      	cmp	r3, r1
 8100edc:	d908      	bls.n	8100ef0 <__udivmoddi4+0xbc>
 8100ede:	2e00      	cmp	r6, #0
 8100ee0:	f000 80ed 	beq.w	81010be <__udivmoddi4+0x28a>
 8100ee4:	2100      	movs	r1, #0
 8100ee6:	e9c6 0500 	strd	r0, r5, [r6]
 8100eea:	4608      	mov	r0, r1
 8100eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ef0:	fab3 f183 	clz	r1, r3
 8100ef4:	2900      	cmp	r1, #0
 8100ef6:	d149      	bne.n	8100f8c <__udivmoddi4+0x158>
 8100ef8:	42ab      	cmp	r3, r5
 8100efa:	d302      	bcc.n	8100f02 <__udivmoddi4+0xce>
 8100efc:	4282      	cmp	r2, r0
 8100efe:	f200 80f8 	bhi.w	81010f2 <__udivmoddi4+0x2be>
 8100f02:	1a84      	subs	r4, r0, r2
 8100f04:	eb65 0203 	sbc.w	r2, r5, r3
 8100f08:	2001      	movs	r0, #1
 8100f0a:	4617      	mov	r7, r2
 8100f0c:	2e00      	cmp	r6, #0
 8100f0e:	d0e2      	beq.n	8100ed6 <__udivmoddi4+0xa2>
 8100f10:	e9c6 4700 	strd	r4, r7, [r6]
 8100f14:	e7df      	b.n	8100ed6 <__udivmoddi4+0xa2>
 8100f16:	b902      	cbnz	r2, 8100f1a <__udivmoddi4+0xe6>
 8100f18:	deff      	udf	#255	; 0xff
 8100f1a:	fab2 f382 	clz	r3, r2
 8100f1e:	2b00      	cmp	r3, #0
 8100f20:	f040 8090 	bne.w	8101044 <__udivmoddi4+0x210>
 8100f24:	1a8a      	subs	r2, r1, r2
 8100f26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100f2a:	fa1f fe8c 	uxth.w	lr, ip
 8100f2e:	2101      	movs	r1, #1
 8100f30:	fbb2 f5f7 	udiv	r5, r2, r7
 8100f34:	fb07 2015 	mls	r0, r7, r5, r2
 8100f38:	0c22      	lsrs	r2, r4, #16
 8100f3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8100f3e:	fb0e f005 	mul.w	r0, lr, r5
 8100f42:	4290      	cmp	r0, r2
 8100f44:	d908      	bls.n	8100f58 <__udivmoddi4+0x124>
 8100f46:	eb1c 0202 	adds.w	r2, ip, r2
 8100f4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8100f4e:	d202      	bcs.n	8100f56 <__udivmoddi4+0x122>
 8100f50:	4290      	cmp	r0, r2
 8100f52:	f200 80cb 	bhi.w	81010ec <__udivmoddi4+0x2b8>
 8100f56:	4645      	mov	r5, r8
 8100f58:	1a12      	subs	r2, r2, r0
 8100f5a:	b2a4      	uxth	r4, r4
 8100f5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8100f60:	fb07 2210 	mls	r2, r7, r0, r2
 8100f64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8100f68:	fb0e fe00 	mul.w	lr, lr, r0
 8100f6c:	45a6      	cmp	lr, r4
 8100f6e:	d908      	bls.n	8100f82 <__udivmoddi4+0x14e>
 8100f70:	eb1c 0404 	adds.w	r4, ip, r4
 8100f74:	f100 32ff 	add.w	r2, r0, #4294967295
 8100f78:	d202      	bcs.n	8100f80 <__udivmoddi4+0x14c>
 8100f7a:	45a6      	cmp	lr, r4
 8100f7c:	f200 80bb 	bhi.w	81010f6 <__udivmoddi4+0x2c2>
 8100f80:	4610      	mov	r0, r2
 8100f82:	eba4 040e 	sub.w	r4, r4, lr
 8100f86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8100f8a:	e79f      	b.n	8100ecc <__udivmoddi4+0x98>
 8100f8c:	f1c1 0720 	rsb	r7, r1, #32
 8100f90:	408b      	lsls	r3, r1
 8100f92:	fa22 fc07 	lsr.w	ip, r2, r7
 8100f96:	ea4c 0c03 	orr.w	ip, ip, r3
 8100f9a:	fa05 f401 	lsl.w	r4, r5, r1
 8100f9e:	fa20 f307 	lsr.w	r3, r0, r7
 8100fa2:	40fd      	lsrs	r5, r7
 8100fa4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100fa8:	4323      	orrs	r3, r4
 8100faa:	fbb5 f8f9 	udiv	r8, r5, r9
 8100fae:	fa1f fe8c 	uxth.w	lr, ip
 8100fb2:	fb09 5518 	mls	r5, r9, r8, r5
 8100fb6:	0c1c      	lsrs	r4, r3, #16
 8100fb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8100fbc:	fb08 f50e 	mul.w	r5, r8, lr
 8100fc0:	42a5      	cmp	r5, r4
 8100fc2:	fa02 f201 	lsl.w	r2, r2, r1
 8100fc6:	fa00 f001 	lsl.w	r0, r0, r1
 8100fca:	d90b      	bls.n	8100fe4 <__udivmoddi4+0x1b0>
 8100fcc:	eb1c 0404 	adds.w	r4, ip, r4
 8100fd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8100fd4:	f080 8088 	bcs.w	81010e8 <__udivmoddi4+0x2b4>
 8100fd8:	42a5      	cmp	r5, r4
 8100fda:	f240 8085 	bls.w	81010e8 <__udivmoddi4+0x2b4>
 8100fde:	f1a8 0802 	sub.w	r8, r8, #2
 8100fe2:	4464      	add	r4, ip
 8100fe4:	1b64      	subs	r4, r4, r5
 8100fe6:	b29d      	uxth	r5, r3
 8100fe8:	fbb4 f3f9 	udiv	r3, r4, r9
 8100fec:	fb09 4413 	mls	r4, r9, r3, r4
 8100ff0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8100ff4:	fb03 fe0e 	mul.w	lr, r3, lr
 8100ff8:	45a6      	cmp	lr, r4
 8100ffa:	d908      	bls.n	810100e <__udivmoddi4+0x1da>
 8100ffc:	eb1c 0404 	adds.w	r4, ip, r4
 8101000:	f103 35ff 	add.w	r5, r3, #4294967295
 8101004:	d26c      	bcs.n	81010e0 <__udivmoddi4+0x2ac>
 8101006:	45a6      	cmp	lr, r4
 8101008:	d96a      	bls.n	81010e0 <__udivmoddi4+0x2ac>
 810100a:	3b02      	subs	r3, #2
 810100c:	4464      	add	r4, ip
 810100e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8101012:	fba3 9502 	umull	r9, r5, r3, r2
 8101016:	eba4 040e 	sub.w	r4, r4, lr
 810101a:	42ac      	cmp	r4, r5
 810101c:	46c8      	mov	r8, r9
 810101e:	46ae      	mov	lr, r5
 8101020:	d356      	bcc.n	81010d0 <__udivmoddi4+0x29c>
 8101022:	d053      	beq.n	81010cc <__udivmoddi4+0x298>
 8101024:	b156      	cbz	r6, 810103c <__udivmoddi4+0x208>
 8101026:	ebb0 0208 	subs.w	r2, r0, r8
 810102a:	eb64 040e 	sbc.w	r4, r4, lr
 810102e:	fa04 f707 	lsl.w	r7, r4, r7
 8101032:	40ca      	lsrs	r2, r1
 8101034:	40cc      	lsrs	r4, r1
 8101036:	4317      	orrs	r7, r2
 8101038:	e9c6 7400 	strd	r7, r4, [r6]
 810103c:	4618      	mov	r0, r3
 810103e:	2100      	movs	r1, #0
 8101040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8101044:	f1c3 0120 	rsb	r1, r3, #32
 8101048:	fa02 fc03 	lsl.w	ip, r2, r3
 810104c:	fa20 f201 	lsr.w	r2, r0, r1
 8101050:	fa25 f101 	lsr.w	r1, r5, r1
 8101054:	409d      	lsls	r5, r3
 8101056:	432a      	orrs	r2, r5
 8101058:	ea4f 471c 	mov.w	r7, ip, lsr #16
 810105c:	fa1f fe8c 	uxth.w	lr, ip
 8101060:	fbb1 f0f7 	udiv	r0, r1, r7
 8101064:	fb07 1510 	mls	r5, r7, r0, r1
 8101068:	0c11      	lsrs	r1, r2, #16
 810106a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 810106e:	fb00 f50e 	mul.w	r5, r0, lr
 8101072:	428d      	cmp	r5, r1
 8101074:	fa04 f403 	lsl.w	r4, r4, r3
 8101078:	d908      	bls.n	810108c <__udivmoddi4+0x258>
 810107a:	eb1c 0101 	adds.w	r1, ip, r1
 810107e:	f100 38ff 	add.w	r8, r0, #4294967295
 8101082:	d22f      	bcs.n	81010e4 <__udivmoddi4+0x2b0>
 8101084:	428d      	cmp	r5, r1
 8101086:	d92d      	bls.n	81010e4 <__udivmoddi4+0x2b0>
 8101088:	3802      	subs	r0, #2
 810108a:	4461      	add	r1, ip
 810108c:	1b49      	subs	r1, r1, r5
 810108e:	b292      	uxth	r2, r2
 8101090:	fbb1 f5f7 	udiv	r5, r1, r7
 8101094:	fb07 1115 	mls	r1, r7, r5, r1
 8101098:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 810109c:	fb05 f10e 	mul.w	r1, r5, lr
 81010a0:	4291      	cmp	r1, r2
 81010a2:	d908      	bls.n	81010b6 <__udivmoddi4+0x282>
 81010a4:	eb1c 0202 	adds.w	r2, ip, r2
 81010a8:	f105 38ff 	add.w	r8, r5, #4294967295
 81010ac:	d216      	bcs.n	81010dc <__udivmoddi4+0x2a8>
 81010ae:	4291      	cmp	r1, r2
 81010b0:	d914      	bls.n	81010dc <__udivmoddi4+0x2a8>
 81010b2:	3d02      	subs	r5, #2
 81010b4:	4462      	add	r2, ip
 81010b6:	1a52      	subs	r2, r2, r1
 81010b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 81010bc:	e738      	b.n	8100f30 <__udivmoddi4+0xfc>
 81010be:	4631      	mov	r1, r6
 81010c0:	4630      	mov	r0, r6
 81010c2:	e708      	b.n	8100ed6 <__udivmoddi4+0xa2>
 81010c4:	4639      	mov	r1, r7
 81010c6:	e6e6      	b.n	8100e96 <__udivmoddi4+0x62>
 81010c8:	4610      	mov	r0, r2
 81010ca:	e6fb      	b.n	8100ec4 <__udivmoddi4+0x90>
 81010cc:	4548      	cmp	r0, r9
 81010ce:	d2a9      	bcs.n	8101024 <__udivmoddi4+0x1f0>
 81010d0:	ebb9 0802 	subs.w	r8, r9, r2
 81010d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 81010d8:	3b01      	subs	r3, #1
 81010da:	e7a3      	b.n	8101024 <__udivmoddi4+0x1f0>
 81010dc:	4645      	mov	r5, r8
 81010de:	e7ea      	b.n	81010b6 <__udivmoddi4+0x282>
 81010e0:	462b      	mov	r3, r5
 81010e2:	e794      	b.n	810100e <__udivmoddi4+0x1da>
 81010e4:	4640      	mov	r0, r8
 81010e6:	e7d1      	b.n	810108c <__udivmoddi4+0x258>
 81010e8:	46d0      	mov	r8, sl
 81010ea:	e77b      	b.n	8100fe4 <__udivmoddi4+0x1b0>
 81010ec:	3d02      	subs	r5, #2
 81010ee:	4462      	add	r2, ip
 81010f0:	e732      	b.n	8100f58 <__udivmoddi4+0x124>
 81010f2:	4608      	mov	r0, r1
 81010f4:	e70a      	b.n	8100f0c <__udivmoddi4+0xd8>
 81010f6:	4464      	add	r4, ip
 81010f8:	3802      	subs	r0, #2
 81010fa:	e742      	b.n	8100f82 <__udivmoddi4+0x14e>

081010fc <__aeabi_idiv0>:
 81010fc:	4770      	bx	lr
 81010fe:	bf00      	nop

08101100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101100:	b480      	push	{r7}
 8101102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101104:	4b09      	ldr	r3, [pc, #36]	; (810112c <SystemInit+0x2c>)
 8101106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810110a:	4a08      	ldr	r2, [pc, #32]	; (810112c <SystemInit+0x2c>)
 810110c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101114:	4b05      	ldr	r3, [pc, #20]	; (810112c <SystemInit+0x2c>)
 8101116:	691b      	ldr	r3, [r3, #16]
 8101118:	4a04      	ldr	r2, [pc, #16]	; (810112c <SystemInit+0x2c>)
 810111a:	f043 0310 	orr.w	r3, r3, #16
 810111e:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101120:	bf00      	nop
 8101122:	46bd      	mov	sp, r7
 8101124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101128:	4770      	bx	lr
 810112a:	bf00      	nop
 810112c:	e000ed00 	.word	0xe000ed00

08101130 <bno055_setPage>:
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

// Imposta la pagina di registro del sensore BNO055
void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8101130:	b580      	push	{r7, lr}
 8101132:	b082      	sub	sp, #8
 8101134:	af00      	add	r7, sp, #0
 8101136:	4603      	mov	r3, r0
 8101138:	71fb      	strb	r3, [r7, #7]
 810113a:	79fb      	ldrb	r3, [r7, #7]
 810113c:	4619      	mov	r1, r3
 810113e:	2007      	movs	r0, #7
 8101140:	f000 fa44 	bl	81015cc <bno055_writeData>
 8101144:	bf00      	nop
 8101146:	3708      	adds	r7, #8
 8101148:	46bd      	mov	sp, r7
 810114a:	bd80      	pop	{r7, pc}

0810114c <bno055_setOperationMode>:
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

// Imposta la modalità operativa del sensore BNO055 e attende un ritardo in base alla modalità
void bno055_setOperationMode(bno055_opmode_t mode) {
 810114c:	b580      	push	{r7, lr}
 810114e:	b082      	sub	sp, #8
 8101150:	af00      	add	r7, sp, #0
 8101152:	4603      	mov	r3, r0
 8101154:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8101156:	79fb      	ldrb	r3, [r7, #7]
 8101158:	4619      	mov	r1, r3
 810115a:	203d      	movs	r0, #61	; 0x3d
 810115c:	f000 fa36 	bl	81015cc <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8101160:	79fb      	ldrb	r3, [r7, #7]
 8101162:	2b00      	cmp	r3, #0
 8101164:	d103      	bne.n	810116e <bno055_setOperationMode+0x22>
    bno055_delay(100);
 8101166:	2064      	movs	r0, #100	; 0x64
 8101168:	f000 fa24 	bl	81015b4 <bno055_delay>
  } else {
    bno055_delay(80);
  }
}
 810116c:	e002      	b.n	8101174 <bno055_setOperationMode+0x28>
    bno055_delay(80);
 810116e:	2050      	movs	r0, #80	; 0x50
 8101170:	f000 fa20 	bl	81015b4 <bno055_delay>
}
 8101174:	bf00      	nop
 8101176:	3708      	adds	r7, #8
 8101178:	46bd      	mov	sp, r7
 810117a:	bd80      	pop	{r7, pc}

0810117c <bno055_setOperationModeConfig>:

// NON FUSION MODE

// Imposta la modalità operativa del sensore BNO055 su configurazione
void bno055_setOperationModeConfig() {
 810117c:	b580      	push	{r7, lr}
 810117e:	af00      	add	r7, sp, #0
    bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8101180:	2000      	movs	r0, #0
 8101182:	f7ff ffe3 	bl	810114c <bno055_setOperationMode>
}
 8101186:	bf00      	nop
 8101188:	bd80      	pop	{r7, pc}

0810118a <bno055_setOperationModeAMG>:

void bno055_setOperationModeMAGGYRO(){
	bno055_setOperationMode(BNO055_OPERATION_MODE_MAGGYRO);
}

void bno055_setOperationModeAMG(){
 810118a:	b580      	push	{r7, lr}
 810118c:	af00      	add	r7, sp, #0
	bno055_setOperationMode(BNO055_OPERATION_MODE_AMG);
 810118e:	2007      	movs	r0, #7
 8101190:	f7ff ffdc 	bl	810114c <bno055_setOperationMode>
}
 8101194:	bf00      	nop
 8101196:	bd80      	pop	{r7, pc}

08101198 <bno055_reset>:
void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
// Disabilita l'uso di un cristallo esterno per il sensore BNO055
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

// Esegue una procedura di reset per il sensore BNO055
void bno055_reset() {
 8101198:	b580      	push	{r7, lr}
 810119a:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 810119c:	2120      	movs	r1, #32
 810119e:	203f      	movs	r0, #63	; 0x3f
 81011a0:	f000 fa14 	bl	81015cc <bno055_writeData>
  bno055_delay(700);
 81011a4:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 81011a8:	f000 fa04 	bl	81015b4 <bno055_delay>
}
 81011ac:	bf00      	nop
 81011ae:	bd80      	pop	{r7, pc}

081011b0 <bno055_setup>:
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

// Inizializza il sensore BNO055 eseguendo una procedura di reset e configurazione iniziale
void bno055_setup() {
 81011b0:	b580      	push	{r7, lr}
 81011b2:	b082      	sub	sp, #8
 81011b4:	af00      	add	r7, sp, #0
  bno055_reset();
 81011b6:	f7ff ffef 	bl	8101198 <bno055_reset>

  uint8_t id = 0;
 81011ba:	2300      	movs	r3, #0
 81011bc:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 81011be:	1dfb      	adds	r3, r7, #7
 81011c0:	2201      	movs	r2, #1
 81011c2:	4619      	mov	r1, r3
 81011c4:	2000      	movs	r0, #0
 81011c6:	f000 faed 	bl	81017a4 <bno055_readData>
  if (id != BNO055_ID) {
 81011ca:	79fb      	ldrb	r3, [r7, #7]
 81011cc:	2ba0      	cmp	r3, #160	; 0xa0
 81011ce:	d004      	beq.n	81011da <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 81011d0:	79fb      	ldrb	r3, [r7, #7]
 81011d2:	4619      	mov	r1, r3
 81011d4:	4809      	ldr	r0, [pc, #36]	; (81011fc <bno055_setup+0x4c>)
 81011d6:	f006 fa9f 	bl	8107718 <iprintf>
  }
  bno055_setPage(0);
 81011da:	2000      	movs	r0, #0
 81011dc:	f7ff ffa8 	bl	8101130 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 81011e0:	2100      	movs	r1, #0
 81011e2:	203f      	movs	r0, #63	; 0x3f
 81011e4:	f000 f9f2 	bl	81015cc <bno055_writeData>

  // Seleziona la modalità di configurazione del BNO055
  bno055_setOperationModeConfig();
 81011e8:	f7ff ffc8 	bl	810117c <bno055_setOperationModeConfig>
  bno055_delay(10);
 81011ec:	200a      	movs	r0, #10
 81011ee:	f000 f9e1 	bl	81015b4 <bno055_delay>
}
 81011f2:	bf00      	nop
 81011f4:	3708      	adds	r7, #8
 81011f6:	46bd      	mov	sp, r7
 81011f8:	bd80      	pop	{r7, pc}
 81011fa:	bf00      	nop
 81011fc:	0810b148 	.word	0x0810b148

08101200 <bno055_getVector>:

  bno055_setOperationMode(operationMode);
}

//Ottiene un vettore specifico dal sensore BNO055 con la possibilità di specificare la scala del vettore
bno055_vector_t bno055_getVector(uint8_t vec) {
 8101200:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8101204:	b09e      	sub	sp, #120	; 0x78
 8101206:	af00      	add	r7, sp, #0
 8101208:	4603      	mov	r3, r0
 810120a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 810120e:	2000      	movs	r0, #0
 8101210:	f7ff ff8e 	bl	8101130 <bno055_setPage>
  uint8_t buffer[8];    // I quaternioni richiedono 8 byte

  if (vec == BNO055_VECTOR_QUATERNION)
 8101214:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101218:	2b20      	cmp	r3, #32
 810121a:	d108      	bne.n	810122e <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 810121c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8101220:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101224:	2208      	movs	r2, #8
 8101226:	4618      	mov	r0, r3
 8101228:	f000 fabc 	bl	81017a4 <bno055_readData>
 810122c:	e007      	b.n	810123e <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 810122e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8101232:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101236:	2206      	movs	r2, #6
 8101238:	4618      	mov	r0, r3
 810123a:	f000 fab3 	bl	81017a4 <bno055_readData>

  double scale = 1;
 810123e:	f04f 0200 	mov.w	r2, #0
 8101242:	4b8b      	ldr	r3, [pc, #556]	; (8101470 <bno055_getVector+0x270>)
 8101244:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8101248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810124c:	2b0e      	cmp	r3, #14
 810124e:	d109      	bne.n	8101264 <bno055_getVector+0x64>
    scale = magScale;
 8101250:	4b88      	ldr	r3, [pc, #544]	; (8101474 <bno055_getVector+0x274>)
 8101252:	881b      	ldrh	r3, [r3, #0]
 8101254:	4618      	mov	r0, r3
 8101256:	f7ff f9dd 	bl	8100614 <__aeabi_ui2d>
 810125a:	4602      	mov	r2, r0
 810125c:	460b      	mov	r3, r1
 810125e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8101262:	e03e      	b.n	81012e2 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8101264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101268:	2b08      	cmp	r3, #8
 810126a:	d007      	beq.n	810127c <bno055_getVector+0x7c>
 810126c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101270:	2b28      	cmp	r3, #40	; 0x28
 8101272:	d003      	beq.n	810127c <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8101274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101278:	2b2e      	cmp	r3, #46	; 0x2e
 810127a:	d109      	bne.n	8101290 <bno055_getVector+0x90>
    scale = accelScale;
 810127c:	4b7e      	ldr	r3, [pc, #504]	; (8101478 <bno055_getVector+0x278>)
 810127e:	881b      	ldrh	r3, [r3, #0]
 8101280:	4618      	mov	r0, r3
 8101282:	f7ff f9c7 	bl	8100614 <__aeabi_ui2d>
 8101286:	4602      	mov	r2, r0
 8101288:	460b      	mov	r3, r1
 810128a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 810128e:	e028      	b.n	81012e2 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8101290:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101294:	2b14      	cmp	r3, #20
 8101296:	d109      	bne.n	81012ac <bno055_getVector+0xac>
    scale = angularRateScale;
 8101298:	4b78      	ldr	r3, [pc, #480]	; (810147c <bno055_getVector+0x27c>)
 810129a:	881b      	ldrh	r3, [r3, #0]
 810129c:	4618      	mov	r0, r3
 810129e:	f7ff f9b9 	bl	8100614 <__aeabi_ui2d>
 81012a2:	4602      	mov	r2, r0
 81012a4:	460b      	mov	r3, r1
 81012a6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 81012aa:	e01a      	b.n	81012e2 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 81012ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81012b0:	2b1a      	cmp	r3, #26
 81012b2:	d109      	bne.n	81012c8 <bno055_getVector+0xc8>
    scale = eulerScale;
 81012b4:	4b72      	ldr	r3, [pc, #456]	; (8101480 <bno055_getVector+0x280>)
 81012b6:	881b      	ldrh	r3, [r3, #0]
 81012b8:	4618      	mov	r0, r3
 81012ba:	f7ff f9ab 	bl	8100614 <__aeabi_ui2d>
 81012be:	4602      	mov	r2, r0
 81012c0:	460b      	mov	r3, r1
 81012c2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 81012c6:	e00c      	b.n	81012e2 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 81012c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81012cc:	2b20      	cmp	r3, #32
 81012ce:	d108      	bne.n	81012e2 <bno055_getVector+0xe2>
    scale = quaScale;
 81012d0:	4b6c      	ldr	r3, [pc, #432]	; (8101484 <bno055_getVector+0x284>)
 81012d2:	881b      	ldrh	r3, [r3, #0]
 81012d4:	4618      	mov	r0, r3
 81012d6:	f7ff f99d 	bl	8100614 <__aeabi_ui2d>
 81012da:	4602      	mov	r2, r0
 81012dc:	460b      	mov	r3, r1
 81012de:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 81012e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 81012e6:	2220      	movs	r2, #32
 81012e8:	2100      	movs	r1, #0
 81012ea:	4618      	mov	r0, r3
 81012ec:	f006 fb7a 	bl	81079e4 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 81012f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81012f4:	2b20      	cmp	r3, #32
 81012f6:	d150      	bne.n	810139a <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 81012f8:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 81012fc:	021b      	lsls	r3, r3, #8
 81012fe:	b21a      	sxth	r2, r3
 8101300:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8101304:	b21b      	sxth	r3, r3
 8101306:	4313      	orrs	r3, r2
 8101308:	b21b      	sxth	r3, r3
 810130a:	4618      	mov	r0, r3
 810130c:	f7ff f992 	bl	8100634 <__aeabi_i2d>
 8101310:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8101314:	f7ff fb22 	bl	810095c <__aeabi_ddiv>
 8101318:	4602      	mov	r2, r0
 810131a:	460b      	mov	r3, r1
 810131c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8101320:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8101324:	021b      	lsls	r3, r3, #8
 8101326:	b21a      	sxth	r2, r3
 8101328:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 810132c:	b21b      	sxth	r3, r3
 810132e:	4313      	orrs	r3, r2
 8101330:	b21b      	sxth	r3, r3
 8101332:	4618      	mov	r0, r3
 8101334:	f7ff f97e 	bl	8100634 <__aeabi_i2d>
 8101338:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810133c:	f7ff fb0e 	bl	810095c <__aeabi_ddiv>
 8101340:	4602      	mov	r2, r0
 8101342:	460b      	mov	r3, r1
 8101344:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8101348:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 810134c:	021b      	lsls	r3, r3, #8
 810134e:	b21a      	sxth	r2, r3
 8101350:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8101354:	b21b      	sxth	r3, r3
 8101356:	4313      	orrs	r3, r2
 8101358:	b21b      	sxth	r3, r3
 810135a:	4618      	mov	r0, r3
 810135c:	f7ff f96a 	bl	8100634 <__aeabi_i2d>
 8101360:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8101364:	f7ff fafa 	bl	810095c <__aeabi_ddiv>
 8101368:	4602      	mov	r2, r0
 810136a:	460b      	mov	r3, r1
 810136c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8101370:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8101374:	021b      	lsls	r3, r3, #8
 8101376:	b21a      	sxth	r2, r3
 8101378:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 810137c:	b21b      	sxth	r3, r3
 810137e:	4313      	orrs	r3, r2
 8101380:	b21b      	sxth	r3, r3
 8101382:	4618      	mov	r0, r3
 8101384:	f7ff f956 	bl	8100634 <__aeabi_i2d>
 8101388:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810138c:	f7ff fae6 	bl	810095c <__aeabi_ddiv>
 8101390:	4602      	mov	r2, r0
 8101392:	460b      	mov	r3, r1
 8101394:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8101398:	e03b      	b.n	8101412 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 810139a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 810139e:	021b      	lsls	r3, r3, #8
 81013a0:	b21a      	sxth	r2, r3
 81013a2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 81013a6:	b21b      	sxth	r3, r3
 81013a8:	4313      	orrs	r3, r2
 81013aa:	b21b      	sxth	r3, r3
 81013ac:	4618      	mov	r0, r3
 81013ae:	f7ff f941 	bl	8100634 <__aeabi_i2d>
 81013b2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 81013b6:	f7ff fad1 	bl	810095c <__aeabi_ddiv>
 81013ba:	4602      	mov	r2, r0
 81013bc:	460b      	mov	r3, r1
 81013be:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 81013c2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 81013c6:	021b      	lsls	r3, r3, #8
 81013c8:	b21a      	sxth	r2, r3
 81013ca:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 81013ce:	b21b      	sxth	r3, r3
 81013d0:	4313      	orrs	r3, r2
 81013d2:	b21b      	sxth	r3, r3
 81013d4:	4618      	mov	r0, r3
 81013d6:	f7ff f92d 	bl	8100634 <__aeabi_i2d>
 81013da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 81013de:	f7ff fabd 	bl	810095c <__aeabi_ddiv>
 81013e2:	4602      	mov	r2, r0
 81013e4:	460b      	mov	r3, r1
 81013e6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 81013ea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 81013ee:	021b      	lsls	r3, r3, #8
 81013f0:	b21a      	sxth	r2, r3
 81013f2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 81013f6:	b21b      	sxth	r3, r3
 81013f8:	4313      	orrs	r3, r2
 81013fa:	b21b      	sxth	r3, r3
 81013fc:	4618      	mov	r0, r3
 81013fe:	f7ff f919 	bl	8100634 <__aeabi_i2d>
 8101402:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8101406:	f7ff faa9 	bl	810095c <__aeabi_ddiv>
 810140a:	4602      	mov	r2, r0
 810140c:	460b      	mov	r3, r1
 810140e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 8101412:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8101416:	f107 0528 	add.w	r5, r7, #40	; 0x28
 810141a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810141c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810141e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8101422:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101426:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 810142a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 810142e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8101432:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8101436:	ec49 8b14 	vmov	d4, r8, r9
 810143a:	ec45 4b15 	vmov	d5, r4, r5
 810143e:	ec41 0b16 	vmov	d6, r0, r1
 8101442:	ec43 2b17 	vmov	d7, r2, r3
}
 8101446:	eeb0 0a44 	vmov.f32	s0, s8
 810144a:	eef0 0a64 	vmov.f32	s1, s9
 810144e:	eeb0 1a45 	vmov.f32	s2, s10
 8101452:	eef0 1a65 	vmov.f32	s3, s11
 8101456:	eeb0 2a46 	vmov.f32	s4, s12
 810145a:	eef0 2a66 	vmov.f32	s5, s13
 810145e:	eeb0 3a47 	vmov.f32	s6, s14
 8101462:	eef0 3a67 	vmov.f32	s7, s15
 8101466:	3778      	adds	r7, #120	; 0x78
 8101468:	46bd      	mov	sp, r7
 810146a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 810146e:	bf00      	nop
 8101470:	3ff00000 	.word	0x3ff00000
 8101474:	1000000e 	.word	0x1000000e
 8101478:	10000008 	.word	0x10000008
 810147c:	1000000a 	.word	0x1000000a
 8101480:	1000000c 	.word	0x1000000c
 8101484:	10000010 	.word	0x10000010

08101488 <bno055_getVectorAccelerometer>:

// Ottiene un vettore accelerazione dal sensore BNO055
bno055_vector_t bno055_getVectorAccelerometer() {
 8101488:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 810148c:	b090      	sub	sp, #64	; 0x40
 810148e:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
 8101490:	2008      	movs	r0, #8
 8101492:	f7ff feb5 	bl	8101200 <bno055_getVector>
 8101496:	eeb0 4a40 	vmov.f32	s8, s0
 810149a:	eef0 4a60 	vmov.f32	s9, s1
 810149e:	eeb0 5a41 	vmov.f32	s10, s2
 81014a2:	eef0 5a61 	vmov.f32	s11, s3
 81014a6:	eeb0 6a42 	vmov.f32	s12, s4
 81014aa:	eef0 6a62 	vmov.f32	s13, s5
 81014ae:	eeb0 7a43 	vmov.f32	s14, s6
 81014b2:	eef0 7a63 	vmov.f32	s15, s7
 81014b6:	ed87 4b08 	vstr	d4, [r7, #32]
 81014ba:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 81014be:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 81014c2:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 81014c6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 81014ca:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 81014ce:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 81014d2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 81014d6:	ec49 8b14 	vmov	d4, r8, r9
 81014da:	ec45 4b15 	vmov	d5, r4, r5
 81014de:	ec41 0b16 	vmov	d6, r0, r1
 81014e2:	ec43 2b17 	vmov	d7, r2, r3
}
 81014e6:	eeb0 0a44 	vmov.f32	s0, s8
 81014ea:	eef0 0a64 	vmov.f32	s1, s9
 81014ee:	eeb0 1a45 	vmov.f32	s2, s10
 81014f2:	eef0 1a65 	vmov.f32	s3, s11
 81014f6:	eeb0 2a46 	vmov.f32	s4, s12
 81014fa:	eef0 2a66 	vmov.f32	s5, s13
 81014fe:	eeb0 3a47 	vmov.f32	s6, s14
 8101502:	eef0 3a67 	vmov.f32	s7, s15
 8101506:	3740      	adds	r7, #64	; 0x40
 8101508:	46bd      	mov	sp, r7
 810150a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0810150e <bno055_getVectorMagnetometer>:
// Ottiene un vettore magnetico dal sensore BNO055
bno055_vector_t bno055_getVectorMagnetometer() {
 810150e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8101512:	b090      	sub	sp, #64	; 0x40
 8101514:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
 8101516:	200e      	movs	r0, #14
 8101518:	f7ff fe72 	bl	8101200 <bno055_getVector>
 810151c:	eeb0 4a40 	vmov.f32	s8, s0
 8101520:	eef0 4a60 	vmov.f32	s9, s1
 8101524:	eeb0 5a41 	vmov.f32	s10, s2
 8101528:	eef0 5a61 	vmov.f32	s11, s3
 810152c:	eeb0 6a42 	vmov.f32	s12, s4
 8101530:	eef0 6a62 	vmov.f32	s13, s5
 8101534:	eeb0 7a43 	vmov.f32	s14, s6
 8101538:	eef0 7a63 	vmov.f32	s15, s7
 810153c:	ed87 4b08 	vstr	d4, [r7, #32]
 8101540:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8101544:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8101548:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 810154c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8101550:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8101554:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8101558:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 810155c:	ec49 8b14 	vmov	d4, r8, r9
 8101560:	ec45 4b15 	vmov	d5, r4, r5
 8101564:	ec41 0b16 	vmov	d6, r0, r1
 8101568:	ec43 2b17 	vmov	d7, r2, r3
}
 810156c:	eeb0 0a44 	vmov.f32	s0, s8
 8101570:	eef0 0a64 	vmov.f32	s1, s9
 8101574:	eeb0 1a45 	vmov.f32	s2, s10
 8101578:	eef0 1a65 	vmov.f32	s3, s11
 810157c:	eeb0 2a46 	vmov.f32	s4, s12
 8101580:	eef0 2a66 	vmov.f32	s5, s13
 8101584:	eeb0 3a47 	vmov.f32	s6, s14
 8101588:	eef0 3a67 	vmov.f32	s7, s15
 810158c:	3740      	adds	r7, #64	; 0x40
 810158e:	46bd      	mov	sp, r7
 8101590:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08101594 <bno055_assignI2C>:
  uint8_t axisMapSign = (axis.x_sign << 2) | (axis.y_sign << 1) | (axis.z_sign);
  bno055_writeData(BNO055_AXIS_MAP_CONFIG, axisRemap);
  bno055_writeData(BNO055_AXIS_MAP_SIGN, axisMapSign);
}

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8101594:	b480      	push	{r7}
 8101596:	b083      	sub	sp, #12
 8101598:	af00      	add	r7, sp, #0
 810159a:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 810159c:	4a04      	ldr	r2, [pc, #16]	; (81015b0 <bno055_assignI2C+0x1c>)
 810159e:	687b      	ldr	r3, [r7, #4]
 81015a0:	6013      	str	r3, [r2, #0]
}
 81015a2:	bf00      	nop
 81015a4:	370c      	adds	r7, #12
 81015a6:	46bd      	mov	sp, r7
 81015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015ac:	4770      	bx	lr
 81015ae:	bf00      	nop
 81015b0:	10000204 	.word	0x10000204

081015b4 <bno055_delay>:

void bno055_delay(int time) {
 81015b4:	b580      	push	{r7, lr}
 81015b6:	b082      	sub	sp, #8
 81015b8:	af00      	add	r7, sp, #0
 81015ba:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 81015bc:	687b      	ldr	r3, [r7, #4]
 81015be:	4618      	mov	r0, r3
 81015c0:	f000 fdda 	bl	8102178 <HAL_Delay>
#endif
}
 81015c4:	bf00      	nop
 81015c6:	3708      	adds	r7, #8
 81015c8:	46bd      	mov	sp, r7
 81015ca:	bd80      	pop	{r7, pc}

081015cc <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 81015cc:	b580      	push	{r7, lr}
 81015ce:	b088      	sub	sp, #32
 81015d0:	af02      	add	r7, sp, #8
 81015d2:	4603      	mov	r3, r0
 81015d4:	460a      	mov	r2, r1
 81015d6:	71fb      	strb	r3, [r7, #7]
 81015d8:	4613      	mov	r3, r2
 81015da:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 81015dc:	79fb      	ldrb	r3, [r7, #7]
 81015de:	733b      	strb	r3, [r7, #12]
 81015e0:	79bb      	ldrb	r3, [r7, #6]
 81015e2:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 81015e4:	4b5a      	ldr	r3, [pc, #360]	; (8101750 <bno055_writeData+0x184>)
 81015e6:	6818      	ldr	r0, [r3, #0]
 81015e8:	f107 020c 	add.w	r2, r7, #12
 81015ec:	230a      	movs	r3, #10
 81015ee:	9300      	str	r3, [sp, #0]
 81015f0:	2302      	movs	r3, #2
 81015f2:	2150      	movs	r1, #80	; 0x50
 81015f4:	f001 f974 	bl	81028e0 <HAL_I2C_Master_Transmit>
 81015f8:	4603      	mov	r3, r0
 81015fa:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);

  if (status == HAL_OK) {
 81015fc:	7dfb      	ldrb	r3, [r7, #23]
 81015fe:	2b00      	cmp	r3, #0
 8101600:	f000 80a0 	beq.w	8101744 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8101604:	7dfb      	ldrb	r3, [r7, #23]
 8101606:	2b01      	cmp	r3, #1
 8101608:	d103      	bne.n	8101612 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 810160a:	4852      	ldr	r0, [pc, #328]	; (8101754 <bno055_writeData+0x188>)
 810160c:	f006 f8ea 	bl	81077e4 <puts>
 8101610:	e012      	b.n	8101638 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8101612:	7dfb      	ldrb	r3, [r7, #23]
 8101614:	2b03      	cmp	r3, #3
 8101616:	d103      	bne.n	8101620 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8101618:	484f      	ldr	r0, [pc, #316]	; (8101758 <bno055_writeData+0x18c>)
 810161a:	f006 f8e3 	bl	81077e4 <puts>
 810161e:	e00b      	b.n	8101638 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8101620:	7dfb      	ldrb	r3, [r7, #23]
 8101622:	2b02      	cmp	r3, #2
 8101624:	d103      	bne.n	810162e <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8101626:	484d      	ldr	r0, [pc, #308]	; (810175c <bno055_writeData+0x190>)
 8101628:	f006 f8dc 	bl	81077e4 <puts>
 810162c:	e004      	b.n	8101638 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 810162e:	7dfb      	ldrb	r3, [r7, #23]
 8101630:	4619      	mov	r1, r3
 8101632:	484b      	ldr	r0, [pc, #300]	; (8101760 <bno055_writeData+0x194>)
 8101634:	f006 f870 	bl	8107718 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8101638:	4b45      	ldr	r3, [pc, #276]	; (8101750 <bno055_writeData+0x184>)
 810163a:	681b      	ldr	r3, [r3, #0]
 810163c:	4618      	mov	r0, r3
 810163e:	f001 fb47 	bl	8102cd0 <HAL_I2C_GetError>
 8101642:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8101644:	693b      	ldr	r3, [r7, #16]
 8101646:	2b00      	cmp	r3, #0
 8101648:	d07e      	beq.n	8101748 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 810164a:	693b      	ldr	r3, [r7, #16]
 810164c:	2b01      	cmp	r3, #1
 810164e:	d103      	bne.n	8101658 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8101650:	4844      	ldr	r0, [pc, #272]	; (8101764 <bno055_writeData+0x198>)
 8101652:	f006 f8c7 	bl	81077e4 <puts>
 8101656:	e021      	b.n	810169c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8101658:	693b      	ldr	r3, [r7, #16]
 810165a:	2b02      	cmp	r3, #2
 810165c:	d103      	bne.n	8101666 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 810165e:	4842      	ldr	r0, [pc, #264]	; (8101768 <bno055_writeData+0x19c>)
 8101660:	f006 f8c0 	bl	81077e4 <puts>
 8101664:	e01a      	b.n	810169c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8101666:	693b      	ldr	r3, [r7, #16]
 8101668:	2b04      	cmp	r3, #4
 810166a:	d103      	bne.n	8101674 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 810166c:	483f      	ldr	r0, [pc, #252]	; (810176c <bno055_writeData+0x1a0>)
 810166e:	f006 f8b9 	bl	81077e4 <puts>
 8101672:	e013      	b.n	810169c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8101674:	693b      	ldr	r3, [r7, #16]
 8101676:	2b08      	cmp	r3, #8
 8101678:	d103      	bne.n	8101682 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 810167a:	483d      	ldr	r0, [pc, #244]	; (8101770 <bno055_writeData+0x1a4>)
 810167c:	f006 f8b2 	bl	81077e4 <puts>
 8101680:	e00c      	b.n	810169c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8101682:	693b      	ldr	r3, [r7, #16]
 8101684:	2b10      	cmp	r3, #16
 8101686:	d103      	bne.n	8101690 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8101688:	483a      	ldr	r0, [pc, #232]	; (8101774 <bno055_writeData+0x1a8>)
 810168a:	f006 f8ab 	bl	81077e4 <puts>
 810168e:	e005      	b.n	810169c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8101690:	693b      	ldr	r3, [r7, #16]
 8101692:	2b20      	cmp	r3, #32
 8101694:	d102      	bne.n	810169c <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8101696:	4838      	ldr	r0, [pc, #224]	; (8101778 <bno055_writeData+0x1ac>)
 8101698:	f006 f8a4 	bl	81077e4 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 810169c:	4b2c      	ldr	r3, [pc, #176]	; (8101750 <bno055_writeData+0x184>)
 810169e:	681b      	ldr	r3, [r3, #0]
 81016a0:	4618      	mov	r0, r3
 81016a2:	f001 fb07 	bl	8102cb4 <HAL_I2C_GetState>
 81016a6:	4603      	mov	r3, r0
 81016a8:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 81016aa:	7bfb      	ldrb	r3, [r7, #15]
 81016ac:	2b00      	cmp	r3, #0
 81016ae:	d103      	bne.n	81016b8 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 81016b0:	4832      	ldr	r0, [pc, #200]	; (810177c <bno055_writeData+0x1b0>)
 81016b2:	f006 f897 	bl	81077e4 <puts>
 81016b6:	e048      	b.n	810174a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 81016b8:	7bfb      	ldrb	r3, [r7, #15]
 81016ba:	2b20      	cmp	r3, #32
 81016bc:	d103      	bne.n	81016c6 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 81016be:	482f      	ldr	r0, [pc, #188]	; (810177c <bno055_writeData+0x1b0>)
 81016c0:	f006 f890 	bl	81077e4 <puts>
 81016c4:	e041      	b.n	810174a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 81016c6:	7bfb      	ldrb	r3, [r7, #15]
 81016c8:	2b24      	cmp	r3, #36	; 0x24
 81016ca:	d103      	bne.n	81016d4 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 81016cc:	482c      	ldr	r0, [pc, #176]	; (8101780 <bno055_writeData+0x1b4>)
 81016ce:	f006 f889 	bl	81077e4 <puts>
 81016d2:	e03a      	b.n	810174a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 81016d4:	7bfb      	ldrb	r3, [r7, #15]
 81016d6:	2b21      	cmp	r3, #33	; 0x21
 81016d8:	d103      	bne.n	81016e2 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 81016da:	482a      	ldr	r0, [pc, #168]	; (8101784 <bno055_writeData+0x1b8>)
 81016dc:	f006 f882 	bl	81077e4 <puts>
 81016e0:	e033      	b.n	810174a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 81016e2:	7bfb      	ldrb	r3, [r7, #15]
 81016e4:	2b22      	cmp	r3, #34	; 0x22
 81016e6:	d103      	bne.n	81016f0 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 81016e8:	4827      	ldr	r0, [pc, #156]	; (8101788 <bno055_writeData+0x1bc>)
 81016ea:	f006 f87b 	bl	81077e4 <puts>
 81016ee:	e02c      	b.n	810174a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 81016f0:	7bfb      	ldrb	r3, [r7, #15]
 81016f2:	2b28      	cmp	r3, #40	; 0x28
 81016f4:	d103      	bne.n	81016fe <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 81016f6:	4825      	ldr	r0, [pc, #148]	; (810178c <bno055_writeData+0x1c0>)
 81016f8:	f006 f874 	bl	81077e4 <puts>
 81016fc:	e025      	b.n	810174a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 81016fe:	7bfb      	ldrb	r3, [r7, #15]
 8101700:	2b29      	cmp	r3, #41	; 0x29
 8101702:	d103      	bne.n	810170c <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8101704:	4822      	ldr	r0, [pc, #136]	; (8101790 <bno055_writeData+0x1c4>)
 8101706:	f006 f86d 	bl	81077e4 <puts>
 810170a:	e01e      	b.n	810174a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 810170c:	7bfb      	ldrb	r3, [r7, #15]
 810170e:	2b2a      	cmp	r3, #42	; 0x2a
 8101710:	d103      	bne.n	810171a <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8101712:	4820      	ldr	r0, [pc, #128]	; (8101794 <bno055_writeData+0x1c8>)
 8101714:	f006 f866 	bl	81077e4 <puts>
 8101718:	e017      	b.n	810174a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 810171a:	7bfb      	ldrb	r3, [r7, #15]
 810171c:	2b60      	cmp	r3, #96	; 0x60
 810171e:	d103      	bne.n	8101728 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8101720:	481d      	ldr	r0, [pc, #116]	; (8101798 <bno055_writeData+0x1cc>)
 8101722:	f006 f85f 	bl	81077e4 <puts>
 8101726:	e010      	b.n	810174a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8101728:	7bfb      	ldrb	r3, [r7, #15]
 810172a:	2ba0      	cmp	r3, #160	; 0xa0
 810172c:	d103      	bne.n	8101736 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 810172e:	481b      	ldr	r0, [pc, #108]	; (810179c <bno055_writeData+0x1d0>)
 8101730:	f006 f858 	bl	81077e4 <puts>
 8101734:	e009      	b.n	810174a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8101736:	7bfb      	ldrb	r3, [r7, #15]
 8101738:	2be0      	cmp	r3, #224	; 0xe0
 810173a:	d106      	bne.n	810174a <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 810173c:	4818      	ldr	r0, [pc, #96]	; (81017a0 <bno055_writeData+0x1d4>)
 810173e:	f006 f851 	bl	81077e4 <puts>
 8101742:	e002      	b.n	810174a <bno055_writeData+0x17e>
    return;
 8101744:	bf00      	nop
 8101746:	e000      	b.n	810174a <bno055_writeData+0x17e>
    return;
 8101748:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 810174a:	3718      	adds	r7, #24
 810174c:	46bd      	mov	sp, r7
 810174e:	bd80      	pop	{r7, pc}
 8101750:	10000204 	.word	0x10000204
 8101754:	0810b1e8 	.word	0x0810b1e8
 8101758:	0810b20c 	.word	0x0810b20c
 810175c:	0810b234 	.word	0x0810b234
 8101760:	0810b258 	.word	0x0810b258
 8101764:	0810b270 	.word	0x0810b270
 8101768:	0810b284 	.word	0x0810b284
 810176c:	0810b298 	.word	0x0810b298
 8101770:	0810b2ac 	.word	0x0810b2ac
 8101774:	0810b2c0 	.word	0x0810b2c0
 8101778:	0810b2d4 	.word	0x0810b2d4
 810177c:	0810b2ec 	.word	0x0810b2ec
 8101780:	0810b304 	.word	0x0810b304
 8101784:	0810b318 	.word	0x0810b318
 8101788:	0810b330 	.word	0x0810b330
 810178c:	0810b348 	.word	0x0810b348
 8101790:	0810b360 	.word	0x0810b360
 8101794:	0810b380 	.word	0x0810b380
 8101798:	0810b3a0 	.word	0x0810b3a0
 810179c:	0810b3b8 	.word	0x0810b3b8
 81017a0:	0810b3d0 	.word	0x0810b3d0

081017a4 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 81017a4:	b580      	push	{r7, lr}
 81017a6:	b086      	sub	sp, #24
 81017a8:	af02      	add	r7, sp, #8
 81017aa:	4603      	mov	r3, r0
 81017ac:	6039      	str	r1, [r7, #0]
 81017ae:	71fb      	strb	r3, [r7, #7]
 81017b0:	4613      	mov	r3, r2
 81017b2:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 81017b4:	4b1c      	ldr	r3, [pc, #112]	; (8101828 <bno055_readData+0x84>)
 81017b6:	6818      	ldr	r0, [r3, #0]
 81017b8:	1dfa      	adds	r2, r7, #7
 81017ba:	2364      	movs	r3, #100	; 0x64
 81017bc:	9300      	str	r3, [sp, #0]
 81017be:	2301      	movs	r3, #1
 81017c0:	2150      	movs	r1, #80	; 0x50
 81017c2:	f001 f88d 	bl	81028e0 <HAL_I2C_Master_Transmit>
 81017c6:	4603      	mov	r3, r0
 81017c8:	73fb      	strb	r3, [r7, #15]
                          100);
	ret = HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 81017ca:	4b17      	ldr	r3, [pc, #92]	; (8101828 <bno055_readData+0x84>)
 81017cc:	6818      	ldr	r0, [r3, #0]
 81017ce:	79bb      	ldrb	r3, [r7, #6]
 81017d0:	b29b      	uxth	r3, r3
 81017d2:	2264      	movs	r2, #100	; 0x64
 81017d4:	9200      	str	r2, [sp, #0]
 81017d6:	683a      	ldr	r2, [r7, #0]
 81017d8:	2150      	movs	r1, #80	; 0x50
 81017da:	f001 f975 	bl	8102ac8 <HAL_I2C_Master_Receive>
 81017de:	4603      	mov	r3, r0
 81017e0:	73fb      	strb	r3, [r7, #15]
                         100);
	  if (ret == HAL_OK) {
 81017e2:	7bfb      	ldrb	r3, [r7, #15]
 81017e4:	2b00      	cmp	r3, #0
 81017e6:	d01a      	beq.n	810181e <bno055_readData+0x7a>
	    return;
	  }

	  if (ret == HAL_ERROR) {
 81017e8:	7bfb      	ldrb	r3, [r7, #15]
 81017ea:	2b01      	cmp	r3, #1
 81017ec:	d103      	bne.n	81017f6 <bno055_readData+0x52>
	    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 81017ee:	480f      	ldr	r0, [pc, #60]	; (810182c <bno055_readData+0x88>)
 81017f0:	f005 fff8 	bl	81077e4 <puts>
 81017f4:	e014      	b.n	8101820 <bno055_readData+0x7c>
	  } else if (ret == HAL_TIMEOUT) {
 81017f6:	7bfb      	ldrb	r3, [r7, #15]
 81017f8:	2b03      	cmp	r3, #3
 81017fa:	d103      	bne.n	8101804 <bno055_readData+0x60>
	    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 81017fc:	480c      	ldr	r0, [pc, #48]	; (8101830 <bno055_readData+0x8c>)
 81017fe:	f005 fff1 	bl	81077e4 <puts>
 8101802:	e00d      	b.n	8101820 <bno055_readData+0x7c>
	  } else if (ret == HAL_BUSY) {
 8101804:	7bfb      	ldrb	r3, [r7, #15]
 8101806:	2b02      	cmp	r3, #2
 8101808:	d103      	bne.n	8101812 <bno055_readData+0x6e>
	    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 810180a:	480a      	ldr	r0, [pc, #40]	; (8101834 <bno055_readData+0x90>)
 810180c:	f005 ffea 	bl	81077e4 <puts>
 8101810:	e006      	b.n	8101820 <bno055_readData+0x7c>
	  } else {
	    printf("Unknown status data %d", ret);
 8101812:	7bfb      	ldrb	r3, [r7, #15]
 8101814:	4619      	mov	r1, r3
 8101816:	4808      	ldr	r0, [pc, #32]	; (8101838 <bno055_readData+0x94>)
 8101818:	f005 ff7e 	bl	8107718 <iprintf>
 810181c:	e000      	b.n	8101820 <bno055_readData+0x7c>
	    return;
 810181e:	bf00      	nop
	  }
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8101820:	3710      	adds	r7, #16
 8101822:	46bd      	mov	sp, r7
 8101824:	bd80      	pop	{r7, pc}
 8101826:	bf00      	nop
 8101828:	10000204 	.word	0x10000204
 810182c:	0810b1e8 	.word	0x0810b1e8
 8101830:	0810b20c 	.word	0x0810b20c
 8101834:	0810b234 	.word	0x0810b234
 8101838:	0810b258 	.word	0x0810b258

0810183c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 810183c:	b5b0      	push	{r4, r5, r7, lr}
 810183e:	b096      	sub	sp, #88	; 0x58
 8101840:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

	/* Reset of all peripherals, Initializes the Flash interface and the
	     * Systick. */
	    HAL_Init();
 8101842:	f000 fbe5 	bl	8102010 <HAL_Init>

	    /* Configure the system clock */
	    /* Initialize all configured peripherals */
	    MX_GPIO_Init();
 8101846:	f000 f937 	bl	8101ab8 <MX_GPIO_Init>
	    MX_I2C1_Init();
 810184a:	f000 f8a9 	bl	81019a0 <MX_I2C1_Init>
	    MX_USART3_UART_Init();
 810184e:	f000 f8e7 	bl	8101a20 <MX_USART3_UART_Init>

	    bno055_assignI2C(&hi2c1);
 8101852:	484c      	ldr	r0, [pc, #304]	; (8101984 <main+0x148>)
 8101854:	f7ff fe9e 	bl	8101594 <bno055_assignI2C>
		bno055_setup();
 8101858:	f7ff fcaa 	bl	81011b0 <bno055_setup>

		HAL_Delay(1000);
 810185c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8101860:	f000 fc8a 	bl	8102178 <HAL_Delay>

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101864:	4b48      	ldr	r3, [pc, #288]	; (8101988 <main+0x14c>)
 8101866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810186a:	4a47      	ldr	r2, [pc, #284]	; (8101988 <main+0x14c>)
 810186c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101870:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101874:	4b44      	ldr	r3, [pc, #272]	; (8101988 <main+0x14c>)
 8101876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810187a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810187e:	607b      	str	r3, [r7, #4]
 8101880:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101882:	2001      	movs	r0, #1
 8101884:	f000 ff8a 	bl	810279c <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8101888:	f001 fdd2 	bl	8103430 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810188c:	2201      	movs	r2, #1
 810188e:	2102      	movs	r1, #2
 8101890:	2000      	movs	r0, #0
 8101892:	f001 fd53 	bl	810333c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101896:	4b3d      	ldr	r3, [pc, #244]	; (810198c <main+0x150>)
 8101898:	681b      	ldr	r3, [r3, #0]
 810189a:	091b      	lsrs	r3, r3, #4
 810189c:	f003 030f 	and.w	r3, r3, #15
 81018a0:	2b07      	cmp	r3, #7
 81018a2:	d108      	bne.n	81018b6 <main+0x7a>
 81018a4:	4b3a      	ldr	r3, [pc, #232]	; (8101990 <main+0x154>)
 81018a6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81018aa:	4a39      	ldr	r2, [pc, #228]	; (8101990 <main+0x154>)
 81018ac:	f043 0301 	orr.w	r3, r3, #1
 81018b0:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81018b4:	e007      	b.n	81018c6 <main+0x8a>
 81018b6:	4b36      	ldr	r3, [pc, #216]	; (8101990 <main+0x154>)
 81018b8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81018bc:	4a34      	ldr	r2, [pc, #208]	; (8101990 <main+0x154>)
 81018be:	f043 0301 	orr.w	r3, r3, #1
 81018c2:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

  //bno055_vector_t gyr;
  bno055_vector_t acc;
  bno055_vector_t mag;

  bno055_setOperationModeAMG();
 81018c6:	f7ff fc60 	bl	810118a <bno055_setOperationModeAMG>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag_BNO055_Data_Ready==1){
 81018ca:	4b32      	ldr	r3, [pc, #200]	; (8101994 <main+0x158>)
 81018cc:	681b      	ldr	r3, [r3, #0]
 81018ce:	2b01      	cmp	r3, #1
 81018d0:	d1fb      	bne.n	81018ca <main+0x8e>
	  	  flag_BNO055_Data_Ready = 1;
 81018d2:	4b30      	ldr	r3, [pc, #192]	; (8101994 <main+0x158>)
 81018d4:	2201      	movs	r2, #1
 81018d6:	601a      	str	r2, [r3, #0]
	      //bno055_setCalibrationData(calData);

	  	  //printf("\r\n");

	  	 //gyr = bno055_getVectorGyroscope();
	  	 acc = bno055_getVectorAccelerometer();
 81018d8:	f7ff fdd6 	bl	8101488 <bno055_getVectorAccelerometer>
 81018dc:	eeb0 4a40 	vmov.f32	s8, s0
 81018e0:	eef0 4a60 	vmov.f32	s9, s1
 81018e4:	eeb0 5a41 	vmov.f32	s10, s2
 81018e8:	eef0 5a61 	vmov.f32	s11, s3
 81018ec:	eeb0 6a42 	vmov.f32	s12, s4
 81018f0:	eef0 6a62 	vmov.f32	s13, s5
 81018f4:	eeb0 7a43 	vmov.f32	s14, s6
 81018f8:	eef0 7a63 	vmov.f32	s15, s7
 81018fc:	ed87 4b0a 	vstr	d4, [r7, #40]	; 0x28
 8101900:	ed87 5b0c 	vstr	d5, [r7, #48]	; 0x30
 8101904:	ed87 6b0e 	vstr	d6, [r7, #56]	; 0x38
 8101908:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	  	 mag = bno055_getVectorMagnetometer();
 810190c:	f7ff fdff 	bl	810150e <bno055_getVectorMagnetometer>
 8101910:	eeb0 4a40 	vmov.f32	s8, s0
 8101914:	eef0 4a60 	vmov.f32	s9, s1
 8101918:	eeb0 5a41 	vmov.f32	s10, s2
 810191c:	eef0 5a61 	vmov.f32	s11, s3
 8101920:	eeb0 6a42 	vmov.f32	s12, s4
 8101924:	eef0 6a62 	vmov.f32	s13, s5
 8101928:	eeb0 7a43 	vmov.f32	s14, s6
 810192c:	eef0 7a63 	vmov.f32	s15, s7
 8101930:	ed87 4b02 	vstr	d4, [r7, #8]
 8101934:	ed87 5b04 	vstr	d5, [r7, #16]
 8101938:	ed87 6b06 	vstr	d6, [r7, #24]
 810193c:	ed87 7b08 	vstr	d7, [r7, #32]
	  	 //printf("GYR-x: %+2.2f | y: %+2.2f | z: %+2.2f\r\n", gyr.x, gyr.y, gyr.z);
	  	 printf("ACC-x: %+2.2f | y: %+2.2f | z: %+2.2f\r\n", acc.x, acc.y, acc.z);
 8101940:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8101944:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8101948:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 810194c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8101950:	e9cd 2300 	strd	r2, r3, [sp]
 8101954:	4622      	mov	r2, r4
 8101956:	462b      	mov	r3, r5
 8101958:	480f      	ldr	r0, [pc, #60]	; (8101998 <main+0x15c>)
 810195a:	f005 fedd 	bl	8107718 <iprintf>
	  	 printf("MAG-x: %+2.2f | y: %+2.2f | z: %+2.2f\r\n", mag.x, mag.y, mag.z);
 810195e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8101962:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8101966:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 810196a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810196e:	e9cd 2300 	strd	r2, r3, [sp]
 8101972:	4622      	mov	r2, r4
 8101974:	462b      	mov	r3, r5
 8101976:	4809      	ldr	r0, [pc, #36]	; (810199c <main+0x160>)
 8101978:	f005 fece 	bl	8107718 <iprintf>

	  	  HAL_Delay(100);
 810197c:	2064      	movs	r0, #100	; 0x64
 810197e:	f000 fbfb 	bl	8102178 <HAL_Delay>
	  if(flag_BNO055_Data_Ready==1){
 8101982:	e7a2      	b.n	81018ca <main+0x8e>
 8101984:	10000208 	.word	0x10000208
 8101988:	58024400 	.word	0x58024400
 810198c:	e000ed00 	.word	0xe000ed00
 8101990:	58026400 	.word	0x58026400
 8101994:	10000014 	.word	0x10000014
 8101998:	0810b6cc 	.word	0x0810b6cc
 810199c:	0810b6f4 	.word	0x0810b6f4

081019a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 81019a0:	b580      	push	{r7, lr}
 81019a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 81019a4:	4b1b      	ldr	r3, [pc, #108]	; (8101a14 <MX_I2C1_Init+0x74>)
 81019a6:	4a1c      	ldr	r2, [pc, #112]	; (8101a18 <MX_I2C1_Init+0x78>)
 81019a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00909FCE;
 81019aa:	4b1a      	ldr	r3, [pc, #104]	; (8101a14 <MX_I2C1_Init+0x74>)
 81019ac:	4a1b      	ldr	r2, [pc, #108]	; (8101a1c <MX_I2C1_Init+0x7c>)
 81019ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 81019b0:	4b18      	ldr	r3, [pc, #96]	; (8101a14 <MX_I2C1_Init+0x74>)
 81019b2:	2200      	movs	r2, #0
 81019b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 81019b6:	4b17      	ldr	r3, [pc, #92]	; (8101a14 <MX_I2C1_Init+0x74>)
 81019b8:	2201      	movs	r2, #1
 81019ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 81019bc:	4b15      	ldr	r3, [pc, #84]	; (8101a14 <MX_I2C1_Init+0x74>)
 81019be:	2200      	movs	r2, #0
 81019c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 81019c2:	4b14      	ldr	r3, [pc, #80]	; (8101a14 <MX_I2C1_Init+0x74>)
 81019c4:	2200      	movs	r2, #0
 81019c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 81019c8:	4b12      	ldr	r3, [pc, #72]	; (8101a14 <MX_I2C1_Init+0x74>)
 81019ca:	2200      	movs	r2, #0
 81019cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 81019ce:	4b11      	ldr	r3, [pc, #68]	; (8101a14 <MX_I2C1_Init+0x74>)
 81019d0:	2200      	movs	r2, #0
 81019d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81019d4:	4b0f      	ldr	r3, [pc, #60]	; (8101a14 <MX_I2C1_Init+0x74>)
 81019d6:	2200      	movs	r2, #0
 81019d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 81019da:	480e      	ldr	r0, [pc, #56]	; (8101a14 <MX_I2C1_Init+0x74>)
 81019dc:	f000 fef0 	bl	81027c0 <HAL_I2C_Init>
 81019e0:	4603      	mov	r3, r0
 81019e2:	2b00      	cmp	r3, #0
 81019e4:	d001      	beq.n	81019ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 81019e6:	f000 f8ff 	bl	8101be8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81019ea:	2100      	movs	r1, #0
 81019ec:	4809      	ldr	r0, [pc, #36]	; (8101a14 <MX_I2C1_Init+0x74>)
 81019ee:	f001 fc0d 	bl	810320c <HAL_I2CEx_ConfigAnalogFilter>
 81019f2:	4603      	mov	r3, r0
 81019f4:	2b00      	cmp	r3, #0
 81019f6:	d001      	beq.n	81019fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 81019f8:	f000 f8f6 	bl	8101be8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 81019fc:	2100      	movs	r1, #0
 81019fe:	4805      	ldr	r0, [pc, #20]	; (8101a14 <MX_I2C1_Init+0x74>)
 8101a00:	f001 fc4f 	bl	81032a2 <HAL_I2CEx_ConfigDigitalFilter>
 8101a04:	4603      	mov	r3, r0
 8101a06:	2b00      	cmp	r3, #0
 8101a08:	d001      	beq.n	8101a0e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8101a0a:	f000 f8ed 	bl	8101be8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8101a0e:	bf00      	nop
 8101a10:	bd80      	pop	{r7, pc}
 8101a12:	bf00      	nop
 8101a14:	10000208 	.word	0x10000208
 8101a18:	40005400 	.word	0x40005400
 8101a1c:	00909fce 	.word	0x00909fce

08101a20 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8101a20:	b580      	push	{r7, lr}
 8101a22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8101a24:	4b22      	ldr	r3, [pc, #136]	; (8101ab0 <MX_USART3_UART_Init+0x90>)
 8101a26:	4a23      	ldr	r2, [pc, #140]	; (8101ab4 <MX_USART3_UART_Init+0x94>)
 8101a28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8101a2a:	4b21      	ldr	r3, [pc, #132]	; (8101ab0 <MX_USART3_UART_Init+0x90>)
 8101a2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8101a30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8101a32:	4b1f      	ldr	r3, [pc, #124]	; (8101ab0 <MX_USART3_UART_Init+0x90>)
 8101a34:	2200      	movs	r2, #0
 8101a36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8101a38:	4b1d      	ldr	r3, [pc, #116]	; (8101ab0 <MX_USART3_UART_Init+0x90>)
 8101a3a:	2200      	movs	r2, #0
 8101a3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8101a3e:	4b1c      	ldr	r3, [pc, #112]	; (8101ab0 <MX_USART3_UART_Init+0x90>)
 8101a40:	2200      	movs	r2, #0
 8101a42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8101a44:	4b1a      	ldr	r3, [pc, #104]	; (8101ab0 <MX_USART3_UART_Init+0x90>)
 8101a46:	220c      	movs	r2, #12
 8101a48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8101a4a:	4b19      	ldr	r3, [pc, #100]	; (8101ab0 <MX_USART3_UART_Init+0x90>)
 8101a4c:	2200      	movs	r2, #0
 8101a4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8101a50:	4b17      	ldr	r3, [pc, #92]	; (8101ab0 <MX_USART3_UART_Init+0x90>)
 8101a52:	2200      	movs	r2, #0
 8101a54:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101a56:	4b16      	ldr	r3, [pc, #88]	; (8101ab0 <MX_USART3_UART_Init+0x90>)
 8101a58:	2200      	movs	r2, #0
 8101a5a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101a5c:	4b14      	ldr	r3, [pc, #80]	; (8101ab0 <MX_USART3_UART_Init+0x90>)
 8101a5e:	2200      	movs	r2, #0
 8101a60:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101a62:	4b13      	ldr	r3, [pc, #76]	; (8101ab0 <MX_USART3_UART_Init+0x90>)
 8101a64:	2200      	movs	r2, #0
 8101a66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8101a68:	4811      	ldr	r0, [pc, #68]	; (8101ab0 <MX_USART3_UART_Init+0x90>)
 8101a6a:	f003 fcf3 	bl	8105454 <HAL_UART_Init>
 8101a6e:	4603      	mov	r3, r0
 8101a70:	2b00      	cmp	r3, #0
 8101a72:	d001      	beq.n	8101a78 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8101a74:	f000 f8b8 	bl	8101be8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101a78:	2100      	movs	r1, #0
 8101a7a:	480d      	ldr	r0, [pc, #52]	; (8101ab0 <MX_USART3_UART_Init+0x90>)
 8101a7c:	f004 fe4a 	bl	8106714 <HAL_UARTEx_SetTxFifoThreshold>
 8101a80:	4603      	mov	r3, r0
 8101a82:	2b00      	cmp	r3, #0
 8101a84:	d001      	beq.n	8101a8a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8101a86:	f000 f8af 	bl	8101be8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101a8a:	2100      	movs	r1, #0
 8101a8c:	4808      	ldr	r0, [pc, #32]	; (8101ab0 <MX_USART3_UART_Init+0x90>)
 8101a8e:	f004 fe7f 	bl	8106790 <HAL_UARTEx_SetRxFifoThreshold>
 8101a92:	4603      	mov	r3, r0
 8101a94:	2b00      	cmp	r3, #0
 8101a96:	d001      	beq.n	8101a9c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8101a98:	f000 f8a6 	bl	8101be8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8101a9c:	4804      	ldr	r0, [pc, #16]	; (8101ab0 <MX_USART3_UART_Init+0x90>)
 8101a9e:	f004 fe00 	bl	81066a2 <HAL_UARTEx_DisableFifoMode>
 8101aa2:	4603      	mov	r3, r0
 8101aa4:	2b00      	cmp	r3, #0
 8101aa6:	d001      	beq.n	8101aac <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8101aa8:	f000 f89e 	bl	8101be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8101aac:	bf00      	nop
 8101aae:	bd80      	pop	{r7, pc}
 8101ab0:	1000025c 	.word	0x1000025c
 8101ab4:	40004800 	.word	0x40004800

08101ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8101ab8:	b580      	push	{r7, lr}
 8101aba:	b088      	sub	sp, #32
 8101abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101abe:	f107 030c 	add.w	r3, r7, #12
 8101ac2:	2200      	movs	r2, #0
 8101ac4:	601a      	str	r2, [r3, #0]
 8101ac6:	605a      	str	r2, [r3, #4]
 8101ac8:	609a      	str	r2, [r3, #8]
 8101aca:	60da      	str	r2, [r3, #12]
 8101acc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101ace:	4b23      	ldr	r3, [pc, #140]	; (8101b5c <MX_GPIO_Init+0xa4>)
 8101ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ad4:	4a21      	ldr	r2, [pc, #132]	; (8101b5c <MX_GPIO_Init+0xa4>)
 8101ad6:	f043 0301 	orr.w	r3, r3, #1
 8101ada:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101ade:	4b1f      	ldr	r3, [pc, #124]	; (8101b5c <MX_GPIO_Init+0xa4>)
 8101ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ae4:	f003 0301 	and.w	r3, r3, #1
 8101ae8:	60bb      	str	r3, [r7, #8]
 8101aea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101aec:	4b1b      	ldr	r3, [pc, #108]	; (8101b5c <MX_GPIO_Init+0xa4>)
 8101aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101af2:	4a1a      	ldr	r2, [pc, #104]	; (8101b5c <MX_GPIO_Init+0xa4>)
 8101af4:	f043 0308 	orr.w	r3, r3, #8
 8101af8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101afc:	4b17      	ldr	r3, [pc, #92]	; (8101b5c <MX_GPIO_Init+0xa4>)
 8101afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b02:	f003 0308 	and.w	r3, r3, #8
 8101b06:	607b      	str	r3, [r7, #4]
 8101b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101b0a:	4b14      	ldr	r3, [pc, #80]	; (8101b5c <MX_GPIO_Init+0xa4>)
 8101b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b10:	4a12      	ldr	r2, [pc, #72]	; (8101b5c <MX_GPIO_Init+0xa4>)
 8101b12:	f043 0302 	orr.w	r3, r3, #2
 8101b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101b1a:	4b10      	ldr	r3, [pc, #64]	; (8101b5c <MX_GPIO_Init+0xa4>)
 8101b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b20:	f003 0302 	and.w	r3, r3, #2
 8101b24:	603b      	str	r3, [r7, #0]
 8101b26:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8101b28:	2308      	movs	r3, #8
 8101b2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8101b2c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8101b30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b32:	2300      	movs	r3, #0
 8101b34:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101b36:	f107 030c 	add.w	r3, r7, #12
 8101b3a:	4619      	mov	r1, r3
 8101b3c:	4808      	ldr	r0, [pc, #32]	; (8101b60 <MX_GPIO_Init+0xa8>)
 8101b3e:	f000 fc63 	bl	8102408 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8101b42:	2200      	movs	r2, #0
 8101b44:	2100      	movs	r1, #0
 8101b46:	2009      	movs	r0, #9
 8101b48:	f000 fc15 	bl	8102376 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8101b4c:	2009      	movs	r0, #9
 8101b4e:	f000 fc2c 	bl	81023aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8101b52:	bf00      	nop
 8101b54:	3720      	adds	r7, #32
 8101b56:	46bd      	mov	sp, r7
 8101b58:	bd80      	pop	{r7, pc}
 8101b5a:	bf00      	nop
 8101b5c:	58024400 	.word	0x58024400
 8101b60:	58020000 	.word	0x58020000

08101b64 <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch){
 8101b64:	b580      	push	{r7, lr}
 8101b66:	b082      	sub	sp, #8
 8101b68:	af00      	add	r7, sp, #0
 8101b6a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 0xFFFF);
 8101b6c:	1d39      	adds	r1, r7, #4
 8101b6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8101b72:	2201      	movs	r2, #1
 8101b74:	4803      	ldr	r0, [pc, #12]	; (8101b84 <__io_putchar+0x20>)
 8101b76:	f003 fcbd 	bl	81054f4 <HAL_UART_Transmit>
	return ch;
 8101b7a:	687b      	ldr	r3, [r7, #4]
}
 8101b7c:	4618      	mov	r0, r3
 8101b7e:	3708      	adds	r7, #8
 8101b80:	46bd      	mov	sp, r7
 8101b82:	bd80      	pop	{r7, pc}
 8101b84:	1000025c 	.word	0x1000025c

08101b88 <__io_getchar>:

int __io_getchar(void)
{
 8101b88:	b580      	push	{r7, lr}
 8101b8a:	b082      	sub	sp, #8
 8101b8c:	af00      	add	r7, sp, #0
	uint8_t ch;

	__HAL_UART_CLEAR_OREFLAG(&huart3);
 8101b8e:	4b0b      	ldr	r3, [pc, #44]	; (8101bbc <__io_getchar+0x34>)
 8101b90:	681b      	ldr	r3, [r3, #0]
 8101b92:	2208      	movs	r2, #8
 8101b94:	621a      	str	r2, [r3, #32]

	HAL_UART_Receive(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8101b96:	1df9      	adds	r1, r7, #7
 8101b98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8101b9c:	2201      	movs	r2, #1
 8101b9e:	4807      	ldr	r0, [pc, #28]	; (8101bbc <__io_getchar+0x34>)
 8101ba0:	f003 fd36 	bl	8105610 <HAL_UART_Receive>

	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8101ba4:	1df9      	adds	r1, r7, #7
 8101ba6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8101baa:	2201      	movs	r2, #1
 8101bac:	4803      	ldr	r0, [pc, #12]	; (8101bbc <__io_getchar+0x34>)
 8101bae:	f003 fca1 	bl	81054f4 <HAL_UART_Transmit>

	return ch;
 8101bb2:	79fb      	ldrb	r3, [r7, #7]
}
 8101bb4:	4618      	mov	r0, r3
 8101bb6:	3708      	adds	r7, #8
 8101bb8:	46bd      	mov	sp, r7
 8101bba:	bd80      	pop	{r7, pc}
 8101bbc:	1000025c 	.word	0x1000025c

08101bc0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 8101bc0:	b480      	push	{r7}
 8101bc2:	b083      	sub	sp, #12
 8101bc4:	af00      	add	r7, sp, #0
 8101bc6:	4603      	mov	r3, r0
 8101bc8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_3){
 8101bca:	88fb      	ldrh	r3, [r7, #6]
 8101bcc:	2b08      	cmp	r3, #8
 8101bce:	d102      	bne.n	8101bd6 <HAL_GPIO_EXTI_Callback+0x16>
		flag_BNO055_Data_Ready = 1;
 8101bd0:	4b04      	ldr	r3, [pc, #16]	; (8101be4 <HAL_GPIO_EXTI_Callback+0x24>)
 8101bd2:	2201      	movs	r2, #1
 8101bd4:	601a      	str	r2, [r3, #0]

	}
}
 8101bd6:	bf00      	nop
 8101bd8:	370c      	adds	r7, #12
 8101bda:	46bd      	mov	sp, r7
 8101bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101be0:	4770      	bx	lr
 8101be2:	bf00      	nop
 8101be4:	10000014 	.word	0x10000014

08101be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101be8:	b480      	push	{r7}
 8101bea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101bec:	b672      	cpsid	i
}
 8101bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101bf0:	e7fe      	b.n	8101bf0 <Error_Handler+0x8>
	...

08101bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101bf4:	b480      	push	{r7}
 8101bf6:	b083      	sub	sp, #12
 8101bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101bfa:	4b0a      	ldr	r3, [pc, #40]	; (8101c24 <HAL_MspInit+0x30>)
 8101bfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101c00:	4a08      	ldr	r2, [pc, #32]	; (8101c24 <HAL_MspInit+0x30>)
 8101c02:	f043 0302 	orr.w	r3, r3, #2
 8101c06:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101c0a:	4b06      	ldr	r3, [pc, #24]	; (8101c24 <HAL_MspInit+0x30>)
 8101c0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101c10:	f003 0302 	and.w	r3, r3, #2
 8101c14:	607b      	str	r3, [r7, #4]
 8101c16:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101c18:	bf00      	nop
 8101c1a:	370c      	adds	r7, #12
 8101c1c:	46bd      	mov	sp, r7
 8101c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c22:	4770      	bx	lr
 8101c24:	58024400 	.word	0x58024400

08101c28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8101c28:	b580      	push	{r7, lr}
 8101c2a:	b0ba      	sub	sp, #232	; 0xe8
 8101c2c:	af00      	add	r7, sp, #0
 8101c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101c30:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101c34:	2200      	movs	r2, #0
 8101c36:	601a      	str	r2, [r3, #0]
 8101c38:	605a      	str	r2, [r3, #4]
 8101c3a:	609a      	str	r2, [r3, #8]
 8101c3c:	60da      	str	r2, [r3, #12]
 8101c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101c40:	f107 0310 	add.w	r3, r7, #16
 8101c44:	22c0      	movs	r2, #192	; 0xc0
 8101c46:	2100      	movs	r1, #0
 8101c48:	4618      	mov	r0, r3
 8101c4a:	f005 fecb 	bl	81079e4 <memset>
  if(hi2c->Instance==I2C1)
 8101c4e:	687b      	ldr	r3, [r7, #4]
 8101c50:	681b      	ldr	r3, [r3, #0]
 8101c52:	4a26      	ldr	r2, [pc, #152]	; (8101cec <HAL_I2C_MspInit+0xc4>)
 8101c54:	4293      	cmp	r3, r2
 8101c56:	d145      	bne.n	8101ce4 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8101c58:	f04f 0208 	mov.w	r2, #8
 8101c5c:	f04f 0300 	mov.w	r3, #0
 8101c60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8101c64:	2300      	movs	r3, #0
 8101c66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101c6a:	f107 0310 	add.w	r3, r7, #16
 8101c6e:	4618      	mov	r0, r3
 8101c70:	f001 fdc4 	bl	81037fc <HAL_RCCEx_PeriphCLKConfig>
 8101c74:	4603      	mov	r3, r0
 8101c76:	2b00      	cmp	r3, #0
 8101c78:	d001      	beq.n	8101c7e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8101c7a:	f7ff ffb5 	bl	8101be8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101c7e:	4b1c      	ldr	r3, [pc, #112]	; (8101cf0 <HAL_I2C_MspInit+0xc8>)
 8101c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c84:	4a1a      	ldr	r2, [pc, #104]	; (8101cf0 <HAL_I2C_MspInit+0xc8>)
 8101c86:	f043 0302 	orr.w	r3, r3, #2
 8101c8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c8e:	4b18      	ldr	r3, [pc, #96]	; (8101cf0 <HAL_I2C_MspInit+0xc8>)
 8101c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c94:	f003 0302 	and.w	r3, r3, #2
 8101c98:	60fb      	str	r3, [r7, #12]
 8101c9a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8101c9c:	23c0      	movs	r3, #192	; 0xc0
 8101c9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101ca2:	2312      	movs	r3, #18
 8101ca4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101ca8:	2300      	movs	r3, #0
 8101caa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101cae:	2300      	movs	r3, #0
 8101cb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8101cb4:	2304      	movs	r3, #4
 8101cb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101cba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101cbe:	4619      	mov	r1, r3
 8101cc0:	480c      	ldr	r0, [pc, #48]	; (8101cf4 <HAL_I2C_MspInit+0xcc>)
 8101cc2:	f000 fba1 	bl	8102408 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8101cc6:	4b0a      	ldr	r3, [pc, #40]	; (8101cf0 <HAL_I2C_MspInit+0xc8>)
 8101cc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101ccc:	4a08      	ldr	r2, [pc, #32]	; (8101cf0 <HAL_I2C_MspInit+0xc8>)
 8101cce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8101cd2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101cd6:	4b06      	ldr	r3, [pc, #24]	; (8101cf0 <HAL_I2C_MspInit+0xc8>)
 8101cd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101ce0:	60bb      	str	r3, [r7, #8]
 8101ce2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8101ce4:	bf00      	nop
 8101ce6:	37e8      	adds	r7, #232	; 0xe8
 8101ce8:	46bd      	mov	sp, r7
 8101cea:	bd80      	pop	{r7, pc}
 8101cec:	40005400 	.word	0x40005400
 8101cf0:	58024400 	.word	0x58024400
 8101cf4:	58020400 	.word	0x58020400

08101cf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8101cf8:	b580      	push	{r7, lr}
 8101cfa:	b0ba      	sub	sp, #232	; 0xe8
 8101cfc:	af00      	add	r7, sp, #0
 8101cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101d00:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101d04:	2200      	movs	r2, #0
 8101d06:	601a      	str	r2, [r3, #0]
 8101d08:	605a      	str	r2, [r3, #4]
 8101d0a:	609a      	str	r2, [r3, #8]
 8101d0c:	60da      	str	r2, [r3, #12]
 8101d0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101d10:	f107 0310 	add.w	r3, r7, #16
 8101d14:	22c0      	movs	r2, #192	; 0xc0
 8101d16:	2100      	movs	r1, #0
 8101d18:	4618      	mov	r0, r3
 8101d1a:	f005 fe63 	bl	81079e4 <memset>
  if(huart->Instance==USART3)
 8101d1e:	687b      	ldr	r3, [r7, #4]
 8101d20:	681b      	ldr	r3, [r3, #0]
 8101d22:	4a27      	ldr	r2, [pc, #156]	; (8101dc0 <HAL_UART_MspInit+0xc8>)
 8101d24:	4293      	cmp	r3, r2
 8101d26:	d146      	bne.n	8101db6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8101d28:	f04f 0202 	mov.w	r2, #2
 8101d2c:	f04f 0300 	mov.w	r3, #0
 8101d30:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8101d34:	2300      	movs	r3, #0
 8101d36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101d3a:	f107 0310 	add.w	r3, r7, #16
 8101d3e:	4618      	mov	r0, r3
 8101d40:	f001 fd5c 	bl	81037fc <HAL_RCCEx_PeriphCLKConfig>
 8101d44:	4603      	mov	r3, r0
 8101d46:	2b00      	cmp	r3, #0
 8101d48:	d001      	beq.n	8101d4e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8101d4a:	f7ff ff4d 	bl	8101be8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8101d4e:	4b1d      	ldr	r3, [pc, #116]	; (8101dc4 <HAL_UART_MspInit+0xcc>)
 8101d50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101d54:	4a1b      	ldr	r2, [pc, #108]	; (8101dc4 <HAL_UART_MspInit+0xcc>)
 8101d56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8101d5a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101d5e:	4b19      	ldr	r3, [pc, #100]	; (8101dc4 <HAL_UART_MspInit+0xcc>)
 8101d60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101d64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101d68:	60fb      	str	r3, [r7, #12]
 8101d6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101d6c:	4b15      	ldr	r3, [pc, #84]	; (8101dc4 <HAL_UART_MspInit+0xcc>)
 8101d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d72:	4a14      	ldr	r2, [pc, #80]	; (8101dc4 <HAL_UART_MspInit+0xcc>)
 8101d74:	f043 0308 	orr.w	r3, r3, #8
 8101d78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101d7c:	4b11      	ldr	r3, [pc, #68]	; (8101dc4 <HAL_UART_MspInit+0xcc>)
 8101d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d82:	f003 0308 	and.w	r3, r3, #8
 8101d86:	60bb      	str	r3, [r7, #8]
 8101d88:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8101d8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101d8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101d92:	2302      	movs	r3, #2
 8101d94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101d98:	2300      	movs	r3, #0
 8101d9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101d9e:	2300      	movs	r3, #0
 8101da0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8101da4:	2307      	movs	r3, #7
 8101da6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101daa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101dae:	4619      	mov	r1, r3
 8101db0:	4805      	ldr	r0, [pc, #20]	; (8101dc8 <HAL_UART_MspInit+0xd0>)
 8101db2:	f000 fb29 	bl	8102408 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8101db6:	bf00      	nop
 8101db8:	37e8      	adds	r7, #232	; 0xe8
 8101dba:	46bd      	mov	sp, r7
 8101dbc:	bd80      	pop	{r7, pc}
 8101dbe:	bf00      	nop
 8101dc0:	40004800 	.word	0x40004800
 8101dc4:	58024400 	.word	0x58024400
 8101dc8:	58020c00 	.word	0x58020c00

08101dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101dcc:	b480      	push	{r7}
 8101dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101dd0:	e7fe      	b.n	8101dd0 <NMI_Handler+0x4>

08101dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101dd2:	b480      	push	{r7}
 8101dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101dd6:	e7fe      	b.n	8101dd6 <HardFault_Handler+0x4>

08101dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101dd8:	b480      	push	{r7}
 8101dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101ddc:	e7fe      	b.n	8101ddc <MemManage_Handler+0x4>

08101dde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101dde:	b480      	push	{r7}
 8101de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101de2:	e7fe      	b.n	8101de2 <BusFault_Handler+0x4>

08101de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101de4:	b480      	push	{r7}
 8101de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101de8:	e7fe      	b.n	8101de8 <UsageFault_Handler+0x4>

08101dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101dea:	b480      	push	{r7}
 8101dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101dee:	bf00      	nop
 8101df0:	46bd      	mov	sp, r7
 8101df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101df6:	4770      	bx	lr

08101df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101df8:	b480      	push	{r7}
 8101dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101dfc:	bf00      	nop
 8101dfe:	46bd      	mov	sp, r7
 8101e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e04:	4770      	bx	lr

08101e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101e06:	b480      	push	{r7}
 8101e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101e0a:	bf00      	nop
 8101e0c:	46bd      	mov	sp, r7
 8101e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e12:	4770      	bx	lr

08101e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101e14:	b580      	push	{r7, lr}
 8101e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101e18:	f000 f98e 	bl	8102138 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101e1c:	bf00      	nop
 8101e1e:	bd80      	pop	{r7, pc}

08101e20 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8101e20:	b580      	push	{r7, lr}
 8101e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8101e24:	2008      	movs	r0, #8
 8101e26:	f000 fc9f 	bl	8102768 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8101e2a:	bf00      	nop
 8101e2c:	bd80      	pop	{r7, pc}

08101e2e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8101e2e:	b480      	push	{r7}
 8101e30:	af00      	add	r7, sp, #0
  return 1;
 8101e32:	2301      	movs	r3, #1
}
 8101e34:	4618      	mov	r0, r3
 8101e36:	46bd      	mov	sp, r7
 8101e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e3c:	4770      	bx	lr

08101e3e <_kill>:

int _kill(int pid, int sig)
{
 8101e3e:	b580      	push	{r7, lr}
 8101e40:	b082      	sub	sp, #8
 8101e42:	af00      	add	r7, sp, #0
 8101e44:	6078      	str	r0, [r7, #4]
 8101e46:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8101e48:	f005 fe1e 	bl	8107a88 <__errno>
 8101e4c:	4603      	mov	r3, r0
 8101e4e:	2216      	movs	r2, #22
 8101e50:	601a      	str	r2, [r3, #0]
  return -1;
 8101e52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101e56:	4618      	mov	r0, r3
 8101e58:	3708      	adds	r7, #8
 8101e5a:	46bd      	mov	sp, r7
 8101e5c:	bd80      	pop	{r7, pc}

08101e5e <_exit>:

void _exit (int status)
{
 8101e5e:	b580      	push	{r7, lr}
 8101e60:	b082      	sub	sp, #8
 8101e62:	af00      	add	r7, sp, #0
 8101e64:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8101e66:	f04f 31ff 	mov.w	r1, #4294967295
 8101e6a:	6878      	ldr	r0, [r7, #4]
 8101e6c:	f7ff ffe7 	bl	8101e3e <_kill>
  while (1) {}    /* Make sure we hang here */
 8101e70:	e7fe      	b.n	8101e70 <_exit+0x12>

08101e72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101e72:	b580      	push	{r7, lr}
 8101e74:	b086      	sub	sp, #24
 8101e76:	af00      	add	r7, sp, #0
 8101e78:	60f8      	str	r0, [r7, #12]
 8101e7a:	60b9      	str	r1, [r7, #8]
 8101e7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  len = 1;
 8101e7e:	2301      	movs	r3, #1
 8101e80:	607b      	str	r3, [r7, #4]

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101e82:	2300      	movs	r3, #0
 8101e84:	617b      	str	r3, [r7, #20]
 8101e86:	e00a      	b.n	8101e9e <_read+0x2c>
  {
    *ptr++ = __io_getchar();
 8101e88:	f7ff fe7e 	bl	8101b88 <__io_getchar>
 8101e8c:	4601      	mov	r1, r0
 8101e8e:	68bb      	ldr	r3, [r7, #8]
 8101e90:	1c5a      	adds	r2, r3, #1
 8101e92:	60ba      	str	r2, [r7, #8]
 8101e94:	b2ca      	uxtb	r2, r1
 8101e96:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101e98:	697b      	ldr	r3, [r7, #20]
 8101e9a:	3301      	adds	r3, #1
 8101e9c:	617b      	str	r3, [r7, #20]
 8101e9e:	697a      	ldr	r2, [r7, #20]
 8101ea0:	687b      	ldr	r3, [r7, #4]
 8101ea2:	429a      	cmp	r2, r3
 8101ea4:	dbf0      	blt.n	8101e88 <_read+0x16>
  }

  return len;
 8101ea6:	687b      	ldr	r3, [r7, #4]
}
 8101ea8:	4618      	mov	r0, r3
 8101eaa:	3718      	adds	r7, #24
 8101eac:	46bd      	mov	sp, r7
 8101eae:	bd80      	pop	{r7, pc}

08101eb0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101eb0:	b580      	push	{r7, lr}
 8101eb2:	b086      	sub	sp, #24
 8101eb4:	af00      	add	r7, sp, #0
 8101eb6:	60f8      	str	r0, [r7, #12]
 8101eb8:	60b9      	str	r1, [r7, #8]
 8101eba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101ebc:	2300      	movs	r3, #0
 8101ebe:	617b      	str	r3, [r7, #20]
 8101ec0:	e009      	b.n	8101ed6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8101ec2:	68bb      	ldr	r3, [r7, #8]
 8101ec4:	1c5a      	adds	r2, r3, #1
 8101ec6:	60ba      	str	r2, [r7, #8]
 8101ec8:	781b      	ldrb	r3, [r3, #0]
 8101eca:	4618      	mov	r0, r3
 8101ecc:	f7ff fe4a 	bl	8101b64 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101ed0:	697b      	ldr	r3, [r7, #20]
 8101ed2:	3301      	adds	r3, #1
 8101ed4:	617b      	str	r3, [r7, #20]
 8101ed6:	697a      	ldr	r2, [r7, #20]
 8101ed8:	687b      	ldr	r3, [r7, #4]
 8101eda:	429a      	cmp	r2, r3
 8101edc:	dbf1      	blt.n	8101ec2 <_write+0x12>
  }
  return len;
 8101ede:	687b      	ldr	r3, [r7, #4]
}
 8101ee0:	4618      	mov	r0, r3
 8101ee2:	3718      	adds	r7, #24
 8101ee4:	46bd      	mov	sp, r7
 8101ee6:	bd80      	pop	{r7, pc}

08101ee8 <_close>:

int _close(int file)
{
 8101ee8:	b480      	push	{r7}
 8101eea:	b083      	sub	sp, #12
 8101eec:	af00      	add	r7, sp, #0
 8101eee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8101ef0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101ef4:	4618      	mov	r0, r3
 8101ef6:	370c      	adds	r7, #12
 8101ef8:	46bd      	mov	sp, r7
 8101efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101efe:	4770      	bx	lr

08101f00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101f00:	b480      	push	{r7}
 8101f02:	b083      	sub	sp, #12
 8101f04:	af00      	add	r7, sp, #0
 8101f06:	6078      	str	r0, [r7, #4]
 8101f08:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8101f0a:	683b      	ldr	r3, [r7, #0]
 8101f0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8101f10:	605a      	str	r2, [r3, #4]
  return 0;
 8101f12:	2300      	movs	r3, #0
}
 8101f14:	4618      	mov	r0, r3
 8101f16:	370c      	adds	r7, #12
 8101f18:	46bd      	mov	sp, r7
 8101f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f1e:	4770      	bx	lr

08101f20 <_isatty>:

int _isatty(int file)
{
 8101f20:	b480      	push	{r7}
 8101f22:	b083      	sub	sp, #12
 8101f24:	af00      	add	r7, sp, #0
 8101f26:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8101f28:	2301      	movs	r3, #1
}
 8101f2a:	4618      	mov	r0, r3
 8101f2c:	370c      	adds	r7, #12
 8101f2e:	46bd      	mov	sp, r7
 8101f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f34:	4770      	bx	lr

08101f36 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101f36:	b480      	push	{r7}
 8101f38:	b085      	sub	sp, #20
 8101f3a:	af00      	add	r7, sp, #0
 8101f3c:	60f8      	str	r0, [r7, #12]
 8101f3e:	60b9      	str	r1, [r7, #8]
 8101f40:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8101f42:	2300      	movs	r3, #0
}
 8101f44:	4618      	mov	r0, r3
 8101f46:	3714      	adds	r7, #20
 8101f48:	46bd      	mov	sp, r7
 8101f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f4e:	4770      	bx	lr

08101f50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101f50:	b580      	push	{r7, lr}
 8101f52:	b086      	sub	sp, #24
 8101f54:	af00      	add	r7, sp, #0
 8101f56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101f58:	4a14      	ldr	r2, [pc, #80]	; (8101fac <_sbrk+0x5c>)
 8101f5a:	4b15      	ldr	r3, [pc, #84]	; (8101fb0 <_sbrk+0x60>)
 8101f5c:	1ad3      	subs	r3, r2, r3
 8101f5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101f60:	697b      	ldr	r3, [r7, #20]
 8101f62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101f64:	4b13      	ldr	r3, [pc, #76]	; (8101fb4 <_sbrk+0x64>)
 8101f66:	681b      	ldr	r3, [r3, #0]
 8101f68:	2b00      	cmp	r3, #0
 8101f6a:	d102      	bne.n	8101f72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101f6c:	4b11      	ldr	r3, [pc, #68]	; (8101fb4 <_sbrk+0x64>)
 8101f6e:	4a12      	ldr	r2, [pc, #72]	; (8101fb8 <_sbrk+0x68>)
 8101f70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101f72:	4b10      	ldr	r3, [pc, #64]	; (8101fb4 <_sbrk+0x64>)
 8101f74:	681a      	ldr	r2, [r3, #0]
 8101f76:	687b      	ldr	r3, [r7, #4]
 8101f78:	4413      	add	r3, r2
 8101f7a:	693a      	ldr	r2, [r7, #16]
 8101f7c:	429a      	cmp	r2, r3
 8101f7e:	d207      	bcs.n	8101f90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101f80:	f005 fd82 	bl	8107a88 <__errno>
 8101f84:	4603      	mov	r3, r0
 8101f86:	220c      	movs	r2, #12
 8101f88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8101f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8101f8e:	e009      	b.n	8101fa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101f90:	4b08      	ldr	r3, [pc, #32]	; (8101fb4 <_sbrk+0x64>)
 8101f92:	681b      	ldr	r3, [r3, #0]
 8101f94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101f96:	4b07      	ldr	r3, [pc, #28]	; (8101fb4 <_sbrk+0x64>)
 8101f98:	681a      	ldr	r2, [r3, #0]
 8101f9a:	687b      	ldr	r3, [r7, #4]
 8101f9c:	4413      	add	r3, r2
 8101f9e:	4a05      	ldr	r2, [pc, #20]	; (8101fb4 <_sbrk+0x64>)
 8101fa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101fa2:	68fb      	ldr	r3, [r7, #12]
}
 8101fa4:	4618      	mov	r0, r3
 8101fa6:	3718      	adds	r7, #24
 8101fa8:	46bd      	mov	sp, r7
 8101faa:	bd80      	pop	{r7, pc}
 8101fac:	10048000 	.word	0x10048000
 8101fb0:	00000400 	.word	0x00000400
 8101fb4:	100002f0 	.word	0x100002f0
 8101fb8:	10000448 	.word	0x10000448

08101fbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101fbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101ff4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101fc0:	f7ff f89e 	bl	8101100 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101fc4:	480c      	ldr	r0, [pc, #48]	; (8101ff8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101fc6:	490d      	ldr	r1, [pc, #52]	; (8101ffc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101fc8:	4a0d      	ldr	r2, [pc, #52]	; (8102000 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101fcc:	e002      	b.n	8101fd4 <LoopCopyDataInit>

08101fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101fd2:	3304      	adds	r3, #4

08101fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101fd8:	d3f9      	bcc.n	8101fce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101fda:	4a0a      	ldr	r2, [pc, #40]	; (8102004 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101fdc:	4c0a      	ldr	r4, [pc, #40]	; (8102008 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101fe0:	e001      	b.n	8101fe6 <LoopFillZerobss>

08101fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101fe4:	3204      	adds	r2, #4

08101fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101fe8:	d3fb      	bcc.n	8101fe2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101fea:	f005 fd53 	bl	8107a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101fee:	f7ff fc25 	bl	810183c <main>
  bx  lr
 8101ff2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101ff4:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101ff8:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101ffc:	100001e8 	.word	0x100001e8
  ldr r2, =_sidata
 8102000:	0810bb90 	.word	0x0810bb90
  ldr r2, =_sbss
 8102004:	100001e8 	.word	0x100001e8
  ldr r4, =_ebss
 8102008:	10000444 	.word	0x10000444

0810200c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 810200c:	e7fe      	b.n	810200c <ADC3_IRQHandler>
	...

08102010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8102010:	b580      	push	{r7, lr}
 8102012:	b082      	sub	sp, #8
 8102014:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102016:	4b28      	ldr	r3, [pc, #160]	; (81020b8 <HAL_Init+0xa8>)
 8102018:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810201c:	4a26      	ldr	r2, [pc, #152]	; (81020b8 <HAL_Init+0xa8>)
 810201e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8102022:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8102026:	4b24      	ldr	r3, [pc, #144]	; (81020b8 <HAL_Init+0xa8>)
 8102028:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810202c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102030:	603b      	str	r3, [r7, #0]
 8102032:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102034:	4b21      	ldr	r3, [pc, #132]	; (81020bc <HAL_Init+0xac>)
 8102036:	681b      	ldr	r3, [r3, #0]
 8102038:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 810203c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102040:	4a1e      	ldr	r2, [pc, #120]	; (81020bc <HAL_Init+0xac>)
 8102042:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8102046:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102048:	4b1c      	ldr	r3, [pc, #112]	; (81020bc <HAL_Init+0xac>)
 810204a:	681b      	ldr	r3, [r3, #0]
 810204c:	4a1b      	ldr	r2, [pc, #108]	; (81020bc <HAL_Init+0xac>)
 810204e:	f043 0301 	orr.w	r3, r3, #1
 8102052:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102054:	2003      	movs	r0, #3
 8102056:	f000 f983 	bl	8102360 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810205a:	f001 f9f7 	bl	810344c <HAL_RCC_GetSysClockFreq>
 810205e:	4602      	mov	r2, r0
 8102060:	4b15      	ldr	r3, [pc, #84]	; (81020b8 <HAL_Init+0xa8>)
 8102062:	699b      	ldr	r3, [r3, #24]
 8102064:	0a1b      	lsrs	r3, r3, #8
 8102066:	f003 030f 	and.w	r3, r3, #15
 810206a:	4915      	ldr	r1, [pc, #84]	; (81020c0 <HAL_Init+0xb0>)
 810206c:	5ccb      	ldrb	r3, [r1, r3]
 810206e:	f003 031f 	and.w	r3, r3, #31
 8102072:	fa22 f303 	lsr.w	r3, r2, r3
 8102076:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102078:	4b0f      	ldr	r3, [pc, #60]	; (81020b8 <HAL_Init+0xa8>)
 810207a:	699b      	ldr	r3, [r3, #24]
 810207c:	f003 030f 	and.w	r3, r3, #15
 8102080:	4a0f      	ldr	r2, [pc, #60]	; (81020c0 <HAL_Init+0xb0>)
 8102082:	5cd3      	ldrb	r3, [r2, r3]
 8102084:	f003 031f 	and.w	r3, r3, #31
 8102088:	687a      	ldr	r2, [r7, #4]
 810208a:	fa22 f303 	lsr.w	r3, r2, r3
 810208e:	4a0d      	ldr	r2, [pc, #52]	; (81020c4 <HAL_Init+0xb4>)
 8102090:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102092:	4b0c      	ldr	r3, [pc, #48]	; (81020c4 <HAL_Init+0xb4>)
 8102094:	681b      	ldr	r3, [r3, #0]
 8102096:	4a0c      	ldr	r2, [pc, #48]	; (81020c8 <HAL_Init+0xb8>)
 8102098:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810209a:	2000      	movs	r0, #0
 810209c:	f000 f816 	bl	81020cc <HAL_InitTick>
 81020a0:	4603      	mov	r3, r0
 81020a2:	2b00      	cmp	r3, #0
 81020a4:	d001      	beq.n	81020aa <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81020a6:	2301      	movs	r3, #1
 81020a8:	e002      	b.n	81020b0 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81020aa:	f7ff fda3 	bl	8101bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81020ae:	2300      	movs	r3, #0
}
 81020b0:	4618      	mov	r0, r3
 81020b2:	3708      	adds	r7, #8
 81020b4:	46bd      	mov	sp, r7
 81020b6:	bd80      	pop	{r7, pc}
 81020b8:	58024400 	.word	0x58024400
 81020bc:	40024400 	.word	0x40024400
 81020c0:	0810b71c 	.word	0x0810b71c
 81020c4:	10000004 	.word	0x10000004
 81020c8:	10000000 	.word	0x10000000

081020cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81020cc:	b580      	push	{r7, lr}
 81020ce:	b082      	sub	sp, #8
 81020d0:	af00      	add	r7, sp, #0
 81020d2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81020d4:	4b15      	ldr	r3, [pc, #84]	; (810212c <HAL_InitTick+0x60>)
 81020d6:	781b      	ldrb	r3, [r3, #0]
 81020d8:	2b00      	cmp	r3, #0
 81020da:	d101      	bne.n	81020e0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81020dc:	2301      	movs	r3, #1
 81020de:	e021      	b.n	8102124 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81020e0:	4b13      	ldr	r3, [pc, #76]	; (8102130 <HAL_InitTick+0x64>)
 81020e2:	681a      	ldr	r2, [r3, #0]
 81020e4:	4b11      	ldr	r3, [pc, #68]	; (810212c <HAL_InitTick+0x60>)
 81020e6:	781b      	ldrb	r3, [r3, #0]
 81020e8:	4619      	mov	r1, r3
 81020ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81020ee:	fbb3 f3f1 	udiv	r3, r3, r1
 81020f2:	fbb2 f3f3 	udiv	r3, r2, r3
 81020f6:	4618      	mov	r0, r3
 81020f8:	f000 f965 	bl	81023c6 <HAL_SYSTICK_Config>
 81020fc:	4603      	mov	r3, r0
 81020fe:	2b00      	cmp	r3, #0
 8102100:	d001      	beq.n	8102106 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8102102:	2301      	movs	r3, #1
 8102104:	e00e      	b.n	8102124 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8102106:	687b      	ldr	r3, [r7, #4]
 8102108:	2b0f      	cmp	r3, #15
 810210a:	d80a      	bhi.n	8102122 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 810210c:	2200      	movs	r2, #0
 810210e:	6879      	ldr	r1, [r7, #4]
 8102110:	f04f 30ff 	mov.w	r0, #4294967295
 8102114:	f000 f92f 	bl	8102376 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8102118:	4a06      	ldr	r2, [pc, #24]	; (8102134 <HAL_InitTick+0x68>)
 810211a:	687b      	ldr	r3, [r7, #4]
 810211c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810211e:	2300      	movs	r3, #0
 8102120:	e000      	b.n	8102124 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8102122:	2301      	movs	r3, #1
}
 8102124:	4618      	mov	r0, r3
 8102126:	3708      	adds	r7, #8
 8102128:	46bd      	mov	sp, r7
 810212a:	bd80      	pop	{r7, pc}
 810212c:	1000001c 	.word	0x1000001c
 8102130:	10000000 	.word	0x10000000
 8102134:	10000018 	.word	0x10000018

08102138 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102138:	b480      	push	{r7}
 810213a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 810213c:	4b06      	ldr	r3, [pc, #24]	; (8102158 <HAL_IncTick+0x20>)
 810213e:	781b      	ldrb	r3, [r3, #0]
 8102140:	461a      	mov	r2, r3
 8102142:	4b06      	ldr	r3, [pc, #24]	; (810215c <HAL_IncTick+0x24>)
 8102144:	681b      	ldr	r3, [r3, #0]
 8102146:	4413      	add	r3, r2
 8102148:	4a04      	ldr	r2, [pc, #16]	; (810215c <HAL_IncTick+0x24>)
 810214a:	6013      	str	r3, [r2, #0]
}
 810214c:	bf00      	nop
 810214e:	46bd      	mov	sp, r7
 8102150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102154:	4770      	bx	lr
 8102156:	bf00      	nop
 8102158:	1000001c 	.word	0x1000001c
 810215c:	100002f4 	.word	0x100002f4

08102160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8102160:	b480      	push	{r7}
 8102162:	af00      	add	r7, sp, #0
  return uwTick;
 8102164:	4b03      	ldr	r3, [pc, #12]	; (8102174 <HAL_GetTick+0x14>)
 8102166:	681b      	ldr	r3, [r3, #0]
}
 8102168:	4618      	mov	r0, r3
 810216a:	46bd      	mov	sp, r7
 810216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102170:	4770      	bx	lr
 8102172:	bf00      	nop
 8102174:	100002f4 	.word	0x100002f4

08102178 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8102178:	b580      	push	{r7, lr}
 810217a:	b084      	sub	sp, #16
 810217c:	af00      	add	r7, sp, #0
 810217e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8102180:	f7ff ffee 	bl	8102160 <HAL_GetTick>
 8102184:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8102186:	687b      	ldr	r3, [r7, #4]
 8102188:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 810218a:	68fb      	ldr	r3, [r7, #12]
 810218c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102190:	d005      	beq.n	810219e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8102192:	4b0a      	ldr	r3, [pc, #40]	; (81021bc <HAL_Delay+0x44>)
 8102194:	781b      	ldrb	r3, [r3, #0]
 8102196:	461a      	mov	r2, r3
 8102198:	68fb      	ldr	r3, [r7, #12]
 810219a:	4413      	add	r3, r2
 810219c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810219e:	bf00      	nop
 81021a0:	f7ff ffde 	bl	8102160 <HAL_GetTick>
 81021a4:	4602      	mov	r2, r0
 81021a6:	68bb      	ldr	r3, [r7, #8]
 81021a8:	1ad3      	subs	r3, r2, r3
 81021aa:	68fa      	ldr	r2, [r7, #12]
 81021ac:	429a      	cmp	r2, r3
 81021ae:	d8f7      	bhi.n	81021a0 <HAL_Delay+0x28>
  {
  }
}
 81021b0:	bf00      	nop
 81021b2:	bf00      	nop
 81021b4:	3710      	adds	r7, #16
 81021b6:	46bd      	mov	sp, r7
 81021b8:	bd80      	pop	{r7, pc}
 81021ba:	bf00      	nop
 81021bc:	1000001c 	.word	0x1000001c

081021c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81021c0:	b480      	push	{r7}
 81021c2:	b085      	sub	sp, #20
 81021c4:	af00      	add	r7, sp, #0
 81021c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81021c8:	687b      	ldr	r3, [r7, #4]
 81021ca:	f003 0307 	and.w	r3, r3, #7
 81021ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81021d0:	4b0c      	ldr	r3, [pc, #48]	; (8102204 <__NVIC_SetPriorityGrouping+0x44>)
 81021d2:	68db      	ldr	r3, [r3, #12]
 81021d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81021d6:	68ba      	ldr	r2, [r7, #8]
 81021d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81021dc:	4013      	ands	r3, r2
 81021de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81021e0:	68fb      	ldr	r3, [r7, #12]
 81021e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81021e4:	68bb      	ldr	r3, [r7, #8]
 81021e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81021e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81021ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81021f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81021f2:	4a04      	ldr	r2, [pc, #16]	; (8102204 <__NVIC_SetPriorityGrouping+0x44>)
 81021f4:	68bb      	ldr	r3, [r7, #8]
 81021f6:	60d3      	str	r3, [r2, #12]
}
 81021f8:	bf00      	nop
 81021fa:	3714      	adds	r7, #20
 81021fc:	46bd      	mov	sp, r7
 81021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102202:	4770      	bx	lr
 8102204:	e000ed00 	.word	0xe000ed00

08102208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8102208:	b480      	push	{r7}
 810220a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810220c:	4b04      	ldr	r3, [pc, #16]	; (8102220 <__NVIC_GetPriorityGrouping+0x18>)
 810220e:	68db      	ldr	r3, [r3, #12]
 8102210:	0a1b      	lsrs	r3, r3, #8
 8102212:	f003 0307 	and.w	r3, r3, #7
}
 8102216:	4618      	mov	r0, r3
 8102218:	46bd      	mov	sp, r7
 810221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810221e:	4770      	bx	lr
 8102220:	e000ed00 	.word	0xe000ed00

08102224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102224:	b480      	push	{r7}
 8102226:	b083      	sub	sp, #12
 8102228:	af00      	add	r7, sp, #0
 810222a:	4603      	mov	r3, r0
 810222c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810222e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102232:	2b00      	cmp	r3, #0
 8102234:	db0b      	blt.n	810224e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8102236:	88fb      	ldrh	r3, [r7, #6]
 8102238:	f003 021f 	and.w	r2, r3, #31
 810223c:	4907      	ldr	r1, [pc, #28]	; (810225c <__NVIC_EnableIRQ+0x38>)
 810223e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102242:	095b      	lsrs	r3, r3, #5
 8102244:	2001      	movs	r0, #1
 8102246:	fa00 f202 	lsl.w	r2, r0, r2
 810224a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 810224e:	bf00      	nop
 8102250:	370c      	adds	r7, #12
 8102252:	46bd      	mov	sp, r7
 8102254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102258:	4770      	bx	lr
 810225a:	bf00      	nop
 810225c:	e000e100 	.word	0xe000e100

08102260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8102260:	b480      	push	{r7}
 8102262:	b083      	sub	sp, #12
 8102264:	af00      	add	r7, sp, #0
 8102266:	4603      	mov	r3, r0
 8102268:	6039      	str	r1, [r7, #0]
 810226a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810226c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102270:	2b00      	cmp	r3, #0
 8102272:	db0a      	blt.n	810228a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102274:	683b      	ldr	r3, [r7, #0]
 8102276:	b2da      	uxtb	r2, r3
 8102278:	490c      	ldr	r1, [pc, #48]	; (81022ac <__NVIC_SetPriority+0x4c>)
 810227a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810227e:	0112      	lsls	r2, r2, #4
 8102280:	b2d2      	uxtb	r2, r2
 8102282:	440b      	add	r3, r1
 8102284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8102288:	e00a      	b.n	81022a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810228a:	683b      	ldr	r3, [r7, #0]
 810228c:	b2da      	uxtb	r2, r3
 810228e:	4908      	ldr	r1, [pc, #32]	; (81022b0 <__NVIC_SetPriority+0x50>)
 8102290:	88fb      	ldrh	r3, [r7, #6]
 8102292:	f003 030f 	and.w	r3, r3, #15
 8102296:	3b04      	subs	r3, #4
 8102298:	0112      	lsls	r2, r2, #4
 810229a:	b2d2      	uxtb	r2, r2
 810229c:	440b      	add	r3, r1
 810229e:	761a      	strb	r2, [r3, #24]
}
 81022a0:	bf00      	nop
 81022a2:	370c      	adds	r7, #12
 81022a4:	46bd      	mov	sp, r7
 81022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022aa:	4770      	bx	lr
 81022ac:	e000e100 	.word	0xe000e100
 81022b0:	e000ed00 	.word	0xe000ed00

081022b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81022b4:	b480      	push	{r7}
 81022b6:	b089      	sub	sp, #36	; 0x24
 81022b8:	af00      	add	r7, sp, #0
 81022ba:	60f8      	str	r0, [r7, #12]
 81022bc:	60b9      	str	r1, [r7, #8]
 81022be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81022c0:	68fb      	ldr	r3, [r7, #12]
 81022c2:	f003 0307 	and.w	r3, r3, #7
 81022c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81022c8:	69fb      	ldr	r3, [r7, #28]
 81022ca:	f1c3 0307 	rsb	r3, r3, #7
 81022ce:	2b04      	cmp	r3, #4
 81022d0:	bf28      	it	cs
 81022d2:	2304      	movcs	r3, #4
 81022d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81022d6:	69fb      	ldr	r3, [r7, #28]
 81022d8:	3304      	adds	r3, #4
 81022da:	2b06      	cmp	r3, #6
 81022dc:	d902      	bls.n	81022e4 <NVIC_EncodePriority+0x30>
 81022de:	69fb      	ldr	r3, [r7, #28]
 81022e0:	3b03      	subs	r3, #3
 81022e2:	e000      	b.n	81022e6 <NVIC_EncodePriority+0x32>
 81022e4:	2300      	movs	r3, #0
 81022e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81022e8:	f04f 32ff 	mov.w	r2, #4294967295
 81022ec:	69bb      	ldr	r3, [r7, #24]
 81022ee:	fa02 f303 	lsl.w	r3, r2, r3
 81022f2:	43da      	mvns	r2, r3
 81022f4:	68bb      	ldr	r3, [r7, #8]
 81022f6:	401a      	ands	r2, r3
 81022f8:	697b      	ldr	r3, [r7, #20]
 81022fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81022fc:	f04f 31ff 	mov.w	r1, #4294967295
 8102300:	697b      	ldr	r3, [r7, #20]
 8102302:	fa01 f303 	lsl.w	r3, r1, r3
 8102306:	43d9      	mvns	r1, r3
 8102308:	687b      	ldr	r3, [r7, #4]
 810230a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810230c:	4313      	orrs	r3, r2
         );
}
 810230e:	4618      	mov	r0, r3
 8102310:	3724      	adds	r7, #36	; 0x24
 8102312:	46bd      	mov	sp, r7
 8102314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102318:	4770      	bx	lr
	...

0810231c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 810231c:	b580      	push	{r7, lr}
 810231e:	b082      	sub	sp, #8
 8102320:	af00      	add	r7, sp, #0
 8102322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8102324:	687b      	ldr	r3, [r7, #4]
 8102326:	3b01      	subs	r3, #1
 8102328:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810232c:	d301      	bcc.n	8102332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 810232e:	2301      	movs	r3, #1
 8102330:	e00f      	b.n	8102352 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8102332:	4a0a      	ldr	r2, [pc, #40]	; (810235c <SysTick_Config+0x40>)
 8102334:	687b      	ldr	r3, [r7, #4]
 8102336:	3b01      	subs	r3, #1
 8102338:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 810233a:	210f      	movs	r1, #15
 810233c:	f04f 30ff 	mov.w	r0, #4294967295
 8102340:	f7ff ff8e 	bl	8102260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8102344:	4b05      	ldr	r3, [pc, #20]	; (810235c <SysTick_Config+0x40>)
 8102346:	2200      	movs	r2, #0
 8102348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810234a:	4b04      	ldr	r3, [pc, #16]	; (810235c <SysTick_Config+0x40>)
 810234c:	2207      	movs	r2, #7
 810234e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8102350:	2300      	movs	r3, #0
}
 8102352:	4618      	mov	r0, r3
 8102354:	3708      	adds	r7, #8
 8102356:	46bd      	mov	sp, r7
 8102358:	bd80      	pop	{r7, pc}
 810235a:	bf00      	nop
 810235c:	e000e010 	.word	0xe000e010

08102360 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102360:	b580      	push	{r7, lr}
 8102362:	b082      	sub	sp, #8
 8102364:	af00      	add	r7, sp, #0
 8102366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102368:	6878      	ldr	r0, [r7, #4]
 810236a:	f7ff ff29 	bl	81021c0 <__NVIC_SetPriorityGrouping>
}
 810236e:	bf00      	nop
 8102370:	3708      	adds	r7, #8
 8102372:	46bd      	mov	sp, r7
 8102374:	bd80      	pop	{r7, pc}

08102376 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102376:	b580      	push	{r7, lr}
 8102378:	b086      	sub	sp, #24
 810237a:	af00      	add	r7, sp, #0
 810237c:	4603      	mov	r3, r0
 810237e:	60b9      	str	r1, [r7, #8]
 8102380:	607a      	str	r2, [r7, #4]
 8102382:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8102384:	f7ff ff40 	bl	8102208 <__NVIC_GetPriorityGrouping>
 8102388:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810238a:	687a      	ldr	r2, [r7, #4]
 810238c:	68b9      	ldr	r1, [r7, #8]
 810238e:	6978      	ldr	r0, [r7, #20]
 8102390:	f7ff ff90 	bl	81022b4 <NVIC_EncodePriority>
 8102394:	4602      	mov	r2, r0
 8102396:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810239a:	4611      	mov	r1, r2
 810239c:	4618      	mov	r0, r3
 810239e:	f7ff ff5f 	bl	8102260 <__NVIC_SetPriority>
}
 81023a2:	bf00      	nop
 81023a4:	3718      	adds	r7, #24
 81023a6:	46bd      	mov	sp, r7
 81023a8:	bd80      	pop	{r7, pc}

081023aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81023aa:	b580      	push	{r7, lr}
 81023ac:	b082      	sub	sp, #8
 81023ae:	af00      	add	r7, sp, #0
 81023b0:	4603      	mov	r3, r0
 81023b2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81023b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81023b8:	4618      	mov	r0, r3
 81023ba:	f7ff ff33 	bl	8102224 <__NVIC_EnableIRQ>
}
 81023be:	bf00      	nop
 81023c0:	3708      	adds	r7, #8
 81023c2:	46bd      	mov	sp, r7
 81023c4:	bd80      	pop	{r7, pc}

081023c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81023c6:	b580      	push	{r7, lr}
 81023c8:	b082      	sub	sp, #8
 81023ca:	af00      	add	r7, sp, #0
 81023cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81023ce:	6878      	ldr	r0, [r7, #4]
 81023d0:	f7ff ffa4 	bl	810231c <SysTick_Config>
 81023d4:	4603      	mov	r3, r0
}
 81023d6:	4618      	mov	r0, r3
 81023d8:	3708      	adds	r7, #8
 81023da:	46bd      	mov	sp, r7
 81023dc:	bd80      	pop	{r7, pc}
	...

081023e0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81023e0:	b480      	push	{r7}
 81023e2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81023e4:	4b07      	ldr	r3, [pc, #28]	; (8102404 <HAL_GetCurrentCPUID+0x24>)
 81023e6:	681b      	ldr	r3, [r3, #0]
 81023e8:	091b      	lsrs	r3, r3, #4
 81023ea:	f003 030f 	and.w	r3, r3, #15
 81023ee:	2b07      	cmp	r3, #7
 81023f0:	d101      	bne.n	81023f6 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81023f2:	2303      	movs	r3, #3
 81023f4:	e000      	b.n	81023f8 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81023f6:	2301      	movs	r3, #1
  }
}
 81023f8:	4618      	mov	r0, r3
 81023fa:	46bd      	mov	sp, r7
 81023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102400:	4770      	bx	lr
 8102402:	bf00      	nop
 8102404:	e000ed00 	.word	0xe000ed00

08102408 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8102408:	b480      	push	{r7}
 810240a:	b089      	sub	sp, #36	; 0x24
 810240c:	af00      	add	r7, sp, #0
 810240e:	6078      	str	r0, [r7, #4]
 8102410:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8102412:	2300      	movs	r3, #0
 8102414:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8102416:	4b89      	ldr	r3, [pc, #548]	; (810263c <HAL_GPIO_Init+0x234>)
 8102418:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810241a:	e194      	b.n	8102746 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 810241c:	683b      	ldr	r3, [r7, #0]
 810241e:	681a      	ldr	r2, [r3, #0]
 8102420:	2101      	movs	r1, #1
 8102422:	69fb      	ldr	r3, [r7, #28]
 8102424:	fa01 f303 	lsl.w	r3, r1, r3
 8102428:	4013      	ands	r3, r2
 810242a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 810242c:	693b      	ldr	r3, [r7, #16]
 810242e:	2b00      	cmp	r3, #0
 8102430:	f000 8186 	beq.w	8102740 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8102434:	683b      	ldr	r3, [r7, #0]
 8102436:	685b      	ldr	r3, [r3, #4]
 8102438:	f003 0303 	and.w	r3, r3, #3
 810243c:	2b01      	cmp	r3, #1
 810243e:	d005      	beq.n	810244c <HAL_GPIO_Init+0x44>
 8102440:	683b      	ldr	r3, [r7, #0]
 8102442:	685b      	ldr	r3, [r3, #4]
 8102444:	f003 0303 	and.w	r3, r3, #3
 8102448:	2b02      	cmp	r3, #2
 810244a:	d130      	bne.n	81024ae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 810244c:	687b      	ldr	r3, [r7, #4]
 810244e:	689b      	ldr	r3, [r3, #8]
 8102450:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8102452:	69fb      	ldr	r3, [r7, #28]
 8102454:	005b      	lsls	r3, r3, #1
 8102456:	2203      	movs	r2, #3
 8102458:	fa02 f303 	lsl.w	r3, r2, r3
 810245c:	43db      	mvns	r3, r3
 810245e:	69ba      	ldr	r2, [r7, #24]
 8102460:	4013      	ands	r3, r2
 8102462:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8102464:	683b      	ldr	r3, [r7, #0]
 8102466:	68da      	ldr	r2, [r3, #12]
 8102468:	69fb      	ldr	r3, [r7, #28]
 810246a:	005b      	lsls	r3, r3, #1
 810246c:	fa02 f303 	lsl.w	r3, r2, r3
 8102470:	69ba      	ldr	r2, [r7, #24]
 8102472:	4313      	orrs	r3, r2
 8102474:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8102476:	687b      	ldr	r3, [r7, #4]
 8102478:	69ba      	ldr	r2, [r7, #24]
 810247a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 810247c:	687b      	ldr	r3, [r7, #4]
 810247e:	685b      	ldr	r3, [r3, #4]
 8102480:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8102482:	2201      	movs	r2, #1
 8102484:	69fb      	ldr	r3, [r7, #28]
 8102486:	fa02 f303 	lsl.w	r3, r2, r3
 810248a:	43db      	mvns	r3, r3
 810248c:	69ba      	ldr	r2, [r7, #24]
 810248e:	4013      	ands	r3, r2
 8102490:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8102492:	683b      	ldr	r3, [r7, #0]
 8102494:	685b      	ldr	r3, [r3, #4]
 8102496:	091b      	lsrs	r3, r3, #4
 8102498:	f003 0201 	and.w	r2, r3, #1
 810249c:	69fb      	ldr	r3, [r7, #28]
 810249e:	fa02 f303 	lsl.w	r3, r2, r3
 81024a2:	69ba      	ldr	r2, [r7, #24]
 81024a4:	4313      	orrs	r3, r2
 81024a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81024a8:	687b      	ldr	r3, [r7, #4]
 81024aa:	69ba      	ldr	r2, [r7, #24]
 81024ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81024ae:	683b      	ldr	r3, [r7, #0]
 81024b0:	685b      	ldr	r3, [r3, #4]
 81024b2:	f003 0303 	and.w	r3, r3, #3
 81024b6:	2b03      	cmp	r3, #3
 81024b8:	d017      	beq.n	81024ea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81024ba:	687b      	ldr	r3, [r7, #4]
 81024bc:	68db      	ldr	r3, [r3, #12]
 81024be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81024c0:	69fb      	ldr	r3, [r7, #28]
 81024c2:	005b      	lsls	r3, r3, #1
 81024c4:	2203      	movs	r2, #3
 81024c6:	fa02 f303 	lsl.w	r3, r2, r3
 81024ca:	43db      	mvns	r3, r3
 81024cc:	69ba      	ldr	r2, [r7, #24]
 81024ce:	4013      	ands	r3, r2
 81024d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81024d2:	683b      	ldr	r3, [r7, #0]
 81024d4:	689a      	ldr	r2, [r3, #8]
 81024d6:	69fb      	ldr	r3, [r7, #28]
 81024d8:	005b      	lsls	r3, r3, #1
 81024da:	fa02 f303 	lsl.w	r3, r2, r3
 81024de:	69ba      	ldr	r2, [r7, #24]
 81024e0:	4313      	orrs	r3, r2
 81024e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81024e4:	687b      	ldr	r3, [r7, #4]
 81024e6:	69ba      	ldr	r2, [r7, #24]
 81024e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81024ea:	683b      	ldr	r3, [r7, #0]
 81024ec:	685b      	ldr	r3, [r3, #4]
 81024ee:	f003 0303 	and.w	r3, r3, #3
 81024f2:	2b02      	cmp	r3, #2
 81024f4:	d123      	bne.n	810253e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81024f6:	69fb      	ldr	r3, [r7, #28]
 81024f8:	08da      	lsrs	r2, r3, #3
 81024fa:	687b      	ldr	r3, [r7, #4]
 81024fc:	3208      	adds	r2, #8
 81024fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102502:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8102504:	69fb      	ldr	r3, [r7, #28]
 8102506:	f003 0307 	and.w	r3, r3, #7
 810250a:	009b      	lsls	r3, r3, #2
 810250c:	220f      	movs	r2, #15
 810250e:	fa02 f303 	lsl.w	r3, r2, r3
 8102512:	43db      	mvns	r3, r3
 8102514:	69ba      	ldr	r2, [r7, #24]
 8102516:	4013      	ands	r3, r2
 8102518:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810251a:	683b      	ldr	r3, [r7, #0]
 810251c:	691a      	ldr	r2, [r3, #16]
 810251e:	69fb      	ldr	r3, [r7, #28]
 8102520:	f003 0307 	and.w	r3, r3, #7
 8102524:	009b      	lsls	r3, r3, #2
 8102526:	fa02 f303 	lsl.w	r3, r2, r3
 810252a:	69ba      	ldr	r2, [r7, #24]
 810252c:	4313      	orrs	r3, r2
 810252e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8102530:	69fb      	ldr	r3, [r7, #28]
 8102532:	08da      	lsrs	r2, r3, #3
 8102534:	687b      	ldr	r3, [r7, #4]
 8102536:	3208      	adds	r2, #8
 8102538:	69b9      	ldr	r1, [r7, #24]
 810253a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810253e:	687b      	ldr	r3, [r7, #4]
 8102540:	681b      	ldr	r3, [r3, #0]
 8102542:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8102544:	69fb      	ldr	r3, [r7, #28]
 8102546:	005b      	lsls	r3, r3, #1
 8102548:	2203      	movs	r2, #3
 810254a:	fa02 f303 	lsl.w	r3, r2, r3
 810254e:	43db      	mvns	r3, r3
 8102550:	69ba      	ldr	r2, [r7, #24]
 8102552:	4013      	ands	r3, r2
 8102554:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8102556:	683b      	ldr	r3, [r7, #0]
 8102558:	685b      	ldr	r3, [r3, #4]
 810255a:	f003 0203 	and.w	r2, r3, #3
 810255e:	69fb      	ldr	r3, [r7, #28]
 8102560:	005b      	lsls	r3, r3, #1
 8102562:	fa02 f303 	lsl.w	r3, r2, r3
 8102566:	69ba      	ldr	r2, [r7, #24]
 8102568:	4313      	orrs	r3, r2
 810256a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 810256c:	687b      	ldr	r3, [r7, #4]
 810256e:	69ba      	ldr	r2, [r7, #24]
 8102570:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8102572:	683b      	ldr	r3, [r7, #0]
 8102574:	685b      	ldr	r3, [r3, #4]
 8102576:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 810257a:	2b00      	cmp	r3, #0
 810257c:	f000 80e0 	beq.w	8102740 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102580:	4b2f      	ldr	r3, [pc, #188]	; (8102640 <HAL_GPIO_Init+0x238>)
 8102582:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102586:	4a2e      	ldr	r2, [pc, #184]	; (8102640 <HAL_GPIO_Init+0x238>)
 8102588:	f043 0302 	orr.w	r3, r3, #2
 810258c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8102590:	4b2b      	ldr	r3, [pc, #172]	; (8102640 <HAL_GPIO_Init+0x238>)
 8102592:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102596:	f003 0302 	and.w	r3, r3, #2
 810259a:	60fb      	str	r3, [r7, #12]
 810259c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810259e:	4a29      	ldr	r2, [pc, #164]	; (8102644 <HAL_GPIO_Init+0x23c>)
 81025a0:	69fb      	ldr	r3, [r7, #28]
 81025a2:	089b      	lsrs	r3, r3, #2
 81025a4:	3302      	adds	r3, #2
 81025a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81025aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81025ac:	69fb      	ldr	r3, [r7, #28]
 81025ae:	f003 0303 	and.w	r3, r3, #3
 81025b2:	009b      	lsls	r3, r3, #2
 81025b4:	220f      	movs	r2, #15
 81025b6:	fa02 f303 	lsl.w	r3, r2, r3
 81025ba:	43db      	mvns	r3, r3
 81025bc:	69ba      	ldr	r2, [r7, #24]
 81025be:	4013      	ands	r3, r2
 81025c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81025c2:	687b      	ldr	r3, [r7, #4]
 81025c4:	4a20      	ldr	r2, [pc, #128]	; (8102648 <HAL_GPIO_Init+0x240>)
 81025c6:	4293      	cmp	r3, r2
 81025c8:	d052      	beq.n	8102670 <HAL_GPIO_Init+0x268>
 81025ca:	687b      	ldr	r3, [r7, #4]
 81025cc:	4a1f      	ldr	r2, [pc, #124]	; (810264c <HAL_GPIO_Init+0x244>)
 81025ce:	4293      	cmp	r3, r2
 81025d0:	d031      	beq.n	8102636 <HAL_GPIO_Init+0x22e>
 81025d2:	687b      	ldr	r3, [r7, #4]
 81025d4:	4a1e      	ldr	r2, [pc, #120]	; (8102650 <HAL_GPIO_Init+0x248>)
 81025d6:	4293      	cmp	r3, r2
 81025d8:	d02b      	beq.n	8102632 <HAL_GPIO_Init+0x22a>
 81025da:	687b      	ldr	r3, [r7, #4]
 81025dc:	4a1d      	ldr	r2, [pc, #116]	; (8102654 <HAL_GPIO_Init+0x24c>)
 81025de:	4293      	cmp	r3, r2
 81025e0:	d025      	beq.n	810262e <HAL_GPIO_Init+0x226>
 81025e2:	687b      	ldr	r3, [r7, #4]
 81025e4:	4a1c      	ldr	r2, [pc, #112]	; (8102658 <HAL_GPIO_Init+0x250>)
 81025e6:	4293      	cmp	r3, r2
 81025e8:	d01f      	beq.n	810262a <HAL_GPIO_Init+0x222>
 81025ea:	687b      	ldr	r3, [r7, #4]
 81025ec:	4a1b      	ldr	r2, [pc, #108]	; (810265c <HAL_GPIO_Init+0x254>)
 81025ee:	4293      	cmp	r3, r2
 81025f0:	d019      	beq.n	8102626 <HAL_GPIO_Init+0x21e>
 81025f2:	687b      	ldr	r3, [r7, #4]
 81025f4:	4a1a      	ldr	r2, [pc, #104]	; (8102660 <HAL_GPIO_Init+0x258>)
 81025f6:	4293      	cmp	r3, r2
 81025f8:	d013      	beq.n	8102622 <HAL_GPIO_Init+0x21a>
 81025fa:	687b      	ldr	r3, [r7, #4]
 81025fc:	4a19      	ldr	r2, [pc, #100]	; (8102664 <HAL_GPIO_Init+0x25c>)
 81025fe:	4293      	cmp	r3, r2
 8102600:	d00d      	beq.n	810261e <HAL_GPIO_Init+0x216>
 8102602:	687b      	ldr	r3, [r7, #4]
 8102604:	4a18      	ldr	r2, [pc, #96]	; (8102668 <HAL_GPIO_Init+0x260>)
 8102606:	4293      	cmp	r3, r2
 8102608:	d007      	beq.n	810261a <HAL_GPIO_Init+0x212>
 810260a:	687b      	ldr	r3, [r7, #4]
 810260c:	4a17      	ldr	r2, [pc, #92]	; (810266c <HAL_GPIO_Init+0x264>)
 810260e:	4293      	cmp	r3, r2
 8102610:	d101      	bne.n	8102616 <HAL_GPIO_Init+0x20e>
 8102612:	2309      	movs	r3, #9
 8102614:	e02d      	b.n	8102672 <HAL_GPIO_Init+0x26a>
 8102616:	230a      	movs	r3, #10
 8102618:	e02b      	b.n	8102672 <HAL_GPIO_Init+0x26a>
 810261a:	2308      	movs	r3, #8
 810261c:	e029      	b.n	8102672 <HAL_GPIO_Init+0x26a>
 810261e:	2307      	movs	r3, #7
 8102620:	e027      	b.n	8102672 <HAL_GPIO_Init+0x26a>
 8102622:	2306      	movs	r3, #6
 8102624:	e025      	b.n	8102672 <HAL_GPIO_Init+0x26a>
 8102626:	2305      	movs	r3, #5
 8102628:	e023      	b.n	8102672 <HAL_GPIO_Init+0x26a>
 810262a:	2304      	movs	r3, #4
 810262c:	e021      	b.n	8102672 <HAL_GPIO_Init+0x26a>
 810262e:	2303      	movs	r3, #3
 8102630:	e01f      	b.n	8102672 <HAL_GPIO_Init+0x26a>
 8102632:	2302      	movs	r3, #2
 8102634:	e01d      	b.n	8102672 <HAL_GPIO_Init+0x26a>
 8102636:	2301      	movs	r3, #1
 8102638:	e01b      	b.n	8102672 <HAL_GPIO_Init+0x26a>
 810263a:	bf00      	nop
 810263c:	580000c0 	.word	0x580000c0
 8102640:	58024400 	.word	0x58024400
 8102644:	58000400 	.word	0x58000400
 8102648:	58020000 	.word	0x58020000
 810264c:	58020400 	.word	0x58020400
 8102650:	58020800 	.word	0x58020800
 8102654:	58020c00 	.word	0x58020c00
 8102658:	58021000 	.word	0x58021000
 810265c:	58021400 	.word	0x58021400
 8102660:	58021800 	.word	0x58021800
 8102664:	58021c00 	.word	0x58021c00
 8102668:	58022000 	.word	0x58022000
 810266c:	58022400 	.word	0x58022400
 8102670:	2300      	movs	r3, #0
 8102672:	69fa      	ldr	r2, [r7, #28]
 8102674:	f002 0203 	and.w	r2, r2, #3
 8102678:	0092      	lsls	r2, r2, #2
 810267a:	4093      	lsls	r3, r2
 810267c:	69ba      	ldr	r2, [r7, #24]
 810267e:	4313      	orrs	r3, r2
 8102680:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8102682:	4938      	ldr	r1, [pc, #224]	; (8102764 <HAL_GPIO_Init+0x35c>)
 8102684:	69fb      	ldr	r3, [r7, #28]
 8102686:	089b      	lsrs	r3, r3, #2
 8102688:	3302      	adds	r3, #2
 810268a:	69ba      	ldr	r2, [r7, #24]
 810268c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8102690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102694:	681b      	ldr	r3, [r3, #0]
 8102696:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102698:	693b      	ldr	r3, [r7, #16]
 810269a:	43db      	mvns	r3, r3
 810269c:	69ba      	ldr	r2, [r7, #24]
 810269e:	4013      	ands	r3, r2
 81026a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81026a2:	683b      	ldr	r3, [r7, #0]
 81026a4:	685b      	ldr	r3, [r3, #4]
 81026a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81026aa:	2b00      	cmp	r3, #0
 81026ac:	d003      	beq.n	81026b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81026ae:	69ba      	ldr	r2, [r7, #24]
 81026b0:	693b      	ldr	r3, [r7, #16]
 81026b2:	4313      	orrs	r3, r2
 81026b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81026b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81026ba:	69bb      	ldr	r3, [r7, #24]
 81026bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81026be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81026c2:	685b      	ldr	r3, [r3, #4]
 81026c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81026c6:	693b      	ldr	r3, [r7, #16]
 81026c8:	43db      	mvns	r3, r3
 81026ca:	69ba      	ldr	r2, [r7, #24]
 81026cc:	4013      	ands	r3, r2
 81026ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 81026d0:	683b      	ldr	r3, [r7, #0]
 81026d2:	685b      	ldr	r3, [r3, #4]
 81026d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81026d8:	2b00      	cmp	r3, #0
 81026da:	d003      	beq.n	81026e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 81026dc:	69ba      	ldr	r2, [r7, #24]
 81026de:	693b      	ldr	r3, [r7, #16]
 81026e0:	4313      	orrs	r3, r2
 81026e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81026e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81026e8:	69bb      	ldr	r3, [r7, #24]
 81026ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 81026ec:	697b      	ldr	r3, [r7, #20]
 81026ee:	685b      	ldr	r3, [r3, #4]
 81026f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81026f2:	693b      	ldr	r3, [r7, #16]
 81026f4:	43db      	mvns	r3, r3
 81026f6:	69ba      	ldr	r2, [r7, #24]
 81026f8:	4013      	ands	r3, r2
 81026fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 81026fc:	683b      	ldr	r3, [r7, #0]
 81026fe:	685b      	ldr	r3, [r3, #4]
 8102700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102704:	2b00      	cmp	r3, #0
 8102706:	d003      	beq.n	8102710 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8102708:	69ba      	ldr	r2, [r7, #24]
 810270a:	693b      	ldr	r3, [r7, #16]
 810270c:	4313      	orrs	r3, r2
 810270e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8102710:	697b      	ldr	r3, [r7, #20]
 8102712:	69ba      	ldr	r2, [r7, #24]
 8102714:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8102716:	697b      	ldr	r3, [r7, #20]
 8102718:	681b      	ldr	r3, [r3, #0]
 810271a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810271c:	693b      	ldr	r3, [r7, #16]
 810271e:	43db      	mvns	r3, r3
 8102720:	69ba      	ldr	r2, [r7, #24]
 8102722:	4013      	ands	r3, r2
 8102724:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8102726:	683b      	ldr	r3, [r7, #0]
 8102728:	685b      	ldr	r3, [r3, #4]
 810272a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810272e:	2b00      	cmp	r3, #0
 8102730:	d003      	beq.n	810273a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8102732:	69ba      	ldr	r2, [r7, #24]
 8102734:	693b      	ldr	r3, [r7, #16]
 8102736:	4313      	orrs	r3, r2
 8102738:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810273a:	697b      	ldr	r3, [r7, #20]
 810273c:	69ba      	ldr	r2, [r7, #24]
 810273e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8102740:	69fb      	ldr	r3, [r7, #28]
 8102742:	3301      	adds	r3, #1
 8102744:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102746:	683b      	ldr	r3, [r7, #0]
 8102748:	681a      	ldr	r2, [r3, #0]
 810274a:	69fb      	ldr	r3, [r7, #28]
 810274c:	fa22 f303 	lsr.w	r3, r2, r3
 8102750:	2b00      	cmp	r3, #0
 8102752:	f47f ae63 	bne.w	810241c <HAL_GPIO_Init+0x14>
  }
}
 8102756:	bf00      	nop
 8102758:	bf00      	nop
 810275a:	3724      	adds	r7, #36	; 0x24
 810275c:	46bd      	mov	sp, r7
 810275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102762:	4770      	bx	lr
 8102764:	58000400 	.word	0x58000400

08102768 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8102768:	b580      	push	{r7, lr}
 810276a:	b082      	sub	sp, #8
 810276c:	af00      	add	r7, sp, #0
 810276e:	4603      	mov	r3, r0
 8102770:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 8102772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102776:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 810277a:	88fb      	ldrh	r3, [r7, #6]
 810277c:	4013      	ands	r3, r2
 810277e:	2b00      	cmp	r3, #0
 8102780:	d008      	beq.n	8102794 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 8102782:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102786:	88fb      	ldrh	r3, [r7, #6]
 8102788:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 810278c:	88fb      	ldrh	r3, [r7, #6]
 810278e:	4618      	mov	r0, r3
 8102790:	f7ff fa16 	bl	8101bc0 <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8102794:	bf00      	nop
 8102796:	3708      	adds	r7, #8
 8102798:	46bd      	mov	sp, r7
 810279a:	bd80      	pop	{r7, pc}

0810279c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 810279c:	b480      	push	{r7}
 810279e:	b083      	sub	sp, #12
 81027a0:	af00      	add	r7, sp, #0
 81027a2:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81027a4:	4b05      	ldr	r3, [pc, #20]	; (81027bc <HAL_HSEM_ActivateNotification+0x20>)
 81027a6:	681a      	ldr	r2, [r3, #0]
 81027a8:	4904      	ldr	r1, [pc, #16]	; (81027bc <HAL_HSEM_ActivateNotification+0x20>)
 81027aa:	687b      	ldr	r3, [r7, #4]
 81027ac:	4313      	orrs	r3, r2
 81027ae:	600b      	str	r3, [r1, #0]
#endif
}
 81027b0:	bf00      	nop
 81027b2:	370c      	adds	r7, #12
 81027b4:	46bd      	mov	sp, r7
 81027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027ba:	4770      	bx	lr
 81027bc:	58026510 	.word	0x58026510

081027c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 81027c0:	b580      	push	{r7, lr}
 81027c2:	b082      	sub	sp, #8
 81027c4:	af00      	add	r7, sp, #0
 81027c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 81027c8:	687b      	ldr	r3, [r7, #4]
 81027ca:	2b00      	cmp	r3, #0
 81027cc:	d101      	bne.n	81027d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 81027ce:	2301      	movs	r3, #1
 81027d0:	e081      	b.n	81028d6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 81027d2:	687b      	ldr	r3, [r7, #4]
 81027d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81027d8:	b2db      	uxtb	r3, r3
 81027da:	2b00      	cmp	r3, #0
 81027dc:	d106      	bne.n	81027ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 81027de:	687b      	ldr	r3, [r7, #4]
 81027e0:	2200      	movs	r2, #0
 81027e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 81027e6:	6878      	ldr	r0, [r7, #4]
 81027e8:	f7ff fa1e 	bl	8101c28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 81027ec:	687b      	ldr	r3, [r7, #4]
 81027ee:	2224      	movs	r2, #36	; 0x24
 81027f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 81027f4:	687b      	ldr	r3, [r7, #4]
 81027f6:	681b      	ldr	r3, [r3, #0]
 81027f8:	681a      	ldr	r2, [r3, #0]
 81027fa:	687b      	ldr	r3, [r7, #4]
 81027fc:	681b      	ldr	r3, [r3, #0]
 81027fe:	f022 0201 	bic.w	r2, r2, #1
 8102802:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8102804:	687b      	ldr	r3, [r7, #4]
 8102806:	685a      	ldr	r2, [r3, #4]
 8102808:	687b      	ldr	r3, [r7, #4]
 810280a:	681b      	ldr	r3, [r3, #0]
 810280c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8102810:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8102812:	687b      	ldr	r3, [r7, #4]
 8102814:	681b      	ldr	r3, [r3, #0]
 8102816:	689a      	ldr	r2, [r3, #8]
 8102818:	687b      	ldr	r3, [r7, #4]
 810281a:	681b      	ldr	r3, [r3, #0]
 810281c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8102820:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8102822:	687b      	ldr	r3, [r7, #4]
 8102824:	68db      	ldr	r3, [r3, #12]
 8102826:	2b01      	cmp	r3, #1
 8102828:	d107      	bne.n	810283a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 810282a:	687b      	ldr	r3, [r7, #4]
 810282c:	689a      	ldr	r2, [r3, #8]
 810282e:	687b      	ldr	r3, [r7, #4]
 8102830:	681b      	ldr	r3, [r3, #0]
 8102832:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8102836:	609a      	str	r2, [r3, #8]
 8102838:	e006      	b.n	8102848 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 810283a:	687b      	ldr	r3, [r7, #4]
 810283c:	689a      	ldr	r2, [r3, #8]
 810283e:	687b      	ldr	r3, [r7, #4]
 8102840:	681b      	ldr	r3, [r3, #0]
 8102842:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8102846:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8102848:	687b      	ldr	r3, [r7, #4]
 810284a:	68db      	ldr	r3, [r3, #12]
 810284c:	2b02      	cmp	r3, #2
 810284e:	d104      	bne.n	810285a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8102850:	687b      	ldr	r3, [r7, #4]
 8102852:	681b      	ldr	r3, [r3, #0]
 8102854:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8102858:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 810285a:	687b      	ldr	r3, [r7, #4]
 810285c:	681b      	ldr	r3, [r3, #0]
 810285e:	685b      	ldr	r3, [r3, #4]
 8102860:	687a      	ldr	r2, [r7, #4]
 8102862:	6812      	ldr	r2, [r2, #0]
 8102864:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8102868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 810286c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 810286e:	687b      	ldr	r3, [r7, #4]
 8102870:	681b      	ldr	r3, [r3, #0]
 8102872:	68da      	ldr	r2, [r3, #12]
 8102874:	687b      	ldr	r3, [r7, #4]
 8102876:	681b      	ldr	r3, [r3, #0]
 8102878:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 810287c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 810287e:	687b      	ldr	r3, [r7, #4]
 8102880:	691a      	ldr	r2, [r3, #16]
 8102882:	687b      	ldr	r3, [r7, #4]
 8102884:	695b      	ldr	r3, [r3, #20]
 8102886:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 810288a:	687b      	ldr	r3, [r7, #4]
 810288c:	699b      	ldr	r3, [r3, #24]
 810288e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8102890:	687b      	ldr	r3, [r7, #4]
 8102892:	681b      	ldr	r3, [r3, #0]
 8102894:	430a      	orrs	r2, r1
 8102896:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8102898:	687b      	ldr	r3, [r7, #4]
 810289a:	69d9      	ldr	r1, [r3, #28]
 810289c:	687b      	ldr	r3, [r7, #4]
 810289e:	6a1a      	ldr	r2, [r3, #32]
 81028a0:	687b      	ldr	r3, [r7, #4]
 81028a2:	681b      	ldr	r3, [r3, #0]
 81028a4:	430a      	orrs	r2, r1
 81028a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 81028a8:	687b      	ldr	r3, [r7, #4]
 81028aa:	681b      	ldr	r3, [r3, #0]
 81028ac:	681a      	ldr	r2, [r3, #0]
 81028ae:	687b      	ldr	r3, [r7, #4]
 81028b0:	681b      	ldr	r3, [r3, #0]
 81028b2:	f042 0201 	orr.w	r2, r2, #1
 81028b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81028b8:	687b      	ldr	r3, [r7, #4]
 81028ba:	2200      	movs	r2, #0
 81028bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 81028be:	687b      	ldr	r3, [r7, #4]
 81028c0:	2220      	movs	r2, #32
 81028c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 81028c6:	687b      	ldr	r3, [r7, #4]
 81028c8:	2200      	movs	r2, #0
 81028ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 81028cc:	687b      	ldr	r3, [r7, #4]
 81028ce:	2200      	movs	r2, #0
 81028d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 81028d4:	2300      	movs	r3, #0
}
 81028d6:	4618      	mov	r0, r3
 81028d8:	3708      	adds	r7, #8
 81028da:	46bd      	mov	sp, r7
 81028dc:	bd80      	pop	{r7, pc}
	...

081028e0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 81028e0:	b580      	push	{r7, lr}
 81028e2:	b088      	sub	sp, #32
 81028e4:	af02      	add	r7, sp, #8
 81028e6:	60f8      	str	r0, [r7, #12]
 81028e8:	607a      	str	r2, [r7, #4]
 81028ea:	461a      	mov	r2, r3
 81028ec:	460b      	mov	r3, r1
 81028ee:	817b      	strh	r3, [r7, #10]
 81028f0:	4613      	mov	r3, r2
 81028f2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 81028f4:	68fb      	ldr	r3, [r7, #12]
 81028f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81028fa:	b2db      	uxtb	r3, r3
 81028fc:	2b20      	cmp	r3, #32
 81028fe:	f040 80da 	bne.w	8102ab6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102902:	68fb      	ldr	r3, [r7, #12]
 8102904:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102908:	2b01      	cmp	r3, #1
 810290a:	d101      	bne.n	8102910 <HAL_I2C_Master_Transmit+0x30>
 810290c:	2302      	movs	r3, #2
 810290e:	e0d3      	b.n	8102ab8 <HAL_I2C_Master_Transmit+0x1d8>
 8102910:	68fb      	ldr	r3, [r7, #12]
 8102912:	2201      	movs	r2, #1
 8102914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8102918:	f7ff fc22 	bl	8102160 <HAL_GetTick>
 810291c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 810291e:	697b      	ldr	r3, [r7, #20]
 8102920:	9300      	str	r3, [sp, #0]
 8102922:	2319      	movs	r3, #25
 8102924:	2201      	movs	r2, #1
 8102926:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 810292a:	68f8      	ldr	r0, [r7, #12]
 810292c:	f000 fa00 	bl	8102d30 <I2C_WaitOnFlagUntilTimeout>
 8102930:	4603      	mov	r3, r0
 8102932:	2b00      	cmp	r3, #0
 8102934:	d001      	beq.n	810293a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8102936:	2301      	movs	r3, #1
 8102938:	e0be      	b.n	8102ab8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 810293a:	68fb      	ldr	r3, [r7, #12]
 810293c:	2221      	movs	r2, #33	; 0x21
 810293e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8102942:	68fb      	ldr	r3, [r7, #12]
 8102944:	2210      	movs	r2, #16
 8102946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810294a:	68fb      	ldr	r3, [r7, #12]
 810294c:	2200      	movs	r2, #0
 810294e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8102950:	68fb      	ldr	r3, [r7, #12]
 8102952:	687a      	ldr	r2, [r7, #4]
 8102954:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8102956:	68fb      	ldr	r3, [r7, #12]
 8102958:	893a      	ldrh	r2, [r7, #8]
 810295a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 810295c:	68fb      	ldr	r3, [r7, #12]
 810295e:	2200      	movs	r2, #0
 8102960:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102962:	68fb      	ldr	r3, [r7, #12]
 8102964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102966:	b29b      	uxth	r3, r3
 8102968:	2bff      	cmp	r3, #255	; 0xff
 810296a:	d90e      	bls.n	810298a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810296c:	68fb      	ldr	r3, [r7, #12]
 810296e:	22ff      	movs	r2, #255	; 0xff
 8102970:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8102972:	68fb      	ldr	r3, [r7, #12]
 8102974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102976:	b2da      	uxtb	r2, r3
 8102978:	8979      	ldrh	r1, [r7, #10]
 810297a:	4b51      	ldr	r3, [pc, #324]	; (8102ac0 <HAL_I2C_Master_Transmit+0x1e0>)
 810297c:	9300      	str	r3, [sp, #0]
 810297e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102982:	68f8      	ldr	r0, [r7, #12]
 8102984:	f000 fc10 	bl	81031a8 <I2C_TransferConfig>
 8102988:	e06c      	b.n	8102a64 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 810298a:	68fb      	ldr	r3, [r7, #12]
 810298c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810298e:	b29a      	uxth	r2, r3
 8102990:	68fb      	ldr	r3, [r7, #12]
 8102992:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8102994:	68fb      	ldr	r3, [r7, #12]
 8102996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102998:	b2da      	uxtb	r2, r3
 810299a:	8979      	ldrh	r1, [r7, #10]
 810299c:	4b48      	ldr	r3, [pc, #288]	; (8102ac0 <HAL_I2C_Master_Transmit+0x1e0>)
 810299e:	9300      	str	r3, [sp, #0]
 81029a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81029a4:	68f8      	ldr	r0, [r7, #12]
 81029a6:	f000 fbff 	bl	81031a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 81029aa:	e05b      	b.n	8102a64 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81029ac:	697a      	ldr	r2, [r7, #20]
 81029ae:	6a39      	ldr	r1, [r7, #32]
 81029b0:	68f8      	ldr	r0, [r7, #12]
 81029b2:	f000 fa0c 	bl	8102dce <I2C_WaitOnTXISFlagUntilTimeout>
 81029b6:	4603      	mov	r3, r0
 81029b8:	2b00      	cmp	r3, #0
 81029ba:	d001      	beq.n	81029c0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 81029bc:	2301      	movs	r3, #1
 81029be:	e07b      	b.n	8102ab8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 81029c0:	68fb      	ldr	r3, [r7, #12]
 81029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81029c4:	781a      	ldrb	r2, [r3, #0]
 81029c6:	68fb      	ldr	r3, [r7, #12]
 81029c8:	681b      	ldr	r3, [r3, #0]
 81029ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81029cc:	68fb      	ldr	r3, [r7, #12]
 81029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81029d0:	1c5a      	adds	r2, r3, #1
 81029d2:	68fb      	ldr	r3, [r7, #12]
 81029d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 81029d6:	68fb      	ldr	r3, [r7, #12]
 81029d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81029da:	b29b      	uxth	r3, r3
 81029dc:	3b01      	subs	r3, #1
 81029de:	b29a      	uxth	r2, r3
 81029e0:	68fb      	ldr	r3, [r7, #12]
 81029e2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 81029e4:	68fb      	ldr	r3, [r7, #12]
 81029e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81029e8:	3b01      	subs	r3, #1
 81029ea:	b29a      	uxth	r2, r3
 81029ec:	68fb      	ldr	r3, [r7, #12]
 81029ee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81029f0:	68fb      	ldr	r3, [r7, #12]
 81029f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81029f4:	b29b      	uxth	r3, r3
 81029f6:	2b00      	cmp	r3, #0
 81029f8:	d034      	beq.n	8102a64 <HAL_I2C_Master_Transmit+0x184>
 81029fa:	68fb      	ldr	r3, [r7, #12]
 81029fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81029fe:	2b00      	cmp	r3, #0
 8102a00:	d130      	bne.n	8102a64 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8102a02:	697b      	ldr	r3, [r7, #20]
 8102a04:	9300      	str	r3, [sp, #0]
 8102a06:	6a3b      	ldr	r3, [r7, #32]
 8102a08:	2200      	movs	r2, #0
 8102a0a:	2180      	movs	r1, #128	; 0x80
 8102a0c:	68f8      	ldr	r0, [r7, #12]
 8102a0e:	f000 f98f 	bl	8102d30 <I2C_WaitOnFlagUntilTimeout>
 8102a12:	4603      	mov	r3, r0
 8102a14:	2b00      	cmp	r3, #0
 8102a16:	d001      	beq.n	8102a1c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8102a18:	2301      	movs	r3, #1
 8102a1a:	e04d      	b.n	8102ab8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102a1c:	68fb      	ldr	r3, [r7, #12]
 8102a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102a20:	b29b      	uxth	r3, r3
 8102a22:	2bff      	cmp	r3, #255	; 0xff
 8102a24:	d90e      	bls.n	8102a44 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8102a26:	68fb      	ldr	r3, [r7, #12]
 8102a28:	22ff      	movs	r2, #255	; 0xff
 8102a2a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8102a2c:	68fb      	ldr	r3, [r7, #12]
 8102a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102a30:	b2da      	uxtb	r2, r3
 8102a32:	8979      	ldrh	r1, [r7, #10]
 8102a34:	2300      	movs	r3, #0
 8102a36:	9300      	str	r3, [sp, #0]
 8102a38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102a3c:	68f8      	ldr	r0, [r7, #12]
 8102a3e:	f000 fbb3 	bl	81031a8 <I2C_TransferConfig>
 8102a42:	e00f      	b.n	8102a64 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8102a44:	68fb      	ldr	r3, [r7, #12]
 8102a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102a48:	b29a      	uxth	r2, r3
 8102a4a:	68fb      	ldr	r3, [r7, #12]
 8102a4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8102a4e:	68fb      	ldr	r3, [r7, #12]
 8102a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102a52:	b2da      	uxtb	r2, r3
 8102a54:	8979      	ldrh	r1, [r7, #10]
 8102a56:	2300      	movs	r3, #0
 8102a58:	9300      	str	r3, [sp, #0]
 8102a5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102a5e:	68f8      	ldr	r0, [r7, #12]
 8102a60:	f000 fba2 	bl	81031a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8102a64:	68fb      	ldr	r3, [r7, #12]
 8102a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102a68:	b29b      	uxth	r3, r3
 8102a6a:	2b00      	cmp	r3, #0
 8102a6c:	d19e      	bne.n	81029ac <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102a6e:	697a      	ldr	r2, [r7, #20]
 8102a70:	6a39      	ldr	r1, [r7, #32]
 8102a72:	68f8      	ldr	r0, [r7, #12]
 8102a74:	f000 f9f2 	bl	8102e5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8102a78:	4603      	mov	r3, r0
 8102a7a:	2b00      	cmp	r3, #0
 8102a7c:	d001      	beq.n	8102a82 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8102a7e:	2301      	movs	r3, #1
 8102a80:	e01a      	b.n	8102ab8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102a82:	68fb      	ldr	r3, [r7, #12]
 8102a84:	681b      	ldr	r3, [r3, #0]
 8102a86:	2220      	movs	r2, #32
 8102a88:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102a8a:	68fb      	ldr	r3, [r7, #12]
 8102a8c:	681b      	ldr	r3, [r3, #0]
 8102a8e:	6859      	ldr	r1, [r3, #4]
 8102a90:	68fb      	ldr	r3, [r7, #12]
 8102a92:	681a      	ldr	r2, [r3, #0]
 8102a94:	4b0b      	ldr	r3, [pc, #44]	; (8102ac4 <HAL_I2C_Master_Transmit+0x1e4>)
 8102a96:	400b      	ands	r3, r1
 8102a98:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8102a9a:	68fb      	ldr	r3, [r7, #12]
 8102a9c:	2220      	movs	r2, #32
 8102a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8102aa2:	68fb      	ldr	r3, [r7, #12]
 8102aa4:	2200      	movs	r2, #0
 8102aa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102aaa:	68fb      	ldr	r3, [r7, #12]
 8102aac:	2200      	movs	r2, #0
 8102aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102ab2:	2300      	movs	r3, #0
 8102ab4:	e000      	b.n	8102ab8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8102ab6:	2302      	movs	r3, #2
  }
}
 8102ab8:	4618      	mov	r0, r3
 8102aba:	3718      	adds	r7, #24
 8102abc:	46bd      	mov	sp, r7
 8102abe:	bd80      	pop	{r7, pc}
 8102ac0:	80002000 	.word	0x80002000
 8102ac4:	fe00e800 	.word	0xfe00e800

08102ac8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8102ac8:	b580      	push	{r7, lr}
 8102aca:	b088      	sub	sp, #32
 8102acc:	af02      	add	r7, sp, #8
 8102ace:	60f8      	str	r0, [r7, #12]
 8102ad0:	607a      	str	r2, [r7, #4]
 8102ad2:	461a      	mov	r2, r3
 8102ad4:	460b      	mov	r3, r1
 8102ad6:	817b      	strh	r3, [r7, #10]
 8102ad8:	4613      	mov	r3, r2
 8102ada:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102adc:	68fb      	ldr	r3, [r7, #12]
 8102ade:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102ae2:	b2db      	uxtb	r3, r3
 8102ae4:	2b20      	cmp	r3, #32
 8102ae6:	f040 80db 	bne.w	8102ca0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102aea:	68fb      	ldr	r3, [r7, #12]
 8102aec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102af0:	2b01      	cmp	r3, #1
 8102af2:	d101      	bne.n	8102af8 <HAL_I2C_Master_Receive+0x30>
 8102af4:	2302      	movs	r3, #2
 8102af6:	e0d4      	b.n	8102ca2 <HAL_I2C_Master_Receive+0x1da>
 8102af8:	68fb      	ldr	r3, [r7, #12]
 8102afa:	2201      	movs	r2, #1
 8102afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8102b00:	f7ff fb2e 	bl	8102160 <HAL_GetTick>
 8102b04:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8102b06:	697b      	ldr	r3, [r7, #20]
 8102b08:	9300      	str	r3, [sp, #0]
 8102b0a:	2319      	movs	r3, #25
 8102b0c:	2201      	movs	r2, #1
 8102b0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8102b12:	68f8      	ldr	r0, [r7, #12]
 8102b14:	f000 f90c 	bl	8102d30 <I2C_WaitOnFlagUntilTimeout>
 8102b18:	4603      	mov	r3, r0
 8102b1a:	2b00      	cmp	r3, #0
 8102b1c:	d001      	beq.n	8102b22 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8102b1e:	2301      	movs	r3, #1
 8102b20:	e0bf      	b.n	8102ca2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8102b22:	68fb      	ldr	r3, [r7, #12]
 8102b24:	2222      	movs	r2, #34	; 0x22
 8102b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8102b2a:	68fb      	ldr	r3, [r7, #12]
 8102b2c:	2210      	movs	r2, #16
 8102b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102b32:	68fb      	ldr	r3, [r7, #12]
 8102b34:	2200      	movs	r2, #0
 8102b36:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8102b38:	68fb      	ldr	r3, [r7, #12]
 8102b3a:	687a      	ldr	r2, [r7, #4]
 8102b3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8102b3e:	68fb      	ldr	r3, [r7, #12]
 8102b40:	893a      	ldrh	r2, [r7, #8]
 8102b42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8102b44:	68fb      	ldr	r3, [r7, #12]
 8102b46:	2200      	movs	r2, #0
 8102b48:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102b4a:	68fb      	ldr	r3, [r7, #12]
 8102b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102b4e:	b29b      	uxth	r3, r3
 8102b50:	2bff      	cmp	r3, #255	; 0xff
 8102b52:	d90e      	bls.n	8102b72 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8102b54:	68fb      	ldr	r3, [r7, #12]
 8102b56:	22ff      	movs	r2, #255	; 0xff
 8102b58:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8102b5a:	68fb      	ldr	r3, [r7, #12]
 8102b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102b5e:	b2da      	uxtb	r2, r3
 8102b60:	8979      	ldrh	r1, [r7, #10]
 8102b62:	4b52      	ldr	r3, [pc, #328]	; (8102cac <HAL_I2C_Master_Receive+0x1e4>)
 8102b64:	9300      	str	r3, [sp, #0]
 8102b66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102b6a:	68f8      	ldr	r0, [r7, #12]
 8102b6c:	f000 fb1c 	bl	81031a8 <I2C_TransferConfig>
 8102b70:	e06d      	b.n	8102c4e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8102b72:	68fb      	ldr	r3, [r7, #12]
 8102b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102b76:	b29a      	uxth	r2, r3
 8102b78:	68fb      	ldr	r3, [r7, #12]
 8102b7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8102b7c:	68fb      	ldr	r3, [r7, #12]
 8102b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102b80:	b2da      	uxtb	r2, r3
 8102b82:	8979      	ldrh	r1, [r7, #10]
 8102b84:	4b49      	ldr	r3, [pc, #292]	; (8102cac <HAL_I2C_Master_Receive+0x1e4>)
 8102b86:	9300      	str	r3, [sp, #0]
 8102b88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102b8c:	68f8      	ldr	r0, [r7, #12]
 8102b8e:	f000 fb0b 	bl	81031a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8102b92:	e05c      	b.n	8102c4e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102b94:	697a      	ldr	r2, [r7, #20]
 8102b96:	6a39      	ldr	r1, [r7, #32]
 8102b98:	68f8      	ldr	r0, [r7, #12]
 8102b9a:	f000 f9a3 	bl	8102ee4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8102b9e:	4603      	mov	r3, r0
 8102ba0:	2b00      	cmp	r3, #0
 8102ba2:	d001      	beq.n	8102ba8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8102ba4:	2301      	movs	r3, #1
 8102ba6:	e07c      	b.n	8102ca2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8102ba8:	68fb      	ldr	r3, [r7, #12]
 8102baa:	681b      	ldr	r3, [r3, #0]
 8102bac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8102bae:	68fb      	ldr	r3, [r7, #12]
 8102bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102bb2:	b2d2      	uxtb	r2, r2
 8102bb4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8102bb6:	68fb      	ldr	r3, [r7, #12]
 8102bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102bba:	1c5a      	adds	r2, r3, #1
 8102bbc:	68fb      	ldr	r3, [r7, #12]
 8102bbe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8102bc0:	68fb      	ldr	r3, [r7, #12]
 8102bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102bc4:	3b01      	subs	r3, #1
 8102bc6:	b29a      	uxth	r2, r3
 8102bc8:	68fb      	ldr	r3, [r7, #12]
 8102bca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8102bcc:	68fb      	ldr	r3, [r7, #12]
 8102bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102bd0:	b29b      	uxth	r3, r3
 8102bd2:	3b01      	subs	r3, #1
 8102bd4:	b29a      	uxth	r2, r3
 8102bd6:	68fb      	ldr	r3, [r7, #12]
 8102bd8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8102bda:	68fb      	ldr	r3, [r7, #12]
 8102bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102bde:	b29b      	uxth	r3, r3
 8102be0:	2b00      	cmp	r3, #0
 8102be2:	d034      	beq.n	8102c4e <HAL_I2C_Master_Receive+0x186>
 8102be4:	68fb      	ldr	r3, [r7, #12]
 8102be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102be8:	2b00      	cmp	r3, #0
 8102bea:	d130      	bne.n	8102c4e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8102bec:	697b      	ldr	r3, [r7, #20]
 8102bee:	9300      	str	r3, [sp, #0]
 8102bf0:	6a3b      	ldr	r3, [r7, #32]
 8102bf2:	2200      	movs	r2, #0
 8102bf4:	2180      	movs	r1, #128	; 0x80
 8102bf6:	68f8      	ldr	r0, [r7, #12]
 8102bf8:	f000 f89a 	bl	8102d30 <I2C_WaitOnFlagUntilTimeout>
 8102bfc:	4603      	mov	r3, r0
 8102bfe:	2b00      	cmp	r3, #0
 8102c00:	d001      	beq.n	8102c06 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8102c02:	2301      	movs	r3, #1
 8102c04:	e04d      	b.n	8102ca2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102c06:	68fb      	ldr	r3, [r7, #12]
 8102c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102c0a:	b29b      	uxth	r3, r3
 8102c0c:	2bff      	cmp	r3, #255	; 0xff
 8102c0e:	d90e      	bls.n	8102c2e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8102c10:	68fb      	ldr	r3, [r7, #12]
 8102c12:	22ff      	movs	r2, #255	; 0xff
 8102c14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8102c16:	68fb      	ldr	r3, [r7, #12]
 8102c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102c1a:	b2da      	uxtb	r2, r3
 8102c1c:	8979      	ldrh	r1, [r7, #10]
 8102c1e:	2300      	movs	r3, #0
 8102c20:	9300      	str	r3, [sp, #0]
 8102c22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102c26:	68f8      	ldr	r0, [r7, #12]
 8102c28:	f000 fabe 	bl	81031a8 <I2C_TransferConfig>
 8102c2c:	e00f      	b.n	8102c4e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8102c2e:	68fb      	ldr	r3, [r7, #12]
 8102c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102c32:	b29a      	uxth	r2, r3
 8102c34:	68fb      	ldr	r3, [r7, #12]
 8102c36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8102c38:	68fb      	ldr	r3, [r7, #12]
 8102c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102c3c:	b2da      	uxtb	r2, r3
 8102c3e:	8979      	ldrh	r1, [r7, #10]
 8102c40:	2300      	movs	r3, #0
 8102c42:	9300      	str	r3, [sp, #0]
 8102c44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102c48:	68f8      	ldr	r0, [r7, #12]
 8102c4a:	f000 faad 	bl	81031a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8102c4e:	68fb      	ldr	r3, [r7, #12]
 8102c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102c52:	b29b      	uxth	r3, r3
 8102c54:	2b00      	cmp	r3, #0
 8102c56:	d19d      	bne.n	8102b94 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102c58:	697a      	ldr	r2, [r7, #20]
 8102c5a:	6a39      	ldr	r1, [r7, #32]
 8102c5c:	68f8      	ldr	r0, [r7, #12]
 8102c5e:	f000 f8fd 	bl	8102e5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8102c62:	4603      	mov	r3, r0
 8102c64:	2b00      	cmp	r3, #0
 8102c66:	d001      	beq.n	8102c6c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8102c68:	2301      	movs	r3, #1
 8102c6a:	e01a      	b.n	8102ca2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102c6c:	68fb      	ldr	r3, [r7, #12]
 8102c6e:	681b      	ldr	r3, [r3, #0]
 8102c70:	2220      	movs	r2, #32
 8102c72:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102c74:	68fb      	ldr	r3, [r7, #12]
 8102c76:	681b      	ldr	r3, [r3, #0]
 8102c78:	6859      	ldr	r1, [r3, #4]
 8102c7a:	68fb      	ldr	r3, [r7, #12]
 8102c7c:	681a      	ldr	r2, [r3, #0]
 8102c7e:	4b0c      	ldr	r3, [pc, #48]	; (8102cb0 <HAL_I2C_Master_Receive+0x1e8>)
 8102c80:	400b      	ands	r3, r1
 8102c82:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8102c84:	68fb      	ldr	r3, [r7, #12]
 8102c86:	2220      	movs	r2, #32
 8102c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8102c8c:	68fb      	ldr	r3, [r7, #12]
 8102c8e:	2200      	movs	r2, #0
 8102c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102c94:	68fb      	ldr	r3, [r7, #12]
 8102c96:	2200      	movs	r2, #0
 8102c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102c9c:	2300      	movs	r3, #0
 8102c9e:	e000      	b.n	8102ca2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8102ca0:	2302      	movs	r3, #2
  }
}
 8102ca2:	4618      	mov	r0, r3
 8102ca4:	3718      	adds	r7, #24
 8102ca6:	46bd      	mov	sp, r7
 8102ca8:	bd80      	pop	{r7, pc}
 8102caa:	bf00      	nop
 8102cac:	80002400 	.word	0x80002400
 8102cb0:	fe00e800 	.word	0xfe00e800

08102cb4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8102cb4:	b480      	push	{r7}
 8102cb6:	b083      	sub	sp, #12
 8102cb8:	af00      	add	r7, sp, #0
 8102cba:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8102cbc:	687b      	ldr	r3, [r7, #4]
 8102cbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102cc2:	b2db      	uxtb	r3, r3
}
 8102cc4:	4618      	mov	r0, r3
 8102cc6:	370c      	adds	r7, #12
 8102cc8:	46bd      	mov	sp, r7
 8102cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cce:	4770      	bx	lr

08102cd0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8102cd0:	b480      	push	{r7}
 8102cd2:	b083      	sub	sp, #12
 8102cd4:	af00      	add	r7, sp, #0
 8102cd6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8102cd8:	687b      	ldr	r3, [r7, #4]
 8102cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8102cdc:	4618      	mov	r0, r3
 8102cde:	370c      	adds	r7, #12
 8102ce0:	46bd      	mov	sp, r7
 8102ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ce6:	4770      	bx	lr

08102ce8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8102ce8:	b480      	push	{r7}
 8102cea:	b083      	sub	sp, #12
 8102cec:	af00      	add	r7, sp, #0
 8102cee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8102cf0:	687b      	ldr	r3, [r7, #4]
 8102cf2:	681b      	ldr	r3, [r3, #0]
 8102cf4:	699b      	ldr	r3, [r3, #24]
 8102cf6:	f003 0302 	and.w	r3, r3, #2
 8102cfa:	2b02      	cmp	r3, #2
 8102cfc:	d103      	bne.n	8102d06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8102cfe:	687b      	ldr	r3, [r7, #4]
 8102d00:	681b      	ldr	r3, [r3, #0]
 8102d02:	2200      	movs	r2, #0
 8102d04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8102d06:	687b      	ldr	r3, [r7, #4]
 8102d08:	681b      	ldr	r3, [r3, #0]
 8102d0a:	699b      	ldr	r3, [r3, #24]
 8102d0c:	f003 0301 	and.w	r3, r3, #1
 8102d10:	2b01      	cmp	r3, #1
 8102d12:	d007      	beq.n	8102d24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8102d14:	687b      	ldr	r3, [r7, #4]
 8102d16:	681b      	ldr	r3, [r3, #0]
 8102d18:	699a      	ldr	r2, [r3, #24]
 8102d1a:	687b      	ldr	r3, [r7, #4]
 8102d1c:	681b      	ldr	r3, [r3, #0]
 8102d1e:	f042 0201 	orr.w	r2, r2, #1
 8102d22:	619a      	str	r2, [r3, #24]
  }
}
 8102d24:	bf00      	nop
 8102d26:	370c      	adds	r7, #12
 8102d28:	46bd      	mov	sp, r7
 8102d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d2e:	4770      	bx	lr

08102d30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8102d30:	b580      	push	{r7, lr}
 8102d32:	b084      	sub	sp, #16
 8102d34:	af00      	add	r7, sp, #0
 8102d36:	60f8      	str	r0, [r7, #12]
 8102d38:	60b9      	str	r1, [r7, #8]
 8102d3a:	603b      	str	r3, [r7, #0]
 8102d3c:	4613      	mov	r3, r2
 8102d3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8102d40:	e031      	b.n	8102da6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8102d42:	683b      	ldr	r3, [r7, #0]
 8102d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102d48:	d02d      	beq.n	8102da6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102d4a:	f7ff fa09 	bl	8102160 <HAL_GetTick>
 8102d4e:	4602      	mov	r2, r0
 8102d50:	69bb      	ldr	r3, [r7, #24]
 8102d52:	1ad3      	subs	r3, r2, r3
 8102d54:	683a      	ldr	r2, [r7, #0]
 8102d56:	429a      	cmp	r2, r3
 8102d58:	d302      	bcc.n	8102d60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8102d5a:	683b      	ldr	r3, [r7, #0]
 8102d5c:	2b00      	cmp	r3, #0
 8102d5e:	d122      	bne.n	8102da6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8102d60:	68fb      	ldr	r3, [r7, #12]
 8102d62:	681b      	ldr	r3, [r3, #0]
 8102d64:	699a      	ldr	r2, [r3, #24]
 8102d66:	68bb      	ldr	r3, [r7, #8]
 8102d68:	4013      	ands	r3, r2
 8102d6a:	68ba      	ldr	r2, [r7, #8]
 8102d6c:	429a      	cmp	r2, r3
 8102d6e:	bf0c      	ite	eq
 8102d70:	2301      	moveq	r3, #1
 8102d72:	2300      	movne	r3, #0
 8102d74:	b2db      	uxtb	r3, r3
 8102d76:	461a      	mov	r2, r3
 8102d78:	79fb      	ldrb	r3, [r7, #7]
 8102d7a:	429a      	cmp	r2, r3
 8102d7c:	d113      	bne.n	8102da6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102d7e:	68fb      	ldr	r3, [r7, #12]
 8102d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102d82:	f043 0220 	orr.w	r2, r3, #32
 8102d86:	68fb      	ldr	r3, [r7, #12]
 8102d88:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8102d8a:	68fb      	ldr	r3, [r7, #12]
 8102d8c:	2220      	movs	r2, #32
 8102d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8102d92:	68fb      	ldr	r3, [r7, #12]
 8102d94:	2200      	movs	r2, #0
 8102d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8102d9a:	68fb      	ldr	r3, [r7, #12]
 8102d9c:	2200      	movs	r2, #0
 8102d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8102da2:	2301      	movs	r3, #1
 8102da4:	e00f      	b.n	8102dc6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8102da6:	68fb      	ldr	r3, [r7, #12]
 8102da8:	681b      	ldr	r3, [r3, #0]
 8102daa:	699a      	ldr	r2, [r3, #24]
 8102dac:	68bb      	ldr	r3, [r7, #8]
 8102dae:	4013      	ands	r3, r2
 8102db0:	68ba      	ldr	r2, [r7, #8]
 8102db2:	429a      	cmp	r2, r3
 8102db4:	bf0c      	ite	eq
 8102db6:	2301      	moveq	r3, #1
 8102db8:	2300      	movne	r3, #0
 8102dba:	b2db      	uxtb	r3, r3
 8102dbc:	461a      	mov	r2, r3
 8102dbe:	79fb      	ldrb	r3, [r7, #7]
 8102dc0:	429a      	cmp	r2, r3
 8102dc2:	d0be      	beq.n	8102d42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8102dc4:	2300      	movs	r3, #0
}
 8102dc6:	4618      	mov	r0, r3
 8102dc8:	3710      	adds	r7, #16
 8102dca:	46bd      	mov	sp, r7
 8102dcc:	bd80      	pop	{r7, pc}

08102dce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8102dce:	b580      	push	{r7, lr}
 8102dd0:	b084      	sub	sp, #16
 8102dd2:	af00      	add	r7, sp, #0
 8102dd4:	60f8      	str	r0, [r7, #12]
 8102dd6:	60b9      	str	r1, [r7, #8]
 8102dd8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8102dda:	e033      	b.n	8102e44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8102ddc:	687a      	ldr	r2, [r7, #4]
 8102dde:	68b9      	ldr	r1, [r7, #8]
 8102de0:	68f8      	ldr	r0, [r7, #12]
 8102de2:	f000 f901 	bl	8102fe8 <I2C_IsErrorOccurred>
 8102de6:	4603      	mov	r3, r0
 8102de8:	2b00      	cmp	r3, #0
 8102dea:	d001      	beq.n	8102df0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8102dec:	2301      	movs	r3, #1
 8102dee:	e031      	b.n	8102e54 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8102df0:	68bb      	ldr	r3, [r7, #8]
 8102df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102df6:	d025      	beq.n	8102e44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102df8:	f7ff f9b2 	bl	8102160 <HAL_GetTick>
 8102dfc:	4602      	mov	r2, r0
 8102dfe:	687b      	ldr	r3, [r7, #4]
 8102e00:	1ad3      	subs	r3, r2, r3
 8102e02:	68ba      	ldr	r2, [r7, #8]
 8102e04:	429a      	cmp	r2, r3
 8102e06:	d302      	bcc.n	8102e0e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8102e08:	68bb      	ldr	r3, [r7, #8]
 8102e0a:	2b00      	cmp	r3, #0
 8102e0c:	d11a      	bne.n	8102e44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8102e0e:	68fb      	ldr	r3, [r7, #12]
 8102e10:	681b      	ldr	r3, [r3, #0]
 8102e12:	699b      	ldr	r3, [r3, #24]
 8102e14:	f003 0302 	and.w	r3, r3, #2
 8102e18:	2b02      	cmp	r3, #2
 8102e1a:	d013      	beq.n	8102e44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102e1c:	68fb      	ldr	r3, [r7, #12]
 8102e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102e20:	f043 0220 	orr.w	r2, r3, #32
 8102e24:	68fb      	ldr	r3, [r7, #12]
 8102e26:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8102e28:	68fb      	ldr	r3, [r7, #12]
 8102e2a:	2220      	movs	r2, #32
 8102e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8102e30:	68fb      	ldr	r3, [r7, #12]
 8102e32:	2200      	movs	r2, #0
 8102e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8102e38:	68fb      	ldr	r3, [r7, #12]
 8102e3a:	2200      	movs	r2, #0
 8102e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8102e40:	2301      	movs	r3, #1
 8102e42:	e007      	b.n	8102e54 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8102e44:	68fb      	ldr	r3, [r7, #12]
 8102e46:	681b      	ldr	r3, [r3, #0]
 8102e48:	699b      	ldr	r3, [r3, #24]
 8102e4a:	f003 0302 	and.w	r3, r3, #2
 8102e4e:	2b02      	cmp	r3, #2
 8102e50:	d1c4      	bne.n	8102ddc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8102e52:	2300      	movs	r3, #0
}
 8102e54:	4618      	mov	r0, r3
 8102e56:	3710      	adds	r7, #16
 8102e58:	46bd      	mov	sp, r7
 8102e5a:	bd80      	pop	{r7, pc}

08102e5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8102e5c:	b580      	push	{r7, lr}
 8102e5e:	b084      	sub	sp, #16
 8102e60:	af00      	add	r7, sp, #0
 8102e62:	60f8      	str	r0, [r7, #12]
 8102e64:	60b9      	str	r1, [r7, #8]
 8102e66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102e68:	e02f      	b.n	8102eca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8102e6a:	687a      	ldr	r2, [r7, #4]
 8102e6c:	68b9      	ldr	r1, [r7, #8]
 8102e6e:	68f8      	ldr	r0, [r7, #12]
 8102e70:	f000 f8ba 	bl	8102fe8 <I2C_IsErrorOccurred>
 8102e74:	4603      	mov	r3, r0
 8102e76:	2b00      	cmp	r3, #0
 8102e78:	d001      	beq.n	8102e7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8102e7a:	2301      	movs	r3, #1
 8102e7c:	e02d      	b.n	8102eda <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102e7e:	f7ff f96f 	bl	8102160 <HAL_GetTick>
 8102e82:	4602      	mov	r2, r0
 8102e84:	687b      	ldr	r3, [r7, #4]
 8102e86:	1ad3      	subs	r3, r2, r3
 8102e88:	68ba      	ldr	r2, [r7, #8]
 8102e8a:	429a      	cmp	r2, r3
 8102e8c:	d302      	bcc.n	8102e94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8102e8e:	68bb      	ldr	r3, [r7, #8]
 8102e90:	2b00      	cmp	r3, #0
 8102e92:	d11a      	bne.n	8102eca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8102e94:	68fb      	ldr	r3, [r7, #12]
 8102e96:	681b      	ldr	r3, [r3, #0]
 8102e98:	699b      	ldr	r3, [r3, #24]
 8102e9a:	f003 0320 	and.w	r3, r3, #32
 8102e9e:	2b20      	cmp	r3, #32
 8102ea0:	d013      	beq.n	8102eca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102ea2:	68fb      	ldr	r3, [r7, #12]
 8102ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102ea6:	f043 0220 	orr.w	r2, r3, #32
 8102eaa:	68fb      	ldr	r3, [r7, #12]
 8102eac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8102eae:	68fb      	ldr	r3, [r7, #12]
 8102eb0:	2220      	movs	r2, #32
 8102eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8102eb6:	68fb      	ldr	r3, [r7, #12]
 8102eb8:	2200      	movs	r2, #0
 8102eba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8102ebe:	68fb      	ldr	r3, [r7, #12]
 8102ec0:	2200      	movs	r2, #0
 8102ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8102ec6:	2301      	movs	r3, #1
 8102ec8:	e007      	b.n	8102eda <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102eca:	68fb      	ldr	r3, [r7, #12]
 8102ecc:	681b      	ldr	r3, [r3, #0]
 8102ece:	699b      	ldr	r3, [r3, #24]
 8102ed0:	f003 0320 	and.w	r3, r3, #32
 8102ed4:	2b20      	cmp	r3, #32
 8102ed6:	d1c8      	bne.n	8102e6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8102ed8:	2300      	movs	r3, #0
}
 8102eda:	4618      	mov	r0, r3
 8102edc:	3710      	adds	r7, #16
 8102ede:	46bd      	mov	sp, r7
 8102ee0:	bd80      	pop	{r7, pc}
	...

08102ee4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8102ee4:	b580      	push	{r7, lr}
 8102ee6:	b084      	sub	sp, #16
 8102ee8:	af00      	add	r7, sp, #0
 8102eea:	60f8      	str	r0, [r7, #12]
 8102eec:	60b9      	str	r1, [r7, #8]
 8102eee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8102ef0:	e06b      	b.n	8102fca <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8102ef2:	687a      	ldr	r2, [r7, #4]
 8102ef4:	68b9      	ldr	r1, [r7, #8]
 8102ef6:	68f8      	ldr	r0, [r7, #12]
 8102ef8:	f000 f876 	bl	8102fe8 <I2C_IsErrorOccurred>
 8102efc:	4603      	mov	r3, r0
 8102efe:	2b00      	cmp	r3, #0
 8102f00:	d001      	beq.n	8102f06 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8102f02:	2301      	movs	r3, #1
 8102f04:	e069      	b.n	8102fda <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8102f06:	68fb      	ldr	r3, [r7, #12]
 8102f08:	681b      	ldr	r3, [r3, #0]
 8102f0a:	699b      	ldr	r3, [r3, #24]
 8102f0c:	f003 0320 	and.w	r3, r3, #32
 8102f10:	2b20      	cmp	r3, #32
 8102f12:	d138      	bne.n	8102f86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8102f14:	68fb      	ldr	r3, [r7, #12]
 8102f16:	681b      	ldr	r3, [r3, #0]
 8102f18:	699b      	ldr	r3, [r3, #24]
 8102f1a:	f003 0304 	and.w	r3, r3, #4
 8102f1e:	2b04      	cmp	r3, #4
 8102f20:	d105      	bne.n	8102f2e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8102f22:	68fb      	ldr	r3, [r7, #12]
 8102f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102f26:	2b00      	cmp	r3, #0
 8102f28:	d001      	beq.n	8102f2e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8102f2a:	2300      	movs	r3, #0
 8102f2c:	e055      	b.n	8102fda <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8102f2e:	68fb      	ldr	r3, [r7, #12]
 8102f30:	681b      	ldr	r3, [r3, #0]
 8102f32:	699b      	ldr	r3, [r3, #24]
 8102f34:	f003 0310 	and.w	r3, r3, #16
 8102f38:	2b10      	cmp	r3, #16
 8102f3a:	d107      	bne.n	8102f4c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8102f3c:	68fb      	ldr	r3, [r7, #12]
 8102f3e:	681b      	ldr	r3, [r3, #0]
 8102f40:	2210      	movs	r2, #16
 8102f42:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8102f44:	68fb      	ldr	r3, [r7, #12]
 8102f46:	2204      	movs	r2, #4
 8102f48:	645a      	str	r2, [r3, #68]	; 0x44
 8102f4a:	e002      	b.n	8102f52 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102f4c:	68fb      	ldr	r3, [r7, #12]
 8102f4e:	2200      	movs	r2, #0
 8102f50:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102f52:	68fb      	ldr	r3, [r7, #12]
 8102f54:	681b      	ldr	r3, [r3, #0]
 8102f56:	2220      	movs	r2, #32
 8102f58:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8102f5a:	68fb      	ldr	r3, [r7, #12]
 8102f5c:	681b      	ldr	r3, [r3, #0]
 8102f5e:	6859      	ldr	r1, [r3, #4]
 8102f60:	68fb      	ldr	r3, [r7, #12]
 8102f62:	681a      	ldr	r2, [r3, #0]
 8102f64:	4b1f      	ldr	r3, [pc, #124]	; (8102fe4 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8102f66:	400b      	ands	r3, r1
 8102f68:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8102f6a:	68fb      	ldr	r3, [r7, #12]
 8102f6c:	2220      	movs	r2, #32
 8102f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8102f72:	68fb      	ldr	r3, [r7, #12]
 8102f74:	2200      	movs	r2, #0
 8102f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8102f7a:	68fb      	ldr	r3, [r7, #12]
 8102f7c:	2200      	movs	r2, #0
 8102f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8102f82:	2301      	movs	r3, #1
 8102f84:	e029      	b.n	8102fda <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102f86:	f7ff f8eb 	bl	8102160 <HAL_GetTick>
 8102f8a:	4602      	mov	r2, r0
 8102f8c:	687b      	ldr	r3, [r7, #4]
 8102f8e:	1ad3      	subs	r3, r2, r3
 8102f90:	68ba      	ldr	r2, [r7, #8]
 8102f92:	429a      	cmp	r2, r3
 8102f94:	d302      	bcc.n	8102f9c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8102f96:	68bb      	ldr	r3, [r7, #8]
 8102f98:	2b00      	cmp	r3, #0
 8102f9a:	d116      	bne.n	8102fca <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8102f9c:	68fb      	ldr	r3, [r7, #12]
 8102f9e:	681b      	ldr	r3, [r3, #0]
 8102fa0:	699b      	ldr	r3, [r3, #24]
 8102fa2:	f003 0304 	and.w	r3, r3, #4
 8102fa6:	2b04      	cmp	r3, #4
 8102fa8:	d00f      	beq.n	8102fca <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102faa:	68fb      	ldr	r3, [r7, #12]
 8102fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102fae:	f043 0220 	orr.w	r2, r3, #32
 8102fb2:	68fb      	ldr	r3, [r7, #12]
 8102fb4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8102fb6:	68fb      	ldr	r3, [r7, #12]
 8102fb8:	2220      	movs	r2, #32
 8102fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8102fbe:	68fb      	ldr	r3, [r7, #12]
 8102fc0:	2200      	movs	r2, #0
 8102fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8102fc6:	2301      	movs	r3, #1
 8102fc8:	e007      	b.n	8102fda <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8102fca:	68fb      	ldr	r3, [r7, #12]
 8102fcc:	681b      	ldr	r3, [r3, #0]
 8102fce:	699b      	ldr	r3, [r3, #24]
 8102fd0:	f003 0304 	and.w	r3, r3, #4
 8102fd4:	2b04      	cmp	r3, #4
 8102fd6:	d18c      	bne.n	8102ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8102fd8:	2300      	movs	r3, #0
}
 8102fda:	4618      	mov	r0, r3
 8102fdc:	3710      	adds	r7, #16
 8102fde:	46bd      	mov	sp, r7
 8102fe0:	bd80      	pop	{r7, pc}
 8102fe2:	bf00      	nop
 8102fe4:	fe00e800 	.word	0xfe00e800

08102fe8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8102fe8:	b580      	push	{r7, lr}
 8102fea:	b08a      	sub	sp, #40	; 0x28
 8102fec:	af00      	add	r7, sp, #0
 8102fee:	60f8      	str	r0, [r7, #12]
 8102ff0:	60b9      	str	r1, [r7, #8]
 8102ff2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8102ff4:	2300      	movs	r3, #0
 8102ff6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8102ffa:	68fb      	ldr	r3, [r7, #12]
 8102ffc:	681b      	ldr	r3, [r3, #0]
 8102ffe:	699b      	ldr	r3, [r3, #24]
 8103000:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8103002:	2300      	movs	r3, #0
 8103004:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8103006:	687b      	ldr	r3, [r7, #4]
 8103008:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 810300a:	69bb      	ldr	r3, [r7, #24]
 810300c:	f003 0310 	and.w	r3, r3, #16
 8103010:	2b00      	cmp	r3, #0
 8103012:	d068      	beq.n	81030e6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8103014:	68fb      	ldr	r3, [r7, #12]
 8103016:	681b      	ldr	r3, [r3, #0]
 8103018:	2210      	movs	r2, #16
 810301a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 810301c:	e049      	b.n	81030b2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 810301e:	68bb      	ldr	r3, [r7, #8]
 8103020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103024:	d045      	beq.n	81030b2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8103026:	f7ff f89b 	bl	8102160 <HAL_GetTick>
 810302a:	4602      	mov	r2, r0
 810302c:	69fb      	ldr	r3, [r7, #28]
 810302e:	1ad3      	subs	r3, r2, r3
 8103030:	68ba      	ldr	r2, [r7, #8]
 8103032:	429a      	cmp	r2, r3
 8103034:	d302      	bcc.n	810303c <I2C_IsErrorOccurred+0x54>
 8103036:	68bb      	ldr	r3, [r7, #8]
 8103038:	2b00      	cmp	r3, #0
 810303a:	d13a      	bne.n	81030b2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 810303c:	68fb      	ldr	r3, [r7, #12]
 810303e:	681b      	ldr	r3, [r3, #0]
 8103040:	685b      	ldr	r3, [r3, #4]
 8103042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8103046:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8103048:	68fb      	ldr	r3, [r7, #12]
 810304a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 810304e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8103050:	68fb      	ldr	r3, [r7, #12]
 8103052:	681b      	ldr	r3, [r3, #0]
 8103054:	699b      	ldr	r3, [r3, #24]
 8103056:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810305a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810305e:	d121      	bne.n	81030a4 <I2C_IsErrorOccurred+0xbc>
 8103060:	697b      	ldr	r3, [r7, #20]
 8103062:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103066:	d01d      	beq.n	81030a4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8103068:	7cfb      	ldrb	r3, [r7, #19]
 810306a:	2b20      	cmp	r3, #32
 810306c:	d01a      	beq.n	81030a4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 810306e:	68fb      	ldr	r3, [r7, #12]
 8103070:	681b      	ldr	r3, [r3, #0]
 8103072:	685a      	ldr	r2, [r3, #4]
 8103074:	68fb      	ldr	r3, [r7, #12]
 8103076:	681b      	ldr	r3, [r3, #0]
 8103078:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 810307c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 810307e:	f7ff f86f 	bl	8102160 <HAL_GetTick>
 8103082:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8103084:	e00e      	b.n	81030a4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8103086:	f7ff f86b 	bl	8102160 <HAL_GetTick>
 810308a:	4602      	mov	r2, r0
 810308c:	69fb      	ldr	r3, [r7, #28]
 810308e:	1ad3      	subs	r3, r2, r3
 8103090:	2b19      	cmp	r3, #25
 8103092:	d907      	bls.n	81030a4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8103094:	6a3b      	ldr	r3, [r7, #32]
 8103096:	f043 0320 	orr.w	r3, r3, #32
 810309a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 810309c:	2301      	movs	r3, #1
 810309e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 81030a2:	e006      	b.n	81030b2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81030a4:	68fb      	ldr	r3, [r7, #12]
 81030a6:	681b      	ldr	r3, [r3, #0]
 81030a8:	699b      	ldr	r3, [r3, #24]
 81030aa:	f003 0320 	and.w	r3, r3, #32
 81030ae:	2b20      	cmp	r3, #32
 81030b0:	d1e9      	bne.n	8103086 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 81030b2:	68fb      	ldr	r3, [r7, #12]
 81030b4:	681b      	ldr	r3, [r3, #0]
 81030b6:	699b      	ldr	r3, [r3, #24]
 81030b8:	f003 0320 	and.w	r3, r3, #32
 81030bc:	2b20      	cmp	r3, #32
 81030be:	d003      	beq.n	81030c8 <I2C_IsErrorOccurred+0xe0>
 81030c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81030c4:	2b00      	cmp	r3, #0
 81030c6:	d0aa      	beq.n	810301e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 81030c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81030cc:	2b00      	cmp	r3, #0
 81030ce:	d103      	bne.n	81030d8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81030d0:	68fb      	ldr	r3, [r7, #12]
 81030d2:	681b      	ldr	r3, [r3, #0]
 81030d4:	2220      	movs	r2, #32
 81030d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 81030d8:	6a3b      	ldr	r3, [r7, #32]
 81030da:	f043 0304 	orr.w	r3, r3, #4
 81030de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 81030e0:	2301      	movs	r3, #1
 81030e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 81030e6:	68fb      	ldr	r3, [r7, #12]
 81030e8:	681b      	ldr	r3, [r3, #0]
 81030ea:	699b      	ldr	r3, [r3, #24]
 81030ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 81030ee:	69bb      	ldr	r3, [r7, #24]
 81030f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81030f4:	2b00      	cmp	r3, #0
 81030f6:	d00b      	beq.n	8103110 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 81030f8:	6a3b      	ldr	r3, [r7, #32]
 81030fa:	f043 0301 	orr.w	r3, r3, #1
 81030fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8103100:	68fb      	ldr	r3, [r7, #12]
 8103102:	681b      	ldr	r3, [r3, #0]
 8103104:	f44f 7280 	mov.w	r2, #256	; 0x100
 8103108:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810310a:	2301      	movs	r3, #1
 810310c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8103110:	69bb      	ldr	r3, [r7, #24]
 8103112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103116:	2b00      	cmp	r3, #0
 8103118:	d00b      	beq.n	8103132 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 810311a:	6a3b      	ldr	r3, [r7, #32]
 810311c:	f043 0308 	orr.w	r3, r3, #8
 8103120:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8103122:	68fb      	ldr	r3, [r7, #12]
 8103124:	681b      	ldr	r3, [r3, #0]
 8103126:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810312a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810312c:	2301      	movs	r3, #1
 810312e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8103132:	69bb      	ldr	r3, [r7, #24]
 8103134:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8103138:	2b00      	cmp	r3, #0
 810313a:	d00b      	beq.n	8103154 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 810313c:	6a3b      	ldr	r3, [r7, #32]
 810313e:	f043 0302 	orr.w	r3, r3, #2
 8103142:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8103144:	68fb      	ldr	r3, [r7, #12]
 8103146:	681b      	ldr	r3, [r3, #0]
 8103148:	f44f 7200 	mov.w	r2, #512	; 0x200
 810314c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810314e:	2301      	movs	r3, #1
 8103150:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8103154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8103158:	2b00      	cmp	r3, #0
 810315a:	d01c      	beq.n	8103196 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 810315c:	68f8      	ldr	r0, [r7, #12]
 810315e:	f7ff fdc3 	bl	8102ce8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8103162:	68fb      	ldr	r3, [r7, #12]
 8103164:	681b      	ldr	r3, [r3, #0]
 8103166:	6859      	ldr	r1, [r3, #4]
 8103168:	68fb      	ldr	r3, [r7, #12]
 810316a:	681a      	ldr	r2, [r3, #0]
 810316c:	4b0d      	ldr	r3, [pc, #52]	; (81031a4 <I2C_IsErrorOccurred+0x1bc>)
 810316e:	400b      	ands	r3, r1
 8103170:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8103172:	68fb      	ldr	r3, [r7, #12]
 8103174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8103176:	6a3b      	ldr	r3, [r7, #32]
 8103178:	431a      	orrs	r2, r3
 810317a:	68fb      	ldr	r3, [r7, #12]
 810317c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 810317e:	68fb      	ldr	r3, [r7, #12]
 8103180:	2220      	movs	r2, #32
 8103182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8103186:	68fb      	ldr	r3, [r7, #12]
 8103188:	2200      	movs	r2, #0
 810318a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810318e:	68fb      	ldr	r3, [r7, #12]
 8103190:	2200      	movs	r2, #0
 8103192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8103196:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 810319a:	4618      	mov	r0, r3
 810319c:	3728      	adds	r7, #40	; 0x28
 810319e:	46bd      	mov	sp, r7
 81031a0:	bd80      	pop	{r7, pc}
 81031a2:	bf00      	nop
 81031a4:	fe00e800 	.word	0xfe00e800

081031a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 81031a8:	b480      	push	{r7}
 81031aa:	b087      	sub	sp, #28
 81031ac:	af00      	add	r7, sp, #0
 81031ae:	60f8      	str	r0, [r7, #12]
 81031b0:	607b      	str	r3, [r7, #4]
 81031b2:	460b      	mov	r3, r1
 81031b4:	817b      	strh	r3, [r7, #10]
 81031b6:	4613      	mov	r3, r2
 81031b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81031ba:	897b      	ldrh	r3, [r7, #10]
 81031bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 81031c0:	7a7b      	ldrb	r3, [r7, #9]
 81031c2:	041b      	lsls	r3, r3, #16
 81031c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81031c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 81031ca:	687b      	ldr	r3, [r7, #4]
 81031cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81031ce:	6a3b      	ldr	r3, [r7, #32]
 81031d0:	4313      	orrs	r3, r2
 81031d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 81031d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 81031d8:	68fb      	ldr	r3, [r7, #12]
 81031da:	681b      	ldr	r3, [r3, #0]
 81031dc:	685a      	ldr	r2, [r3, #4]
 81031de:	6a3b      	ldr	r3, [r7, #32]
 81031e0:	0d5b      	lsrs	r3, r3, #21
 81031e2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 81031e6:	4b08      	ldr	r3, [pc, #32]	; (8103208 <I2C_TransferConfig+0x60>)
 81031e8:	430b      	orrs	r3, r1
 81031ea:	43db      	mvns	r3, r3
 81031ec:	ea02 0103 	and.w	r1, r2, r3
 81031f0:	68fb      	ldr	r3, [r7, #12]
 81031f2:	681b      	ldr	r3, [r3, #0]
 81031f4:	697a      	ldr	r2, [r7, #20]
 81031f6:	430a      	orrs	r2, r1
 81031f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 81031fa:	bf00      	nop
 81031fc:	371c      	adds	r7, #28
 81031fe:	46bd      	mov	sp, r7
 8103200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103204:	4770      	bx	lr
 8103206:	bf00      	nop
 8103208:	03ff63ff 	.word	0x03ff63ff

0810320c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 810320c:	b480      	push	{r7}
 810320e:	b083      	sub	sp, #12
 8103210:	af00      	add	r7, sp, #0
 8103212:	6078      	str	r0, [r7, #4]
 8103214:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103216:	687b      	ldr	r3, [r7, #4]
 8103218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810321c:	b2db      	uxtb	r3, r3
 810321e:	2b20      	cmp	r3, #32
 8103220:	d138      	bne.n	8103294 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8103222:	687b      	ldr	r3, [r7, #4]
 8103224:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103228:	2b01      	cmp	r3, #1
 810322a:	d101      	bne.n	8103230 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 810322c:	2302      	movs	r3, #2
 810322e:	e032      	b.n	8103296 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8103230:	687b      	ldr	r3, [r7, #4]
 8103232:	2201      	movs	r2, #1
 8103234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8103238:	687b      	ldr	r3, [r7, #4]
 810323a:	2224      	movs	r2, #36	; 0x24
 810323c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8103240:	687b      	ldr	r3, [r7, #4]
 8103242:	681b      	ldr	r3, [r3, #0]
 8103244:	681a      	ldr	r2, [r3, #0]
 8103246:	687b      	ldr	r3, [r7, #4]
 8103248:	681b      	ldr	r3, [r3, #0]
 810324a:	f022 0201 	bic.w	r2, r2, #1
 810324e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8103250:	687b      	ldr	r3, [r7, #4]
 8103252:	681b      	ldr	r3, [r3, #0]
 8103254:	681a      	ldr	r2, [r3, #0]
 8103256:	687b      	ldr	r3, [r7, #4]
 8103258:	681b      	ldr	r3, [r3, #0]
 810325a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 810325e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8103260:	687b      	ldr	r3, [r7, #4]
 8103262:	681b      	ldr	r3, [r3, #0]
 8103264:	6819      	ldr	r1, [r3, #0]
 8103266:	687b      	ldr	r3, [r7, #4]
 8103268:	681b      	ldr	r3, [r3, #0]
 810326a:	683a      	ldr	r2, [r7, #0]
 810326c:	430a      	orrs	r2, r1
 810326e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8103270:	687b      	ldr	r3, [r7, #4]
 8103272:	681b      	ldr	r3, [r3, #0]
 8103274:	681a      	ldr	r2, [r3, #0]
 8103276:	687b      	ldr	r3, [r7, #4]
 8103278:	681b      	ldr	r3, [r3, #0]
 810327a:	f042 0201 	orr.w	r2, r2, #1
 810327e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8103280:	687b      	ldr	r3, [r7, #4]
 8103282:	2220      	movs	r2, #32
 8103284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103288:	687b      	ldr	r3, [r7, #4]
 810328a:	2200      	movs	r2, #0
 810328c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8103290:	2300      	movs	r3, #0
 8103292:	e000      	b.n	8103296 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8103294:	2302      	movs	r3, #2
  }
}
 8103296:	4618      	mov	r0, r3
 8103298:	370c      	adds	r7, #12
 810329a:	46bd      	mov	sp, r7
 810329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032a0:	4770      	bx	lr

081032a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 81032a2:	b480      	push	{r7}
 81032a4:	b085      	sub	sp, #20
 81032a6:	af00      	add	r7, sp, #0
 81032a8:	6078      	str	r0, [r7, #4]
 81032aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81032ac:	687b      	ldr	r3, [r7, #4]
 81032ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81032b2:	b2db      	uxtb	r3, r3
 81032b4:	2b20      	cmp	r3, #32
 81032b6:	d139      	bne.n	810332c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81032b8:	687b      	ldr	r3, [r7, #4]
 81032ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81032be:	2b01      	cmp	r3, #1
 81032c0:	d101      	bne.n	81032c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 81032c2:	2302      	movs	r3, #2
 81032c4:	e033      	b.n	810332e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 81032c6:	687b      	ldr	r3, [r7, #4]
 81032c8:	2201      	movs	r2, #1
 81032ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81032ce:	687b      	ldr	r3, [r7, #4]
 81032d0:	2224      	movs	r2, #36	; 0x24
 81032d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81032d6:	687b      	ldr	r3, [r7, #4]
 81032d8:	681b      	ldr	r3, [r3, #0]
 81032da:	681a      	ldr	r2, [r3, #0]
 81032dc:	687b      	ldr	r3, [r7, #4]
 81032de:	681b      	ldr	r3, [r3, #0]
 81032e0:	f022 0201 	bic.w	r2, r2, #1
 81032e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 81032e6:	687b      	ldr	r3, [r7, #4]
 81032e8:	681b      	ldr	r3, [r3, #0]
 81032ea:	681b      	ldr	r3, [r3, #0]
 81032ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 81032ee:	68fb      	ldr	r3, [r7, #12]
 81032f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81032f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 81032f6:	683b      	ldr	r3, [r7, #0]
 81032f8:	021b      	lsls	r3, r3, #8
 81032fa:	68fa      	ldr	r2, [r7, #12]
 81032fc:	4313      	orrs	r3, r2
 81032fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8103300:	687b      	ldr	r3, [r7, #4]
 8103302:	681b      	ldr	r3, [r3, #0]
 8103304:	68fa      	ldr	r2, [r7, #12]
 8103306:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8103308:	687b      	ldr	r3, [r7, #4]
 810330a:	681b      	ldr	r3, [r3, #0]
 810330c:	681a      	ldr	r2, [r3, #0]
 810330e:	687b      	ldr	r3, [r7, #4]
 8103310:	681b      	ldr	r3, [r3, #0]
 8103312:	f042 0201 	orr.w	r2, r2, #1
 8103316:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8103318:	687b      	ldr	r3, [r7, #4]
 810331a:	2220      	movs	r2, #32
 810331c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103320:	687b      	ldr	r3, [r7, #4]
 8103322:	2200      	movs	r2, #0
 8103324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8103328:	2300      	movs	r3, #0
 810332a:	e000      	b.n	810332e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 810332c:	2302      	movs	r3, #2
  }
}
 810332e:	4618      	mov	r0, r3
 8103330:	3714      	adds	r7, #20
 8103332:	46bd      	mov	sp, r7
 8103334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103338:	4770      	bx	lr
	...

0810333c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810333c:	b580      	push	{r7, lr}
 810333e:	b084      	sub	sp, #16
 8103340:	af00      	add	r7, sp, #0
 8103342:	60f8      	str	r0, [r7, #12]
 8103344:	460b      	mov	r3, r1
 8103346:	607a      	str	r2, [r7, #4]
 8103348:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810334a:	4b37      	ldr	r3, [pc, #220]	; (8103428 <HAL_PWREx_EnterSTOPMode+0xec>)
 810334c:	681b      	ldr	r3, [r3, #0]
 810334e:	f023 0201 	bic.w	r2, r3, #1
 8103352:	4935      	ldr	r1, [pc, #212]	; (8103428 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103354:	68fb      	ldr	r3, [r7, #12]
 8103356:	4313      	orrs	r3, r2
 8103358:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810335a:	687b      	ldr	r3, [r7, #4]
 810335c:	2b00      	cmp	r3, #0
 810335e:	d123      	bne.n	81033a8 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8103360:	f7ff f83e 	bl	81023e0 <HAL_GetCurrentCPUID>
 8103364:	4603      	mov	r3, r0
 8103366:	2b03      	cmp	r3, #3
 8103368:	d158      	bne.n	810341c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810336a:	4b2f      	ldr	r3, [pc, #188]	; (8103428 <HAL_PWREx_EnterSTOPMode+0xec>)
 810336c:	691b      	ldr	r3, [r3, #16]
 810336e:	4a2e      	ldr	r2, [pc, #184]	; (8103428 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103370:	f023 0301 	bic.w	r3, r3, #1
 8103374:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103376:	4b2d      	ldr	r3, [pc, #180]	; (810342c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103378:	691b      	ldr	r3, [r3, #16]
 810337a:	4a2c      	ldr	r2, [pc, #176]	; (810342c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810337c:	f043 0304 	orr.w	r3, r3, #4
 8103380:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8103382:	f3bf 8f4f 	dsb	sy
}
 8103386:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103388:	f3bf 8f6f 	isb	sy
}
 810338c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810338e:	7afb      	ldrb	r3, [r7, #11]
 8103390:	2b01      	cmp	r3, #1
 8103392:	d101      	bne.n	8103398 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103394:	bf30      	wfi
 8103396:	e000      	b.n	810339a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103398:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810339a:	4b24      	ldr	r3, [pc, #144]	; (810342c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810339c:	691b      	ldr	r3, [r3, #16]
 810339e:	4a23      	ldr	r2, [pc, #140]	; (810342c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81033a0:	f023 0304 	bic.w	r3, r3, #4
 81033a4:	6113      	str	r3, [r2, #16]
 81033a6:	e03c      	b.n	8103422 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81033a8:	687b      	ldr	r3, [r7, #4]
 81033aa:	2b01      	cmp	r3, #1
 81033ac:	d123      	bne.n	81033f6 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81033ae:	f7ff f817 	bl	81023e0 <HAL_GetCurrentCPUID>
 81033b2:	4603      	mov	r3, r0
 81033b4:	2b01      	cmp	r3, #1
 81033b6:	d133      	bne.n	8103420 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81033b8:	4b1b      	ldr	r3, [pc, #108]	; (8103428 <HAL_PWREx_EnterSTOPMode+0xec>)
 81033ba:	695b      	ldr	r3, [r3, #20]
 81033bc:	4a1a      	ldr	r2, [pc, #104]	; (8103428 <HAL_PWREx_EnterSTOPMode+0xec>)
 81033be:	f023 0302 	bic.w	r3, r3, #2
 81033c2:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81033c4:	4b19      	ldr	r3, [pc, #100]	; (810342c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81033c6:	691b      	ldr	r3, [r3, #16]
 81033c8:	4a18      	ldr	r2, [pc, #96]	; (810342c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81033ca:	f043 0304 	orr.w	r3, r3, #4
 81033ce:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81033d0:	f3bf 8f4f 	dsb	sy
}
 81033d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81033d6:	f3bf 8f6f 	isb	sy
}
 81033da:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81033dc:	7afb      	ldrb	r3, [r7, #11]
 81033de:	2b01      	cmp	r3, #1
 81033e0:	d101      	bne.n	81033e6 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81033e2:	bf30      	wfi
 81033e4:	e000      	b.n	81033e8 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81033e6:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81033e8:	4b10      	ldr	r3, [pc, #64]	; (810342c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81033ea:	691b      	ldr	r3, [r3, #16]
 81033ec:	4a0f      	ldr	r2, [pc, #60]	; (810342c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81033ee:	f023 0304 	bic.w	r3, r3, #4
 81033f2:	6113      	str	r3, [r2, #16]
 81033f4:	e015      	b.n	8103422 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81033f6:	f7fe fff3 	bl	81023e0 <HAL_GetCurrentCPUID>
 81033fa:	4603      	mov	r3, r0
 81033fc:	2b03      	cmp	r3, #3
 81033fe:	d106      	bne.n	810340e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8103400:	4b09      	ldr	r3, [pc, #36]	; (8103428 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103402:	691b      	ldr	r3, [r3, #16]
 8103404:	4a08      	ldr	r2, [pc, #32]	; (8103428 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103406:	f023 0304 	bic.w	r3, r3, #4
 810340a:	6113      	str	r3, [r2, #16]
 810340c:	e009      	b.n	8103422 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810340e:	4b06      	ldr	r3, [pc, #24]	; (8103428 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103410:	695b      	ldr	r3, [r3, #20]
 8103412:	4a05      	ldr	r2, [pc, #20]	; (8103428 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103414:	f023 0304 	bic.w	r3, r3, #4
 8103418:	6153      	str	r3, [r2, #20]
 810341a:	e002      	b.n	8103422 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810341c:	bf00      	nop
 810341e:	e000      	b.n	8103422 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103420:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8103422:	3710      	adds	r7, #16
 8103424:	46bd      	mov	sp, r7
 8103426:	bd80      	pop	{r7, pc}
 8103428:	58024800 	.word	0x58024800
 810342c:	e000ed00 	.word	0xe000ed00

08103430 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8103430:	b580      	push	{r7, lr}
 8103432:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103434:	f7fe ffd4 	bl	81023e0 <HAL_GetCurrentCPUID>
 8103438:	4603      	mov	r3, r0
 810343a:	2b03      	cmp	r3, #3
 810343c:	d101      	bne.n	8103442 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810343e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8103440:	e001      	b.n	8103446 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8103442:	bf40      	sev
    __WFE ();
 8103444:	bf20      	wfe
}
 8103446:	bf00      	nop
 8103448:	bd80      	pop	{r7, pc}
	...

0810344c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810344c:	b480      	push	{r7}
 810344e:	b089      	sub	sp, #36	; 0x24
 8103450:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8103452:	4bb3      	ldr	r3, [pc, #716]	; (8103720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103454:	691b      	ldr	r3, [r3, #16]
 8103456:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810345a:	2b18      	cmp	r3, #24
 810345c:	f200 8155 	bhi.w	810370a <HAL_RCC_GetSysClockFreq+0x2be>
 8103460:	a201      	add	r2, pc, #4	; (adr r2, 8103468 <HAL_RCC_GetSysClockFreq+0x1c>)
 8103462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103466:	bf00      	nop
 8103468:	081034cd 	.word	0x081034cd
 810346c:	0810370b 	.word	0x0810370b
 8103470:	0810370b 	.word	0x0810370b
 8103474:	0810370b 	.word	0x0810370b
 8103478:	0810370b 	.word	0x0810370b
 810347c:	0810370b 	.word	0x0810370b
 8103480:	0810370b 	.word	0x0810370b
 8103484:	0810370b 	.word	0x0810370b
 8103488:	081034f3 	.word	0x081034f3
 810348c:	0810370b 	.word	0x0810370b
 8103490:	0810370b 	.word	0x0810370b
 8103494:	0810370b 	.word	0x0810370b
 8103498:	0810370b 	.word	0x0810370b
 810349c:	0810370b 	.word	0x0810370b
 81034a0:	0810370b 	.word	0x0810370b
 81034a4:	0810370b 	.word	0x0810370b
 81034a8:	081034f9 	.word	0x081034f9
 81034ac:	0810370b 	.word	0x0810370b
 81034b0:	0810370b 	.word	0x0810370b
 81034b4:	0810370b 	.word	0x0810370b
 81034b8:	0810370b 	.word	0x0810370b
 81034bc:	0810370b 	.word	0x0810370b
 81034c0:	0810370b 	.word	0x0810370b
 81034c4:	0810370b 	.word	0x0810370b
 81034c8:	081034ff 	.word	0x081034ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81034cc:	4b94      	ldr	r3, [pc, #592]	; (8103720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81034ce:	681b      	ldr	r3, [r3, #0]
 81034d0:	f003 0320 	and.w	r3, r3, #32
 81034d4:	2b00      	cmp	r3, #0
 81034d6:	d009      	beq.n	81034ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81034d8:	4b91      	ldr	r3, [pc, #580]	; (8103720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81034da:	681b      	ldr	r3, [r3, #0]
 81034dc:	08db      	lsrs	r3, r3, #3
 81034de:	f003 0303 	and.w	r3, r3, #3
 81034e2:	4a90      	ldr	r2, [pc, #576]	; (8103724 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81034e4:	fa22 f303 	lsr.w	r3, r2, r3
 81034e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 81034ea:	e111      	b.n	8103710 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81034ec:	4b8d      	ldr	r3, [pc, #564]	; (8103724 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81034ee:	61bb      	str	r3, [r7, #24]
      break;
 81034f0:	e10e      	b.n	8103710 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 81034f2:	4b8d      	ldr	r3, [pc, #564]	; (8103728 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81034f4:	61bb      	str	r3, [r7, #24]
      break;
 81034f6:	e10b      	b.n	8103710 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 81034f8:	4b8c      	ldr	r3, [pc, #560]	; (810372c <HAL_RCC_GetSysClockFreq+0x2e0>)
 81034fa:	61bb      	str	r3, [r7, #24]
      break;
 81034fc:	e108      	b.n	8103710 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81034fe:	4b88      	ldr	r3, [pc, #544]	; (8103720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103502:	f003 0303 	and.w	r3, r3, #3
 8103506:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8103508:	4b85      	ldr	r3, [pc, #532]	; (8103720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810350a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810350c:	091b      	lsrs	r3, r3, #4
 810350e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103512:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8103514:	4b82      	ldr	r3, [pc, #520]	; (8103720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103518:	f003 0301 	and.w	r3, r3, #1
 810351c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810351e:	4b80      	ldr	r3, [pc, #512]	; (8103720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103522:	08db      	lsrs	r3, r3, #3
 8103524:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103528:	68fa      	ldr	r2, [r7, #12]
 810352a:	fb02 f303 	mul.w	r3, r2, r3
 810352e:	ee07 3a90 	vmov	s15, r3
 8103532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103536:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 810353a:	693b      	ldr	r3, [r7, #16]
 810353c:	2b00      	cmp	r3, #0
 810353e:	f000 80e1 	beq.w	8103704 <HAL_RCC_GetSysClockFreq+0x2b8>
 8103542:	697b      	ldr	r3, [r7, #20]
 8103544:	2b02      	cmp	r3, #2
 8103546:	f000 8083 	beq.w	8103650 <HAL_RCC_GetSysClockFreq+0x204>
 810354a:	697b      	ldr	r3, [r7, #20]
 810354c:	2b02      	cmp	r3, #2
 810354e:	f200 80a1 	bhi.w	8103694 <HAL_RCC_GetSysClockFreq+0x248>
 8103552:	697b      	ldr	r3, [r7, #20]
 8103554:	2b00      	cmp	r3, #0
 8103556:	d003      	beq.n	8103560 <HAL_RCC_GetSysClockFreq+0x114>
 8103558:	697b      	ldr	r3, [r7, #20]
 810355a:	2b01      	cmp	r3, #1
 810355c:	d056      	beq.n	810360c <HAL_RCC_GetSysClockFreq+0x1c0>
 810355e:	e099      	b.n	8103694 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103560:	4b6f      	ldr	r3, [pc, #444]	; (8103720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103562:	681b      	ldr	r3, [r3, #0]
 8103564:	f003 0320 	and.w	r3, r3, #32
 8103568:	2b00      	cmp	r3, #0
 810356a:	d02d      	beq.n	81035c8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810356c:	4b6c      	ldr	r3, [pc, #432]	; (8103720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810356e:	681b      	ldr	r3, [r3, #0]
 8103570:	08db      	lsrs	r3, r3, #3
 8103572:	f003 0303 	and.w	r3, r3, #3
 8103576:	4a6b      	ldr	r2, [pc, #428]	; (8103724 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103578:	fa22 f303 	lsr.w	r3, r2, r3
 810357c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810357e:	687b      	ldr	r3, [r7, #4]
 8103580:	ee07 3a90 	vmov	s15, r3
 8103584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103588:	693b      	ldr	r3, [r7, #16]
 810358a:	ee07 3a90 	vmov	s15, r3
 810358e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103596:	4b62      	ldr	r3, [pc, #392]	; (8103720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810359a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810359e:	ee07 3a90 	vmov	s15, r3
 81035a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81035a6:	ed97 6a02 	vldr	s12, [r7, #8]
 81035aa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8103730 <HAL_RCC_GetSysClockFreq+0x2e4>
 81035ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81035b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81035b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81035ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81035be:	ee67 7a27 	vmul.f32	s15, s14, s15
 81035c2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 81035c6:	e087      	b.n	81036d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81035c8:	693b      	ldr	r3, [r7, #16]
 81035ca:	ee07 3a90 	vmov	s15, r3
 81035ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81035d2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8103734 <HAL_RCC_GetSysClockFreq+0x2e8>
 81035d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81035da:	4b51      	ldr	r3, [pc, #324]	; (8103720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81035de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81035e2:	ee07 3a90 	vmov	s15, r3
 81035e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81035ea:	ed97 6a02 	vldr	s12, [r7, #8]
 81035ee:	eddf 5a50 	vldr	s11, [pc, #320]	; 8103730 <HAL_RCC_GetSysClockFreq+0x2e4>
 81035f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81035f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81035fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81035fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103606:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810360a:	e065      	b.n	81036d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810360c:	693b      	ldr	r3, [r7, #16]
 810360e:	ee07 3a90 	vmov	s15, r3
 8103612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103616:	eddf 6a48 	vldr	s13, [pc, #288]	; 8103738 <HAL_RCC_GetSysClockFreq+0x2ec>
 810361a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810361e:	4b40      	ldr	r3, [pc, #256]	; (8103720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103626:	ee07 3a90 	vmov	s15, r3
 810362a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810362e:	ed97 6a02 	vldr	s12, [r7, #8]
 8103632:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8103730 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810363a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810363e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103646:	ee67 7a27 	vmul.f32	s15, s14, s15
 810364a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810364e:	e043      	b.n	81036d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103650:	693b      	ldr	r3, [r7, #16]
 8103652:	ee07 3a90 	vmov	s15, r3
 8103656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810365a:	eddf 6a38 	vldr	s13, [pc, #224]	; 810373c <HAL_RCC_GetSysClockFreq+0x2f0>
 810365e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103662:	4b2f      	ldr	r3, [pc, #188]	; (8103720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810366a:	ee07 3a90 	vmov	s15, r3
 810366e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103672:	ed97 6a02 	vldr	s12, [r7, #8]
 8103676:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8103730 <HAL_RCC_GetSysClockFreq+0x2e4>
 810367a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810367e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810368a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810368e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8103692:	e021      	b.n	81036d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103694:	693b      	ldr	r3, [r7, #16]
 8103696:	ee07 3a90 	vmov	s15, r3
 810369a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810369e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8103738 <HAL_RCC_GetSysClockFreq+0x2ec>
 81036a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81036a6:	4b1e      	ldr	r3, [pc, #120]	; (8103720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81036a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81036aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81036ae:	ee07 3a90 	vmov	s15, r3
 81036b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81036b6:	ed97 6a02 	vldr	s12, [r7, #8]
 81036ba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8103730 <HAL_RCC_GetSysClockFreq+0x2e4>
 81036be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81036c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81036c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81036ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81036ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 81036d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81036d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 81036d8:	4b11      	ldr	r3, [pc, #68]	; (8103720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81036dc:	0a5b      	lsrs	r3, r3, #9
 81036de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81036e2:	3301      	adds	r3, #1
 81036e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 81036e6:	683b      	ldr	r3, [r7, #0]
 81036e8:	ee07 3a90 	vmov	s15, r3
 81036ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81036f0:	edd7 6a07 	vldr	s13, [r7, #28]
 81036f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81036f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81036fc:	ee17 3a90 	vmov	r3, s15
 8103700:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8103702:	e005      	b.n	8103710 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8103704:	2300      	movs	r3, #0
 8103706:	61bb      	str	r3, [r7, #24]
      break;
 8103708:	e002      	b.n	8103710 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810370a:	4b07      	ldr	r3, [pc, #28]	; (8103728 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810370c:	61bb      	str	r3, [r7, #24]
      break;
 810370e:	bf00      	nop
  }

  return sysclockfreq;
 8103710:	69bb      	ldr	r3, [r7, #24]
}
 8103712:	4618      	mov	r0, r3
 8103714:	3724      	adds	r7, #36	; 0x24
 8103716:	46bd      	mov	sp, r7
 8103718:	f85d 7b04 	ldr.w	r7, [sp], #4
 810371c:	4770      	bx	lr
 810371e:	bf00      	nop
 8103720:	58024400 	.word	0x58024400
 8103724:	03d09000 	.word	0x03d09000
 8103728:	003d0900 	.word	0x003d0900
 810372c:	007a1200 	.word	0x007a1200
 8103730:	46000000 	.word	0x46000000
 8103734:	4c742400 	.word	0x4c742400
 8103738:	4a742400 	.word	0x4a742400
 810373c:	4af42400 	.word	0x4af42400

08103740 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8103740:	b580      	push	{r7, lr}
 8103742:	b082      	sub	sp, #8
 8103744:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8103746:	f7ff fe81 	bl	810344c <HAL_RCC_GetSysClockFreq>
 810374a:	4602      	mov	r2, r0
 810374c:	4b11      	ldr	r3, [pc, #68]	; (8103794 <HAL_RCC_GetHCLKFreq+0x54>)
 810374e:	699b      	ldr	r3, [r3, #24]
 8103750:	0a1b      	lsrs	r3, r3, #8
 8103752:	f003 030f 	and.w	r3, r3, #15
 8103756:	4910      	ldr	r1, [pc, #64]	; (8103798 <HAL_RCC_GetHCLKFreq+0x58>)
 8103758:	5ccb      	ldrb	r3, [r1, r3]
 810375a:	f003 031f 	and.w	r3, r3, #31
 810375e:	fa22 f303 	lsr.w	r3, r2, r3
 8103762:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103764:	4b0b      	ldr	r3, [pc, #44]	; (8103794 <HAL_RCC_GetHCLKFreq+0x54>)
 8103766:	699b      	ldr	r3, [r3, #24]
 8103768:	f003 030f 	and.w	r3, r3, #15
 810376c:	4a0a      	ldr	r2, [pc, #40]	; (8103798 <HAL_RCC_GetHCLKFreq+0x58>)
 810376e:	5cd3      	ldrb	r3, [r2, r3]
 8103770:	f003 031f 	and.w	r3, r3, #31
 8103774:	687a      	ldr	r2, [r7, #4]
 8103776:	fa22 f303 	lsr.w	r3, r2, r3
 810377a:	4a08      	ldr	r2, [pc, #32]	; (810379c <HAL_RCC_GetHCLKFreq+0x5c>)
 810377c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810377e:	4b07      	ldr	r3, [pc, #28]	; (810379c <HAL_RCC_GetHCLKFreq+0x5c>)
 8103780:	681b      	ldr	r3, [r3, #0]
 8103782:	4a07      	ldr	r2, [pc, #28]	; (81037a0 <HAL_RCC_GetHCLKFreq+0x60>)
 8103784:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8103786:	4b05      	ldr	r3, [pc, #20]	; (810379c <HAL_RCC_GetHCLKFreq+0x5c>)
 8103788:	681b      	ldr	r3, [r3, #0]
}
 810378a:	4618      	mov	r0, r3
 810378c:	3708      	adds	r7, #8
 810378e:	46bd      	mov	sp, r7
 8103790:	bd80      	pop	{r7, pc}
 8103792:	bf00      	nop
 8103794:	58024400 	.word	0x58024400
 8103798:	0810b71c 	.word	0x0810b71c
 810379c:	10000004 	.word	0x10000004
 81037a0:	10000000 	.word	0x10000000

081037a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81037a4:	b580      	push	{r7, lr}
 81037a6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81037a8:	f7ff ffca 	bl	8103740 <HAL_RCC_GetHCLKFreq>
 81037ac:	4602      	mov	r2, r0
 81037ae:	4b06      	ldr	r3, [pc, #24]	; (81037c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 81037b0:	69db      	ldr	r3, [r3, #28]
 81037b2:	091b      	lsrs	r3, r3, #4
 81037b4:	f003 0307 	and.w	r3, r3, #7
 81037b8:	4904      	ldr	r1, [pc, #16]	; (81037cc <HAL_RCC_GetPCLK1Freq+0x28>)
 81037ba:	5ccb      	ldrb	r3, [r1, r3]
 81037bc:	f003 031f 	and.w	r3, r3, #31
 81037c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81037c4:	4618      	mov	r0, r3
 81037c6:	bd80      	pop	{r7, pc}
 81037c8:	58024400 	.word	0x58024400
 81037cc:	0810b71c 	.word	0x0810b71c

081037d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 81037d0:	b580      	push	{r7, lr}
 81037d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 81037d4:	f7ff ffb4 	bl	8103740 <HAL_RCC_GetHCLKFreq>
 81037d8:	4602      	mov	r2, r0
 81037da:	4b06      	ldr	r3, [pc, #24]	; (81037f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 81037dc:	69db      	ldr	r3, [r3, #28]
 81037de:	0a1b      	lsrs	r3, r3, #8
 81037e0:	f003 0307 	and.w	r3, r3, #7
 81037e4:	4904      	ldr	r1, [pc, #16]	; (81037f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 81037e6:	5ccb      	ldrb	r3, [r1, r3]
 81037e8:	f003 031f 	and.w	r3, r3, #31
 81037ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81037f0:	4618      	mov	r0, r3
 81037f2:	bd80      	pop	{r7, pc}
 81037f4:	58024400 	.word	0x58024400
 81037f8:	0810b71c 	.word	0x0810b71c

081037fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81037fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8103800:	b0ca      	sub	sp, #296	; 0x128
 8103802:	af00      	add	r7, sp, #0
 8103804:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8103808:	2300      	movs	r3, #0
 810380a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810380e:	2300      	movs	r3, #0
 8103810:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8103814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103818:	e9d3 2300 	ldrd	r2, r3, [r3]
 810381c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8103820:	2500      	movs	r5, #0
 8103822:	ea54 0305 	orrs.w	r3, r4, r5
 8103826:	d049      	beq.n	81038bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8103828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810382c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810382e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103832:	d02f      	beq.n	8103894 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8103834:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103838:	d828      	bhi.n	810388c <HAL_RCCEx_PeriphCLKConfig+0x90>
 810383a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810383e:	d01a      	beq.n	8103876 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8103840:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103844:	d822      	bhi.n	810388c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8103846:	2b00      	cmp	r3, #0
 8103848:	d003      	beq.n	8103852 <HAL_RCCEx_PeriphCLKConfig+0x56>
 810384a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810384e:	d007      	beq.n	8103860 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8103850:	e01c      	b.n	810388c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103852:	4bb8      	ldr	r3, [pc, #736]	; (8103b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103856:	4ab7      	ldr	r2, [pc, #732]	; (8103b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810385c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810385e:	e01a      	b.n	8103896 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103864:	3308      	adds	r3, #8
 8103866:	2102      	movs	r1, #2
 8103868:	4618      	mov	r0, r3
 810386a:	f001 fc8f 	bl	810518c <RCCEx_PLL2_Config>
 810386e:	4603      	mov	r3, r0
 8103870:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8103874:	e00f      	b.n	8103896 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810387a:	3328      	adds	r3, #40	; 0x28
 810387c:	2102      	movs	r1, #2
 810387e:	4618      	mov	r0, r3
 8103880:	f001 fd36 	bl	81052f0 <RCCEx_PLL3_Config>
 8103884:	4603      	mov	r3, r0
 8103886:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810388a:	e004      	b.n	8103896 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810388c:	2301      	movs	r3, #1
 810388e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103892:	e000      	b.n	8103896 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8103894:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103896:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810389a:	2b00      	cmp	r3, #0
 810389c:	d10a      	bne.n	81038b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 810389e:	4ba5      	ldr	r3, [pc, #660]	; (8103b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81038a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81038a2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 81038a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81038aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81038ac:	4aa1      	ldr	r2, [pc, #644]	; (8103b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81038ae:	430b      	orrs	r3, r1
 81038b0:	6513      	str	r3, [r2, #80]	; 0x50
 81038b2:	e003      	b.n	81038bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81038b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81038b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81038bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81038c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81038c4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 81038c8:	f04f 0900 	mov.w	r9, #0
 81038cc:	ea58 0309 	orrs.w	r3, r8, r9
 81038d0:	d047      	beq.n	8103962 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 81038d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81038d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81038d8:	2b04      	cmp	r3, #4
 81038da:	d82a      	bhi.n	8103932 <HAL_RCCEx_PeriphCLKConfig+0x136>
 81038dc:	a201      	add	r2, pc, #4	; (adr r2, 81038e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 81038de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81038e2:	bf00      	nop
 81038e4:	081038f9 	.word	0x081038f9
 81038e8:	08103907 	.word	0x08103907
 81038ec:	0810391d 	.word	0x0810391d
 81038f0:	0810393b 	.word	0x0810393b
 81038f4:	0810393b 	.word	0x0810393b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81038f8:	4b8e      	ldr	r3, [pc, #568]	; (8103b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81038fc:	4a8d      	ldr	r2, [pc, #564]	; (8103b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81038fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103902:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103904:	e01a      	b.n	810393c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810390a:	3308      	adds	r3, #8
 810390c:	2100      	movs	r1, #0
 810390e:	4618      	mov	r0, r3
 8103910:	f001 fc3c 	bl	810518c <RCCEx_PLL2_Config>
 8103914:	4603      	mov	r3, r0
 8103916:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810391a:	e00f      	b.n	810393c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810391c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103920:	3328      	adds	r3, #40	; 0x28
 8103922:	2100      	movs	r1, #0
 8103924:	4618      	mov	r0, r3
 8103926:	f001 fce3 	bl	81052f0 <RCCEx_PLL3_Config>
 810392a:	4603      	mov	r3, r0
 810392c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103930:	e004      	b.n	810393c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103932:	2301      	movs	r3, #1
 8103934:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103938:	e000      	b.n	810393c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 810393a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810393c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103940:	2b00      	cmp	r3, #0
 8103942:	d10a      	bne.n	810395a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8103944:	4b7b      	ldr	r3, [pc, #492]	; (8103b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103948:	f023 0107 	bic.w	r1, r3, #7
 810394c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103952:	4a78      	ldr	r2, [pc, #480]	; (8103b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103954:	430b      	orrs	r3, r1
 8103956:	6513      	str	r3, [r2, #80]	; 0x50
 8103958:	e003      	b.n	8103962 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810395a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810395e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8103962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103966:	e9d3 2300 	ldrd	r2, r3, [r3]
 810396a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 810396e:	f04f 0b00 	mov.w	fp, #0
 8103972:	ea5a 030b 	orrs.w	r3, sl, fp
 8103976:	d04c      	beq.n	8103a12 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8103978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810397c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810397e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103982:	d030      	beq.n	81039e6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8103984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103988:	d829      	bhi.n	81039de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810398a:	2bc0      	cmp	r3, #192	; 0xc0
 810398c:	d02d      	beq.n	81039ea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 810398e:	2bc0      	cmp	r3, #192	; 0xc0
 8103990:	d825      	bhi.n	81039de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8103992:	2b80      	cmp	r3, #128	; 0x80
 8103994:	d018      	beq.n	81039c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8103996:	2b80      	cmp	r3, #128	; 0x80
 8103998:	d821      	bhi.n	81039de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810399a:	2b00      	cmp	r3, #0
 810399c:	d002      	beq.n	81039a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 810399e:	2b40      	cmp	r3, #64	; 0x40
 81039a0:	d007      	beq.n	81039b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 81039a2:	e01c      	b.n	81039de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81039a4:	4b63      	ldr	r3, [pc, #396]	; (8103b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81039a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81039a8:	4a62      	ldr	r2, [pc, #392]	; (8103b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81039aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81039ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81039b0:	e01c      	b.n	81039ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81039b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81039b6:	3308      	adds	r3, #8
 81039b8:	2100      	movs	r1, #0
 81039ba:	4618      	mov	r0, r3
 81039bc:	f001 fbe6 	bl	810518c <RCCEx_PLL2_Config>
 81039c0:	4603      	mov	r3, r0
 81039c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81039c6:	e011      	b.n	81039ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81039c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81039cc:	3328      	adds	r3, #40	; 0x28
 81039ce:	2100      	movs	r1, #0
 81039d0:	4618      	mov	r0, r3
 81039d2:	f001 fc8d 	bl	81052f0 <RCCEx_PLL3_Config>
 81039d6:	4603      	mov	r3, r0
 81039d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81039dc:	e006      	b.n	81039ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81039de:	2301      	movs	r3, #1
 81039e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81039e4:	e002      	b.n	81039ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81039e6:	bf00      	nop
 81039e8:	e000      	b.n	81039ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81039ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 81039ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81039f0:	2b00      	cmp	r3, #0
 81039f2:	d10a      	bne.n	8103a0a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81039f4:	4b4f      	ldr	r3, [pc, #316]	; (8103b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81039f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81039f8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 81039fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103a02:	4a4c      	ldr	r2, [pc, #304]	; (8103b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103a04:	430b      	orrs	r3, r1
 8103a06:	6513      	str	r3, [r2, #80]	; 0x50
 8103a08:	e003      	b.n	8103a12 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103a0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8103a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103a1a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8103a1e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8103a22:	2300      	movs	r3, #0
 8103a24:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8103a28:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8103a2c:	460b      	mov	r3, r1
 8103a2e:	4313      	orrs	r3, r2
 8103a30:	d053      	beq.n	8103ada <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8103a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103a36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103a3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103a3e:	d035      	beq.n	8103aac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8103a40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103a44:	d82e      	bhi.n	8103aa4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8103a46:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103a4a:	d031      	beq.n	8103ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8103a4c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103a50:	d828      	bhi.n	8103aa4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8103a52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103a56:	d01a      	beq.n	8103a8e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8103a58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103a5c:	d822      	bhi.n	8103aa4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8103a5e:	2b00      	cmp	r3, #0
 8103a60:	d003      	beq.n	8103a6a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8103a62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103a66:	d007      	beq.n	8103a78 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8103a68:	e01c      	b.n	8103aa4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103a6a:	4b32      	ldr	r3, [pc, #200]	; (8103b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103a6e:	4a31      	ldr	r2, [pc, #196]	; (8103b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103a74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103a76:	e01c      	b.n	8103ab2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103a7c:	3308      	adds	r3, #8
 8103a7e:	2100      	movs	r1, #0
 8103a80:	4618      	mov	r0, r3
 8103a82:	f001 fb83 	bl	810518c <RCCEx_PLL2_Config>
 8103a86:	4603      	mov	r3, r0
 8103a88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8103a8c:	e011      	b.n	8103ab2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103a92:	3328      	adds	r3, #40	; 0x28
 8103a94:	2100      	movs	r1, #0
 8103a96:	4618      	mov	r0, r3
 8103a98:	f001 fc2a 	bl	81052f0 <RCCEx_PLL3_Config>
 8103a9c:	4603      	mov	r3, r0
 8103a9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103aa2:	e006      	b.n	8103ab2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8103aa4:	2301      	movs	r3, #1
 8103aa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103aaa:	e002      	b.n	8103ab2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8103aac:	bf00      	nop
 8103aae:	e000      	b.n	8103ab2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8103ab0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103ab2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103ab6:	2b00      	cmp	r3, #0
 8103ab8:	d10b      	bne.n	8103ad2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8103aba:	4b1e      	ldr	r3, [pc, #120]	; (8103b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103abe:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8103ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103ac6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103aca:	4a1a      	ldr	r2, [pc, #104]	; (8103b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103acc:	430b      	orrs	r3, r1
 8103ace:	6593      	str	r3, [r2, #88]	; 0x58
 8103ad0:	e003      	b.n	8103ada <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103ad6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8103ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103ae2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8103ae6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8103aea:	2300      	movs	r3, #0
 8103aec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8103af0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8103af4:	460b      	mov	r3, r1
 8103af6:	4313      	orrs	r3, r2
 8103af8:	d056      	beq.n	8103ba8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8103afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103afe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103b02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103b06:	d038      	beq.n	8103b7a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8103b08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103b0c:	d831      	bhi.n	8103b72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103b0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103b12:	d034      	beq.n	8103b7e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8103b14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103b18:	d82b      	bhi.n	8103b72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103b1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103b1e:	d01d      	beq.n	8103b5c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8103b20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103b24:	d825      	bhi.n	8103b72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103b26:	2b00      	cmp	r3, #0
 8103b28:	d006      	beq.n	8103b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8103b2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8103b2e:	d00a      	beq.n	8103b46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8103b30:	e01f      	b.n	8103b72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103b32:	bf00      	nop
 8103b34:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103b38:	4ba2      	ldr	r3, [pc, #648]	; (8103dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b3c:	4aa1      	ldr	r2, [pc, #644]	; (8103dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103b42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103b44:	e01c      	b.n	8103b80 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103b4a:	3308      	adds	r3, #8
 8103b4c:	2100      	movs	r1, #0
 8103b4e:	4618      	mov	r0, r3
 8103b50:	f001 fb1c 	bl	810518c <RCCEx_PLL2_Config>
 8103b54:	4603      	mov	r3, r0
 8103b56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8103b5a:	e011      	b.n	8103b80 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103b60:	3328      	adds	r3, #40	; 0x28
 8103b62:	2100      	movs	r1, #0
 8103b64:	4618      	mov	r0, r3
 8103b66:	f001 fbc3 	bl	81052f0 <RCCEx_PLL3_Config>
 8103b6a:	4603      	mov	r3, r0
 8103b6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103b70:	e006      	b.n	8103b80 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8103b72:	2301      	movs	r3, #1
 8103b74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103b78:	e002      	b.n	8103b80 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8103b7a:	bf00      	nop
 8103b7c:	e000      	b.n	8103b80 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8103b7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103b80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103b84:	2b00      	cmp	r3, #0
 8103b86:	d10b      	bne.n	8103ba0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8103b88:	4b8e      	ldr	r3, [pc, #568]	; (8103dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103b8c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8103b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103b94:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103b98:	4a8a      	ldr	r2, [pc, #552]	; (8103dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103b9a:	430b      	orrs	r3, r1
 8103b9c:	6593      	str	r3, [r2, #88]	; 0x58
 8103b9e:	e003      	b.n	8103ba8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103ba0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103ba4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8103ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103bb0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8103bb4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8103bb8:	2300      	movs	r3, #0
 8103bba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8103bbe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8103bc2:	460b      	mov	r3, r1
 8103bc4:	4313      	orrs	r3, r2
 8103bc6:	d03a      	beq.n	8103c3e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8103bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103bce:	2b30      	cmp	r3, #48	; 0x30
 8103bd0:	d01f      	beq.n	8103c12 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8103bd2:	2b30      	cmp	r3, #48	; 0x30
 8103bd4:	d819      	bhi.n	8103c0a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8103bd6:	2b20      	cmp	r3, #32
 8103bd8:	d00c      	beq.n	8103bf4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8103bda:	2b20      	cmp	r3, #32
 8103bdc:	d815      	bhi.n	8103c0a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8103bde:	2b00      	cmp	r3, #0
 8103be0:	d019      	beq.n	8103c16 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8103be2:	2b10      	cmp	r3, #16
 8103be4:	d111      	bne.n	8103c0a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103be6:	4b77      	ldr	r3, [pc, #476]	; (8103dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103bea:	4a76      	ldr	r2, [pc, #472]	; (8103dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103bf0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8103bf2:	e011      	b.n	8103c18 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103bf8:	3308      	adds	r3, #8
 8103bfa:	2102      	movs	r1, #2
 8103bfc:	4618      	mov	r0, r3
 8103bfe:	f001 fac5 	bl	810518c <RCCEx_PLL2_Config>
 8103c02:	4603      	mov	r3, r0
 8103c04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8103c08:	e006      	b.n	8103c18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8103c0a:	2301      	movs	r3, #1
 8103c0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103c10:	e002      	b.n	8103c18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8103c12:	bf00      	nop
 8103c14:	e000      	b.n	8103c18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8103c16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103c18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103c1c:	2b00      	cmp	r3, #0
 8103c1e:	d10a      	bne.n	8103c36 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8103c20:	4b68      	ldr	r3, [pc, #416]	; (8103dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103c24:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8103c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103c2e:	4a65      	ldr	r2, [pc, #404]	; (8103dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103c30:	430b      	orrs	r3, r1
 8103c32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8103c34:	e003      	b.n	8103c3e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103c3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8103c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103c46:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8103c4a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8103c4e:	2300      	movs	r3, #0
 8103c50:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8103c54:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8103c58:	460b      	mov	r3, r1
 8103c5a:	4313      	orrs	r3, r2
 8103c5c:	d051      	beq.n	8103d02 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8103c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103c64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103c68:	d035      	beq.n	8103cd6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8103c6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103c6e:	d82e      	bhi.n	8103cce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103c70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103c74:	d031      	beq.n	8103cda <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8103c76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103c7a:	d828      	bhi.n	8103cce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103c7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103c80:	d01a      	beq.n	8103cb8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8103c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103c86:	d822      	bhi.n	8103cce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103c88:	2b00      	cmp	r3, #0
 8103c8a:	d003      	beq.n	8103c94 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8103c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103c90:	d007      	beq.n	8103ca2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8103c92:	e01c      	b.n	8103cce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103c94:	4b4b      	ldr	r3, [pc, #300]	; (8103dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103c98:	4a4a      	ldr	r2, [pc, #296]	; (8103dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103c9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103c9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103ca0:	e01c      	b.n	8103cdc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103ca6:	3308      	adds	r3, #8
 8103ca8:	2100      	movs	r1, #0
 8103caa:	4618      	mov	r0, r3
 8103cac:	f001 fa6e 	bl	810518c <RCCEx_PLL2_Config>
 8103cb0:	4603      	mov	r3, r0
 8103cb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103cb6:	e011      	b.n	8103cdc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103cbc:	3328      	adds	r3, #40	; 0x28
 8103cbe:	2100      	movs	r1, #0
 8103cc0:	4618      	mov	r0, r3
 8103cc2:	f001 fb15 	bl	81052f0 <RCCEx_PLL3_Config>
 8103cc6:	4603      	mov	r3, r0
 8103cc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103ccc:	e006      	b.n	8103cdc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103cce:	2301      	movs	r3, #1
 8103cd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103cd4:	e002      	b.n	8103cdc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8103cd6:	bf00      	nop
 8103cd8:	e000      	b.n	8103cdc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8103cda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103cdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103ce0:	2b00      	cmp	r3, #0
 8103ce2:	d10a      	bne.n	8103cfa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8103ce4:	4b37      	ldr	r3, [pc, #220]	; (8103dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103ce8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8103cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103cf2:	4a34      	ldr	r2, [pc, #208]	; (8103dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103cf4:	430b      	orrs	r3, r1
 8103cf6:	6513      	str	r3, [r2, #80]	; 0x50
 8103cf8:	e003      	b.n	8103d02 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103cfe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8103d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103d0a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8103d0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8103d12:	2300      	movs	r3, #0
 8103d14:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8103d18:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8103d1c:	460b      	mov	r3, r1
 8103d1e:	4313      	orrs	r3, r2
 8103d20:	d056      	beq.n	8103dd0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8103d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103d26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103d28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103d2c:	d033      	beq.n	8103d96 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8103d2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103d32:	d82c      	bhi.n	8103d8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103d34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103d38:	d02f      	beq.n	8103d9a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8103d3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103d3e:	d826      	bhi.n	8103d8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103d40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103d44:	d02b      	beq.n	8103d9e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8103d46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103d4a:	d820      	bhi.n	8103d8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103d4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103d50:	d012      	beq.n	8103d78 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8103d52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103d56:	d81a      	bhi.n	8103d8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103d58:	2b00      	cmp	r3, #0
 8103d5a:	d022      	beq.n	8103da2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8103d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103d60:	d115      	bne.n	8103d8e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103d66:	3308      	adds	r3, #8
 8103d68:	2101      	movs	r1, #1
 8103d6a:	4618      	mov	r0, r3
 8103d6c:	f001 fa0e 	bl	810518c <RCCEx_PLL2_Config>
 8103d70:	4603      	mov	r3, r0
 8103d72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8103d76:	e015      	b.n	8103da4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103d7c:	3328      	adds	r3, #40	; 0x28
 8103d7e:	2101      	movs	r1, #1
 8103d80:	4618      	mov	r0, r3
 8103d82:	f001 fab5 	bl	81052f0 <RCCEx_PLL3_Config>
 8103d86:	4603      	mov	r3, r0
 8103d88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8103d8c:	e00a      	b.n	8103da4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103d8e:	2301      	movs	r3, #1
 8103d90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103d94:	e006      	b.n	8103da4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103d96:	bf00      	nop
 8103d98:	e004      	b.n	8103da4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103d9a:	bf00      	nop
 8103d9c:	e002      	b.n	8103da4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103d9e:	bf00      	nop
 8103da0:	e000      	b.n	8103da4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103da2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103da4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103da8:	2b00      	cmp	r3, #0
 8103daa:	d10d      	bne.n	8103dc8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8103dac:	4b05      	ldr	r3, [pc, #20]	; (8103dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103db0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8103db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103db8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103dba:	4a02      	ldr	r2, [pc, #8]	; (8103dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103dbc:	430b      	orrs	r3, r1
 8103dbe:	6513      	str	r3, [r2, #80]	; 0x50
 8103dc0:	e006      	b.n	8103dd0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8103dc2:	bf00      	nop
 8103dc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103dc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103dcc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8103dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103dd8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8103ddc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8103de0:	2300      	movs	r3, #0
 8103de2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8103de6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8103dea:	460b      	mov	r3, r1
 8103dec:	4313      	orrs	r3, r2
 8103dee:	d055      	beq.n	8103e9c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8103df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103df4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103df8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103dfc:	d033      	beq.n	8103e66 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8103dfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103e02:	d82c      	bhi.n	8103e5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103e08:	d02f      	beq.n	8103e6a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8103e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103e0e:	d826      	bhi.n	8103e5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103e10:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103e14:	d02b      	beq.n	8103e6e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8103e16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103e1a:	d820      	bhi.n	8103e5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103e1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103e20:	d012      	beq.n	8103e48 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8103e22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103e26:	d81a      	bhi.n	8103e5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103e28:	2b00      	cmp	r3, #0
 8103e2a:	d022      	beq.n	8103e72 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8103e2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103e30:	d115      	bne.n	8103e5e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103e36:	3308      	adds	r3, #8
 8103e38:	2101      	movs	r1, #1
 8103e3a:	4618      	mov	r0, r3
 8103e3c:	f001 f9a6 	bl	810518c <RCCEx_PLL2_Config>
 8103e40:	4603      	mov	r3, r0
 8103e42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8103e46:	e015      	b.n	8103e74 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103e4c:	3328      	adds	r3, #40	; 0x28
 8103e4e:	2101      	movs	r1, #1
 8103e50:	4618      	mov	r0, r3
 8103e52:	f001 fa4d 	bl	81052f0 <RCCEx_PLL3_Config>
 8103e56:	4603      	mov	r3, r0
 8103e58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8103e5c:	e00a      	b.n	8103e74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8103e5e:	2301      	movs	r3, #1
 8103e60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103e64:	e006      	b.n	8103e74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103e66:	bf00      	nop
 8103e68:	e004      	b.n	8103e74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103e6a:	bf00      	nop
 8103e6c:	e002      	b.n	8103e74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103e6e:	bf00      	nop
 8103e70:	e000      	b.n	8103e74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103e72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103e74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103e78:	2b00      	cmp	r3, #0
 8103e7a:	d10b      	bne.n	8103e94 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8103e7c:	4ba4      	ldr	r3, [pc, #656]	; (8104110 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103e80:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8103e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103e88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103e8c:	4aa0      	ldr	r2, [pc, #640]	; (8104110 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103e8e:	430b      	orrs	r3, r1
 8103e90:	6593      	str	r3, [r2, #88]	; 0x58
 8103e92:	e003      	b.n	8103e9c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103e98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8103e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103ea4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8103ea8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8103eac:	2300      	movs	r3, #0
 8103eae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8103eb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8103eb6:	460b      	mov	r3, r1
 8103eb8:	4313      	orrs	r3, r2
 8103eba:	d037      	beq.n	8103f2c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8103ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103ec2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103ec6:	d00e      	beq.n	8103ee6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8103ec8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103ecc:	d816      	bhi.n	8103efc <HAL_RCCEx_PeriphCLKConfig+0x700>
 8103ece:	2b00      	cmp	r3, #0
 8103ed0:	d018      	beq.n	8103f04 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8103ed2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103ed6:	d111      	bne.n	8103efc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103ed8:	4b8d      	ldr	r3, [pc, #564]	; (8104110 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103edc:	4a8c      	ldr	r2, [pc, #560]	; (8104110 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103ede:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103ee2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8103ee4:	e00f      	b.n	8103f06 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103eea:	3308      	adds	r3, #8
 8103eec:	2101      	movs	r1, #1
 8103eee:	4618      	mov	r0, r3
 8103ef0:	f001 f94c 	bl	810518c <RCCEx_PLL2_Config>
 8103ef4:	4603      	mov	r3, r0
 8103ef6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8103efa:	e004      	b.n	8103f06 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103efc:	2301      	movs	r3, #1
 8103efe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103f02:	e000      	b.n	8103f06 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8103f04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103f06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103f0a:	2b00      	cmp	r3, #0
 8103f0c:	d10a      	bne.n	8103f24 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8103f0e:	4b80      	ldr	r3, [pc, #512]	; (8104110 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103f12:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8103f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103f1c:	4a7c      	ldr	r2, [pc, #496]	; (8104110 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103f1e:	430b      	orrs	r3, r1
 8103f20:	6513      	str	r3, [r2, #80]	; 0x50
 8103f22:	e003      	b.n	8103f2c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103f28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8103f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103f34:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8103f38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8103f3c:	2300      	movs	r3, #0
 8103f3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8103f42:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8103f46:	460b      	mov	r3, r1
 8103f48:	4313      	orrs	r3, r2
 8103f4a:	d039      	beq.n	8103fc0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8103f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103f52:	2b03      	cmp	r3, #3
 8103f54:	d81c      	bhi.n	8103f90 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8103f56:	a201      	add	r2, pc, #4	; (adr r2, 8103f5c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8103f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103f5c:	08103f99 	.word	0x08103f99
 8103f60:	08103f6d 	.word	0x08103f6d
 8103f64:	08103f7b 	.word	0x08103f7b
 8103f68:	08103f99 	.word	0x08103f99
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103f6c:	4b68      	ldr	r3, [pc, #416]	; (8104110 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103f70:	4a67      	ldr	r2, [pc, #412]	; (8104110 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103f72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103f76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8103f78:	e00f      	b.n	8103f9a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103f7e:	3308      	adds	r3, #8
 8103f80:	2102      	movs	r1, #2
 8103f82:	4618      	mov	r0, r3
 8103f84:	f001 f902 	bl	810518c <RCCEx_PLL2_Config>
 8103f88:	4603      	mov	r3, r0
 8103f8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8103f8e:	e004      	b.n	8103f9a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8103f90:	2301      	movs	r3, #1
 8103f92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103f96:	e000      	b.n	8103f9a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8103f98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103f9e:	2b00      	cmp	r3, #0
 8103fa0:	d10a      	bne.n	8103fb8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8103fa2:	4b5b      	ldr	r3, [pc, #364]	; (8104110 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103fa6:	f023 0103 	bic.w	r1, r3, #3
 8103faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103fb0:	4a57      	ldr	r2, [pc, #348]	; (8104110 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103fb2:	430b      	orrs	r3, r1
 8103fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8103fb6:	e003      	b.n	8103fc0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103fb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103fbc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8103fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103fc8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8103fcc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8103fd0:	2300      	movs	r3, #0
 8103fd2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8103fd6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8103fda:	460b      	mov	r3, r1
 8103fdc:	4313      	orrs	r3, r2
 8103fde:	f000 809f 	beq.w	8104120 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8103fe2:	4b4c      	ldr	r3, [pc, #304]	; (8104114 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8103fe4:	681b      	ldr	r3, [r3, #0]
 8103fe6:	4a4b      	ldr	r2, [pc, #300]	; (8104114 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8103fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103fec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8103fee:	f7fe f8b7 	bl	8102160 <HAL_GetTick>
 8103ff2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103ff6:	e00b      	b.n	8104010 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8103ff8:	f7fe f8b2 	bl	8102160 <HAL_GetTick>
 8103ffc:	4602      	mov	r2, r0
 8103ffe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8104002:	1ad3      	subs	r3, r2, r3
 8104004:	2b64      	cmp	r3, #100	; 0x64
 8104006:	d903      	bls.n	8104010 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8104008:	2303      	movs	r3, #3
 810400a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810400e:	e005      	b.n	810401c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8104010:	4b40      	ldr	r3, [pc, #256]	; (8104114 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8104012:	681b      	ldr	r3, [r3, #0]
 8104014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104018:	2b00      	cmp	r3, #0
 810401a:	d0ed      	beq.n	8103ff8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 810401c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104020:	2b00      	cmp	r3, #0
 8104022:	d179      	bne.n	8104118 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8104024:	4b3a      	ldr	r3, [pc, #232]	; (8104110 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104026:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8104028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810402c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8104030:	4053      	eors	r3, r2
 8104032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8104036:	2b00      	cmp	r3, #0
 8104038:	d015      	beq.n	8104066 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810403a:	4b35      	ldr	r3, [pc, #212]	; (8104110 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810403c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810403e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8104042:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8104046:	4b32      	ldr	r3, [pc, #200]	; (8104110 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810404a:	4a31      	ldr	r2, [pc, #196]	; (8104110 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810404c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8104050:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8104052:	4b2f      	ldr	r3, [pc, #188]	; (8104110 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104056:	4a2e      	ldr	r2, [pc, #184]	; (8104110 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810405c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810405e:	4a2c      	ldr	r2, [pc, #176]	; (8104110 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104060:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104064:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8104066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810406a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810406e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104072:	d118      	bne.n	81040a6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8104074:	f7fe f874 	bl	8102160 <HAL_GetTick>
 8104078:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810407c:	e00d      	b.n	810409a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810407e:	f7fe f86f 	bl	8102160 <HAL_GetTick>
 8104082:	4602      	mov	r2, r0
 8104084:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8104088:	1ad2      	subs	r2, r2, r3
 810408a:	f241 3388 	movw	r3, #5000	; 0x1388
 810408e:	429a      	cmp	r2, r3
 8104090:	d903      	bls.n	810409a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8104092:	2303      	movs	r3, #3
 8104094:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8104098:	e005      	b.n	81040a6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810409a:	4b1d      	ldr	r3, [pc, #116]	; (8104110 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810409c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810409e:	f003 0302 	and.w	r3, r3, #2
 81040a2:	2b00      	cmp	r3, #0
 81040a4:	d0eb      	beq.n	810407e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 81040a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81040aa:	2b00      	cmp	r3, #0
 81040ac:	d12b      	bne.n	8104106 <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81040ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81040b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81040b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81040ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81040be:	d110      	bne.n	81040e2 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 81040c0:	4b13      	ldr	r3, [pc, #76]	; (8104110 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81040c2:	691b      	ldr	r3, [r3, #16]
 81040c4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 81040c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81040cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81040d0:	091b      	lsrs	r3, r3, #4
 81040d2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81040d6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 81040da:	4a0d      	ldr	r2, [pc, #52]	; (8104110 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81040dc:	430b      	orrs	r3, r1
 81040de:	6113      	str	r3, [r2, #16]
 81040e0:	e005      	b.n	81040ee <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 81040e2:	4b0b      	ldr	r3, [pc, #44]	; (8104110 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81040e4:	691b      	ldr	r3, [r3, #16]
 81040e6:	4a0a      	ldr	r2, [pc, #40]	; (8104110 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81040e8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 81040ec:	6113      	str	r3, [r2, #16]
 81040ee:	4b08      	ldr	r3, [pc, #32]	; (8104110 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81040f0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 81040f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81040f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81040fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81040fe:	4a04      	ldr	r2, [pc, #16]	; (8104110 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104100:	430b      	orrs	r3, r1
 8104102:	6713      	str	r3, [r2, #112]	; 0x70
 8104104:	e00c      	b.n	8104120 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8104106:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810410a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 810410e:	e007      	b.n	8104120 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8104110:	58024400 	.word	0x58024400
 8104114:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104118:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810411c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8104120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104128:	f002 0301 	and.w	r3, r2, #1
 810412c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8104130:	2300      	movs	r3, #0
 8104132:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8104136:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 810413a:	460b      	mov	r3, r1
 810413c:	4313      	orrs	r3, r2
 810413e:	f000 8089 	beq.w	8104254 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8104142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104146:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104148:	2b28      	cmp	r3, #40	; 0x28
 810414a:	d86b      	bhi.n	8104224 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 810414c:	a201      	add	r2, pc, #4	; (adr r2, 8104154 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 810414e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104152:	bf00      	nop
 8104154:	0810422d 	.word	0x0810422d
 8104158:	08104225 	.word	0x08104225
 810415c:	08104225 	.word	0x08104225
 8104160:	08104225 	.word	0x08104225
 8104164:	08104225 	.word	0x08104225
 8104168:	08104225 	.word	0x08104225
 810416c:	08104225 	.word	0x08104225
 8104170:	08104225 	.word	0x08104225
 8104174:	081041f9 	.word	0x081041f9
 8104178:	08104225 	.word	0x08104225
 810417c:	08104225 	.word	0x08104225
 8104180:	08104225 	.word	0x08104225
 8104184:	08104225 	.word	0x08104225
 8104188:	08104225 	.word	0x08104225
 810418c:	08104225 	.word	0x08104225
 8104190:	08104225 	.word	0x08104225
 8104194:	0810420f 	.word	0x0810420f
 8104198:	08104225 	.word	0x08104225
 810419c:	08104225 	.word	0x08104225
 81041a0:	08104225 	.word	0x08104225
 81041a4:	08104225 	.word	0x08104225
 81041a8:	08104225 	.word	0x08104225
 81041ac:	08104225 	.word	0x08104225
 81041b0:	08104225 	.word	0x08104225
 81041b4:	0810422d 	.word	0x0810422d
 81041b8:	08104225 	.word	0x08104225
 81041bc:	08104225 	.word	0x08104225
 81041c0:	08104225 	.word	0x08104225
 81041c4:	08104225 	.word	0x08104225
 81041c8:	08104225 	.word	0x08104225
 81041cc:	08104225 	.word	0x08104225
 81041d0:	08104225 	.word	0x08104225
 81041d4:	0810422d 	.word	0x0810422d
 81041d8:	08104225 	.word	0x08104225
 81041dc:	08104225 	.word	0x08104225
 81041e0:	08104225 	.word	0x08104225
 81041e4:	08104225 	.word	0x08104225
 81041e8:	08104225 	.word	0x08104225
 81041ec:	08104225 	.word	0x08104225
 81041f0:	08104225 	.word	0x08104225
 81041f4:	0810422d 	.word	0x0810422d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81041f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81041fc:	3308      	adds	r3, #8
 81041fe:	2101      	movs	r1, #1
 8104200:	4618      	mov	r0, r3
 8104202:	f000 ffc3 	bl	810518c <RCCEx_PLL2_Config>
 8104206:	4603      	mov	r3, r0
 8104208:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810420c:	e00f      	b.n	810422e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810420e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104212:	3328      	adds	r3, #40	; 0x28
 8104214:	2101      	movs	r1, #1
 8104216:	4618      	mov	r0, r3
 8104218:	f001 f86a 	bl	81052f0 <RCCEx_PLL3_Config>
 810421c:	4603      	mov	r3, r0
 810421e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8104222:	e004      	b.n	810422e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104224:	2301      	movs	r3, #1
 8104226:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810422a:	e000      	b.n	810422e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 810422c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810422e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104232:	2b00      	cmp	r3, #0
 8104234:	d10a      	bne.n	810424c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8104236:	4bbf      	ldr	r3, [pc, #764]	; (8104534 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810423a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 810423e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104242:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104244:	4abb      	ldr	r2, [pc, #748]	; (8104534 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104246:	430b      	orrs	r3, r1
 8104248:	6553      	str	r3, [r2, #84]	; 0x54
 810424a:	e003      	b.n	8104254 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810424c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104250:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8104254:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104258:	e9d3 2300 	ldrd	r2, r3, [r3]
 810425c:	f002 0302 	and.w	r3, r2, #2
 8104260:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8104264:	2300      	movs	r3, #0
 8104266:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 810426a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 810426e:	460b      	mov	r3, r1
 8104270:	4313      	orrs	r3, r2
 8104272:	d041      	beq.n	81042f8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8104274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104278:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810427a:	2b05      	cmp	r3, #5
 810427c:	d824      	bhi.n	81042c8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 810427e:	a201      	add	r2, pc, #4	; (adr r2, 8104284 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8104280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104284:	081042d1 	.word	0x081042d1
 8104288:	0810429d 	.word	0x0810429d
 810428c:	081042b3 	.word	0x081042b3
 8104290:	081042d1 	.word	0x081042d1
 8104294:	081042d1 	.word	0x081042d1
 8104298:	081042d1 	.word	0x081042d1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810429c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81042a0:	3308      	adds	r3, #8
 81042a2:	2101      	movs	r1, #1
 81042a4:	4618      	mov	r0, r3
 81042a6:	f000 ff71 	bl	810518c <RCCEx_PLL2_Config>
 81042aa:	4603      	mov	r3, r0
 81042ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81042b0:	e00f      	b.n	81042d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81042b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81042b6:	3328      	adds	r3, #40	; 0x28
 81042b8:	2101      	movs	r1, #1
 81042ba:	4618      	mov	r0, r3
 81042bc:	f001 f818 	bl	81052f0 <RCCEx_PLL3_Config>
 81042c0:	4603      	mov	r3, r0
 81042c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81042c6:	e004      	b.n	81042d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81042c8:	2301      	movs	r3, #1
 81042ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81042ce:	e000      	b.n	81042d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 81042d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81042d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81042d6:	2b00      	cmp	r3, #0
 81042d8:	d10a      	bne.n	81042f0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81042da:	4b96      	ldr	r3, [pc, #600]	; (8104534 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81042dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81042de:	f023 0107 	bic.w	r1, r3, #7
 81042e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81042e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81042e8:	4a92      	ldr	r2, [pc, #584]	; (8104534 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81042ea:	430b      	orrs	r3, r1
 81042ec:	6553      	str	r3, [r2, #84]	; 0x54
 81042ee:	e003      	b.n	81042f8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81042f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81042f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81042f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81042fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104300:	f002 0304 	and.w	r3, r2, #4
 8104304:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8104308:	2300      	movs	r3, #0
 810430a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 810430e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8104312:	460b      	mov	r3, r1
 8104314:	4313      	orrs	r3, r2
 8104316:	d044      	beq.n	81043a2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8104318:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810431c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8104320:	2b05      	cmp	r3, #5
 8104322:	d825      	bhi.n	8104370 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8104324:	a201      	add	r2, pc, #4	; (adr r2, 810432c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8104326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810432a:	bf00      	nop
 810432c:	08104379 	.word	0x08104379
 8104330:	08104345 	.word	0x08104345
 8104334:	0810435b 	.word	0x0810435b
 8104338:	08104379 	.word	0x08104379
 810433c:	08104379 	.word	0x08104379
 8104340:	08104379 	.word	0x08104379
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104348:	3308      	adds	r3, #8
 810434a:	2101      	movs	r1, #1
 810434c:	4618      	mov	r0, r3
 810434e:	f000 ff1d 	bl	810518c <RCCEx_PLL2_Config>
 8104352:	4603      	mov	r3, r0
 8104354:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8104358:	e00f      	b.n	810437a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810435a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810435e:	3328      	adds	r3, #40	; 0x28
 8104360:	2101      	movs	r1, #1
 8104362:	4618      	mov	r0, r3
 8104364:	f000 ffc4 	bl	81052f0 <RCCEx_PLL3_Config>
 8104368:	4603      	mov	r3, r0
 810436a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810436e:	e004      	b.n	810437a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104370:	2301      	movs	r3, #1
 8104372:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104376:	e000      	b.n	810437a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8104378:	bf00      	nop
    }

    if (ret == HAL_OK)
 810437a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810437e:	2b00      	cmp	r3, #0
 8104380:	d10b      	bne.n	810439a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8104382:	4b6c      	ldr	r3, [pc, #432]	; (8104534 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104386:	f023 0107 	bic.w	r1, r3, #7
 810438a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810438e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8104392:	4a68      	ldr	r2, [pc, #416]	; (8104534 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104394:	430b      	orrs	r3, r1
 8104396:	6593      	str	r3, [r2, #88]	; 0x58
 8104398:	e003      	b.n	81043a2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810439a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810439e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81043a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81043a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81043aa:	f002 0320 	and.w	r3, r2, #32
 81043ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 81043b2:	2300      	movs	r3, #0
 81043b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 81043b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 81043bc:	460b      	mov	r3, r1
 81043be:	4313      	orrs	r3, r2
 81043c0:	d055      	beq.n	810446e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 81043c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81043c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81043ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81043ce:	d033      	beq.n	8104438 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 81043d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81043d4:	d82c      	bhi.n	8104430 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81043d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81043da:	d02f      	beq.n	810443c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 81043dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81043e0:	d826      	bhi.n	8104430 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81043e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81043e6:	d02b      	beq.n	8104440 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 81043e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81043ec:	d820      	bhi.n	8104430 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81043ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81043f2:	d012      	beq.n	810441a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 81043f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81043f8:	d81a      	bhi.n	8104430 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81043fa:	2b00      	cmp	r3, #0
 81043fc:	d022      	beq.n	8104444 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 81043fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104402:	d115      	bne.n	8104430 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104404:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104408:	3308      	adds	r3, #8
 810440a:	2100      	movs	r1, #0
 810440c:	4618      	mov	r0, r3
 810440e:	f000 febd 	bl	810518c <RCCEx_PLL2_Config>
 8104412:	4603      	mov	r3, r0
 8104414:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8104418:	e015      	b.n	8104446 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810441a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810441e:	3328      	adds	r3, #40	; 0x28
 8104420:	2102      	movs	r1, #2
 8104422:	4618      	mov	r0, r3
 8104424:	f000 ff64 	bl	81052f0 <RCCEx_PLL3_Config>
 8104428:	4603      	mov	r3, r0
 810442a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810442e:	e00a      	b.n	8104446 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104430:	2301      	movs	r3, #1
 8104432:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104436:	e006      	b.n	8104446 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8104438:	bf00      	nop
 810443a:	e004      	b.n	8104446 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 810443c:	bf00      	nop
 810443e:	e002      	b.n	8104446 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8104440:	bf00      	nop
 8104442:	e000      	b.n	8104446 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8104444:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104446:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810444a:	2b00      	cmp	r3, #0
 810444c:	d10b      	bne.n	8104466 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810444e:	4b39      	ldr	r3, [pc, #228]	; (8104534 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104452:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8104456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810445a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810445e:	4a35      	ldr	r2, [pc, #212]	; (8104534 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104460:	430b      	orrs	r3, r1
 8104462:	6553      	str	r3, [r2, #84]	; 0x54
 8104464:	e003      	b.n	810446e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104466:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810446a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810446e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104476:	f002 0340 	and.w	r3, r2, #64	; 0x40
 810447a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 810447e:	2300      	movs	r3, #0
 8104480:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8104484:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8104488:	460b      	mov	r3, r1
 810448a:	4313      	orrs	r3, r2
 810448c:	d058      	beq.n	8104540 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 810448e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104492:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8104496:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810449a:	d033      	beq.n	8104504 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 810449c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81044a0:	d82c      	bhi.n	81044fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81044a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81044a6:	d02f      	beq.n	8104508 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 81044a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81044ac:	d826      	bhi.n	81044fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81044ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81044b2:	d02b      	beq.n	810450c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 81044b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81044b8:	d820      	bhi.n	81044fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81044ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81044be:	d012      	beq.n	81044e6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 81044c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81044c4:	d81a      	bhi.n	81044fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81044c6:	2b00      	cmp	r3, #0
 81044c8:	d022      	beq.n	8104510 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 81044ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81044ce:	d115      	bne.n	81044fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81044d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81044d4:	3308      	adds	r3, #8
 81044d6:	2100      	movs	r1, #0
 81044d8:	4618      	mov	r0, r3
 81044da:	f000 fe57 	bl	810518c <RCCEx_PLL2_Config>
 81044de:	4603      	mov	r3, r0
 81044e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81044e4:	e015      	b.n	8104512 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81044e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81044ea:	3328      	adds	r3, #40	; 0x28
 81044ec:	2102      	movs	r1, #2
 81044ee:	4618      	mov	r0, r3
 81044f0:	f000 fefe 	bl	81052f0 <RCCEx_PLL3_Config>
 81044f4:	4603      	mov	r3, r0
 81044f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81044fa:	e00a      	b.n	8104512 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81044fc:	2301      	movs	r3, #1
 81044fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104502:	e006      	b.n	8104512 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8104504:	bf00      	nop
 8104506:	e004      	b.n	8104512 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8104508:	bf00      	nop
 810450a:	e002      	b.n	8104512 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810450c:	bf00      	nop
 810450e:	e000      	b.n	8104512 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8104510:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104512:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104516:	2b00      	cmp	r3, #0
 8104518:	d10e      	bne.n	8104538 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810451a:	4b06      	ldr	r3, [pc, #24]	; (8104534 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810451c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810451e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8104522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104526:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810452a:	4a02      	ldr	r2, [pc, #8]	; (8104534 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810452c:	430b      	orrs	r3, r1
 810452e:	6593      	str	r3, [r2, #88]	; 0x58
 8104530:	e006      	b.n	8104540 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8104532:	bf00      	nop
 8104534:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104538:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810453c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8104540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104548:	f002 0380 	and.w	r3, r2, #128	; 0x80
 810454c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8104550:	2300      	movs	r3, #0
 8104552:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8104556:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 810455a:	460b      	mov	r3, r1
 810455c:	4313      	orrs	r3, r2
 810455e:	d055      	beq.n	810460c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8104560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104564:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8104568:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810456c:	d033      	beq.n	81045d6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 810456e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8104572:	d82c      	bhi.n	81045ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8104574:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104578:	d02f      	beq.n	81045da <HAL_RCCEx_PeriphCLKConfig+0xdde>
 810457a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810457e:	d826      	bhi.n	81045ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8104580:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8104584:	d02b      	beq.n	81045de <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8104586:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810458a:	d820      	bhi.n	81045ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810458c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104590:	d012      	beq.n	81045b8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8104592:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104596:	d81a      	bhi.n	81045ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8104598:	2b00      	cmp	r3, #0
 810459a:	d022      	beq.n	81045e2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 810459c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81045a0:	d115      	bne.n	81045ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81045a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81045a6:	3308      	adds	r3, #8
 81045a8:	2100      	movs	r1, #0
 81045aa:	4618      	mov	r0, r3
 81045ac:	f000 fdee 	bl	810518c <RCCEx_PLL2_Config>
 81045b0:	4603      	mov	r3, r0
 81045b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81045b6:	e015      	b.n	81045e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81045b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81045bc:	3328      	adds	r3, #40	; 0x28
 81045be:	2102      	movs	r1, #2
 81045c0:	4618      	mov	r0, r3
 81045c2:	f000 fe95 	bl	81052f0 <RCCEx_PLL3_Config>
 81045c6:	4603      	mov	r3, r0
 81045c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81045cc:	e00a      	b.n	81045e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81045ce:	2301      	movs	r3, #1
 81045d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81045d4:	e006      	b.n	81045e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81045d6:	bf00      	nop
 81045d8:	e004      	b.n	81045e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81045da:	bf00      	nop
 81045dc:	e002      	b.n	81045e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81045de:	bf00      	nop
 81045e0:	e000      	b.n	81045e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81045e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81045e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81045e8:	2b00      	cmp	r3, #0
 81045ea:	d10b      	bne.n	8104604 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81045ec:	4ba1      	ldr	r3, [pc, #644]	; (8104874 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81045ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81045f0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 81045f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81045f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81045fc:	4a9d      	ldr	r2, [pc, #628]	; (8104874 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81045fe:	430b      	orrs	r3, r1
 8104600:	6593      	str	r3, [r2, #88]	; 0x58
 8104602:	e003      	b.n	810460c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104604:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104608:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810460c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104614:	f002 0308 	and.w	r3, r2, #8
 8104618:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 810461c:	2300      	movs	r3, #0
 810461e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8104622:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8104626:	460b      	mov	r3, r1
 8104628:	4313      	orrs	r3, r2
 810462a:	d01e      	beq.n	810466a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 810462c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104638:	d10c      	bne.n	8104654 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810463a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810463e:	3328      	adds	r3, #40	; 0x28
 8104640:	2102      	movs	r1, #2
 8104642:	4618      	mov	r0, r3
 8104644:	f000 fe54 	bl	81052f0 <RCCEx_PLL3_Config>
 8104648:	4603      	mov	r3, r0
 810464a:	2b00      	cmp	r3, #0
 810464c:	d002      	beq.n	8104654 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 810464e:	2301      	movs	r3, #1
 8104650:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8104654:	4b87      	ldr	r3, [pc, #540]	; (8104874 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104658:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810465c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104664:	4a83      	ldr	r2, [pc, #524]	; (8104874 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104666:	430b      	orrs	r3, r1
 8104668:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810466a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810466e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104672:	f002 0310 	and.w	r3, r2, #16
 8104676:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 810467a:	2300      	movs	r3, #0
 810467c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8104680:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8104684:	460b      	mov	r3, r1
 8104686:	4313      	orrs	r3, r2
 8104688:	d01e      	beq.n	81046c8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 810468a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810468e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8104692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104696:	d10c      	bne.n	81046b2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8104698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810469c:	3328      	adds	r3, #40	; 0x28
 810469e:	2102      	movs	r1, #2
 81046a0:	4618      	mov	r0, r3
 81046a2:	f000 fe25 	bl	81052f0 <RCCEx_PLL3_Config>
 81046a6:	4603      	mov	r3, r0
 81046a8:	2b00      	cmp	r3, #0
 81046aa:	d002      	beq.n	81046b2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 81046ac:	2301      	movs	r3, #1
 81046ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81046b2:	4b70      	ldr	r3, [pc, #448]	; (8104874 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81046b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81046b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 81046ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81046be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81046c2:	4a6c      	ldr	r2, [pc, #432]	; (8104874 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81046c4:	430b      	orrs	r3, r1
 81046c6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81046c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81046cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81046d0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 81046d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 81046d8:	2300      	movs	r3, #0
 81046da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 81046de:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 81046e2:	460b      	mov	r3, r1
 81046e4:	4313      	orrs	r3, r2
 81046e6:	d03e      	beq.n	8104766 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 81046e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81046ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81046f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81046f4:	d022      	beq.n	810473c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 81046f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81046fa:	d81b      	bhi.n	8104734 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 81046fc:	2b00      	cmp	r3, #0
 81046fe:	d003      	beq.n	8104708 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8104700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104704:	d00b      	beq.n	810471e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8104706:	e015      	b.n	8104734 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104708:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810470c:	3308      	adds	r3, #8
 810470e:	2100      	movs	r1, #0
 8104710:	4618      	mov	r0, r3
 8104712:	f000 fd3b 	bl	810518c <RCCEx_PLL2_Config>
 8104716:	4603      	mov	r3, r0
 8104718:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 810471c:	e00f      	b.n	810473e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810471e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104722:	3328      	adds	r3, #40	; 0x28
 8104724:	2102      	movs	r1, #2
 8104726:	4618      	mov	r0, r3
 8104728:	f000 fde2 	bl	81052f0 <RCCEx_PLL3_Config>
 810472c:	4603      	mov	r3, r0
 810472e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8104732:	e004      	b.n	810473e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104734:	2301      	movs	r3, #1
 8104736:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810473a:	e000      	b.n	810473e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 810473c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810473e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104742:	2b00      	cmp	r3, #0
 8104744:	d10b      	bne.n	810475e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8104746:	4b4b      	ldr	r3, [pc, #300]	; (8104874 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810474a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 810474e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104752:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8104756:	4a47      	ldr	r2, [pc, #284]	; (8104874 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104758:	430b      	orrs	r3, r1
 810475a:	6593      	str	r3, [r2, #88]	; 0x58
 810475c:	e003      	b.n	8104766 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810475e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104762:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8104766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810476a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810476e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8104772:	67bb      	str	r3, [r7, #120]	; 0x78
 8104774:	2300      	movs	r3, #0
 8104776:	67fb      	str	r3, [r7, #124]	; 0x7c
 8104778:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 810477c:	460b      	mov	r3, r1
 810477e:	4313      	orrs	r3, r2
 8104780:	d03b      	beq.n	81047fa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8104782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810478a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810478e:	d01f      	beq.n	81047d0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8104790:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104794:	d818      	bhi.n	81047c8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8104796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810479a:	d003      	beq.n	81047a4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 810479c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81047a0:	d007      	beq.n	81047b2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 81047a2:	e011      	b.n	81047c8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81047a4:	4b33      	ldr	r3, [pc, #204]	; (8104874 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81047a8:	4a32      	ldr	r2, [pc, #200]	; (8104874 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81047aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81047ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 81047b0:	e00f      	b.n	81047d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81047b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81047b6:	3328      	adds	r3, #40	; 0x28
 81047b8:	2101      	movs	r1, #1
 81047ba:	4618      	mov	r0, r3
 81047bc:	f000 fd98 	bl	81052f0 <RCCEx_PLL3_Config>
 81047c0:	4603      	mov	r3, r0
 81047c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 81047c6:	e004      	b.n	81047d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81047c8:	2301      	movs	r3, #1
 81047ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81047ce:	e000      	b.n	81047d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 81047d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81047d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81047d6:	2b00      	cmp	r3, #0
 81047d8:	d10b      	bne.n	81047f2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81047da:	4b26      	ldr	r3, [pc, #152]	; (8104874 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81047dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81047de:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 81047e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81047e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81047ea:	4a22      	ldr	r2, [pc, #136]	; (8104874 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81047ec:	430b      	orrs	r3, r1
 81047ee:	6553      	str	r3, [r2, #84]	; 0x54
 81047f0:	e003      	b.n	81047fa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81047f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81047f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81047fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81047fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104802:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8104806:	673b      	str	r3, [r7, #112]	; 0x70
 8104808:	2300      	movs	r3, #0
 810480a:	677b      	str	r3, [r7, #116]	; 0x74
 810480c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8104810:	460b      	mov	r3, r1
 8104812:	4313      	orrs	r3, r2
 8104814:	d034      	beq.n	8104880 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8104816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810481a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810481c:	2b00      	cmp	r3, #0
 810481e:	d003      	beq.n	8104828 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8104820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104824:	d007      	beq.n	8104836 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8104826:	e011      	b.n	810484c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104828:	4b12      	ldr	r3, [pc, #72]	; (8104874 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810482a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810482c:	4a11      	ldr	r2, [pc, #68]	; (8104874 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810482e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104832:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8104834:	e00e      	b.n	8104854 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810483a:	3308      	adds	r3, #8
 810483c:	2102      	movs	r1, #2
 810483e:	4618      	mov	r0, r3
 8104840:	f000 fca4 	bl	810518c <RCCEx_PLL2_Config>
 8104844:	4603      	mov	r3, r0
 8104846:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810484a:	e003      	b.n	8104854 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 810484c:	2301      	movs	r3, #1
 810484e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104852:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104854:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104858:	2b00      	cmp	r3, #0
 810485a:	d10d      	bne.n	8104878 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810485c:	4b05      	ldr	r3, [pc, #20]	; (8104874 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810485e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104860:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8104864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810486a:	4a02      	ldr	r2, [pc, #8]	; (8104874 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810486c:	430b      	orrs	r3, r1
 810486e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8104870:	e006      	b.n	8104880 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8104872:	bf00      	nop
 8104874:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104878:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810487c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8104880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104888:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 810488c:	66bb      	str	r3, [r7, #104]	; 0x68
 810488e:	2300      	movs	r3, #0
 8104890:	66fb      	str	r3, [r7, #108]	; 0x6c
 8104892:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8104896:	460b      	mov	r3, r1
 8104898:	4313      	orrs	r3, r2
 810489a:	d00c      	beq.n	81048b6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810489c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81048a0:	3328      	adds	r3, #40	; 0x28
 81048a2:	2102      	movs	r1, #2
 81048a4:	4618      	mov	r0, r3
 81048a6:	f000 fd23 	bl	81052f0 <RCCEx_PLL3_Config>
 81048aa:	4603      	mov	r3, r0
 81048ac:	2b00      	cmp	r3, #0
 81048ae:	d002      	beq.n	81048b6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 81048b0:	2301      	movs	r3, #1
 81048b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81048b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81048ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 81048be:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 81048c2:	663b      	str	r3, [r7, #96]	; 0x60
 81048c4:	2300      	movs	r3, #0
 81048c6:	667b      	str	r3, [r7, #100]	; 0x64
 81048c8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 81048cc:	460b      	mov	r3, r1
 81048ce:	4313      	orrs	r3, r2
 81048d0:	d038      	beq.n	8104944 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 81048d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81048d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81048da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81048de:	d018      	beq.n	8104912 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 81048e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81048e4:	d811      	bhi.n	810490a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 81048e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81048ea:	d014      	beq.n	8104916 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 81048ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81048f0:	d80b      	bhi.n	810490a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 81048f2:	2b00      	cmp	r3, #0
 81048f4:	d011      	beq.n	810491a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 81048f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81048fa:	d106      	bne.n	810490a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81048fc:	4bc3      	ldr	r3, [pc, #780]	; (8104c0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81048fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104900:	4ac2      	ldr	r2, [pc, #776]	; (8104c0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104906:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8104908:	e008      	b.n	810491c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810490a:	2301      	movs	r3, #1
 810490c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104910:	e004      	b.n	810491c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8104912:	bf00      	nop
 8104914:	e002      	b.n	810491c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8104916:	bf00      	nop
 8104918:	e000      	b.n	810491c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810491a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810491c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104920:	2b00      	cmp	r3, #0
 8104922:	d10b      	bne.n	810493c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8104924:	4bb9      	ldr	r3, [pc, #740]	; (8104c0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104928:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 810492c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104930:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104934:	4ab5      	ldr	r2, [pc, #724]	; (8104c0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104936:	430b      	orrs	r3, r1
 8104938:	6553      	str	r3, [r2, #84]	; 0x54
 810493a:	e003      	b.n	8104944 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810493c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104940:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8104944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104948:	e9d3 2300 	ldrd	r2, r3, [r3]
 810494c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8104950:	65bb      	str	r3, [r7, #88]	; 0x58
 8104952:	2300      	movs	r3, #0
 8104954:	65fb      	str	r3, [r7, #92]	; 0x5c
 8104956:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 810495a:	460b      	mov	r3, r1
 810495c:	4313      	orrs	r3, r2
 810495e:	d009      	beq.n	8104974 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8104960:	4baa      	ldr	r3, [pc, #680]	; (8104c0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104964:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8104968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810496c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810496e:	4aa7      	ldr	r2, [pc, #668]	; (8104c0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104970:	430b      	orrs	r3, r1
 8104972:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8104974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104978:	e9d3 2300 	ldrd	r2, r3, [r3]
 810497c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8104980:	653b      	str	r3, [r7, #80]	; 0x50
 8104982:	2300      	movs	r3, #0
 8104984:	657b      	str	r3, [r7, #84]	; 0x54
 8104986:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 810498a:	460b      	mov	r3, r1
 810498c:	4313      	orrs	r3, r2
 810498e:	d00a      	beq.n	81049a6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8104990:	4b9e      	ldr	r3, [pc, #632]	; (8104c0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104992:	691b      	ldr	r3, [r3, #16]
 8104994:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8104998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810499c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 81049a0:	4a9a      	ldr	r2, [pc, #616]	; (8104c0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81049a2:	430b      	orrs	r3, r1
 81049a4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81049a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81049aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81049ae:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 81049b2:	64bb      	str	r3, [r7, #72]	; 0x48
 81049b4:	2300      	movs	r3, #0
 81049b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 81049b8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 81049bc:	460b      	mov	r3, r1
 81049be:	4313      	orrs	r3, r2
 81049c0:	d009      	beq.n	81049d6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81049c2:	4b92      	ldr	r3, [pc, #584]	; (8104c0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81049c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81049c6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 81049ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81049ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81049d0:	4a8e      	ldr	r2, [pc, #568]	; (8104c0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81049d2:	430b      	orrs	r3, r1
 81049d4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81049d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81049da:	e9d3 2300 	ldrd	r2, r3, [r3]
 81049de:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 81049e2:	643b      	str	r3, [r7, #64]	; 0x40
 81049e4:	2300      	movs	r3, #0
 81049e6:	647b      	str	r3, [r7, #68]	; 0x44
 81049e8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 81049ec:	460b      	mov	r3, r1
 81049ee:	4313      	orrs	r3, r2
 81049f0:	d00e      	beq.n	8104a10 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81049f2:	4b86      	ldr	r3, [pc, #536]	; (8104c0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81049f4:	691b      	ldr	r3, [r3, #16]
 81049f6:	4a85      	ldr	r2, [pc, #532]	; (8104c0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81049f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 81049fc:	6113      	str	r3, [r2, #16]
 81049fe:	4b83      	ldr	r3, [pc, #524]	; (8104c0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104a00:	6919      	ldr	r1, [r3, #16]
 8104a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104a06:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8104a0a:	4a80      	ldr	r2, [pc, #512]	; (8104c0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104a0c:	430b      	orrs	r3, r1
 8104a0e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8104a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104a18:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8104a1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8104a1e:	2300      	movs	r3, #0
 8104a20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104a22:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8104a26:	460b      	mov	r3, r1
 8104a28:	4313      	orrs	r3, r2
 8104a2a:	d009      	beq.n	8104a40 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8104a2c:	4b77      	ldr	r3, [pc, #476]	; (8104c0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104a30:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8104a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104a3a:	4a74      	ldr	r2, [pc, #464]	; (8104c0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104a3c:	430b      	orrs	r3, r1
 8104a3e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8104a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104a48:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8104a4c:	633b      	str	r3, [r7, #48]	; 0x30
 8104a4e:	2300      	movs	r3, #0
 8104a50:	637b      	str	r3, [r7, #52]	; 0x34
 8104a52:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8104a56:	460b      	mov	r3, r1
 8104a58:	4313      	orrs	r3, r2
 8104a5a:	d00a      	beq.n	8104a72 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8104a5c:	4b6b      	ldr	r3, [pc, #428]	; (8104c0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104a60:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8104a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8104a6c:	4a67      	ldr	r2, [pc, #412]	; (8104c0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104a6e:	430b      	orrs	r3, r1
 8104a70:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8104a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104a7a:	2100      	movs	r1, #0
 8104a7c:	62b9      	str	r1, [r7, #40]	; 0x28
 8104a7e:	f003 0301 	and.w	r3, r3, #1
 8104a82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8104a84:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8104a88:	460b      	mov	r3, r1
 8104a8a:	4313      	orrs	r3, r2
 8104a8c:	d011      	beq.n	8104ab2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104a92:	3308      	adds	r3, #8
 8104a94:	2100      	movs	r1, #0
 8104a96:	4618      	mov	r0, r3
 8104a98:	f000 fb78 	bl	810518c <RCCEx_PLL2_Config>
 8104a9c:	4603      	mov	r3, r0
 8104a9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8104aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104aa6:	2b00      	cmp	r3, #0
 8104aa8:	d003      	beq.n	8104ab2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104aae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8104ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104aba:	2100      	movs	r1, #0
 8104abc:	6239      	str	r1, [r7, #32]
 8104abe:	f003 0302 	and.w	r3, r3, #2
 8104ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8104ac4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8104ac8:	460b      	mov	r3, r1
 8104aca:	4313      	orrs	r3, r2
 8104acc:	d011      	beq.n	8104af2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104ad2:	3308      	adds	r3, #8
 8104ad4:	2101      	movs	r1, #1
 8104ad6:	4618      	mov	r0, r3
 8104ad8:	f000 fb58 	bl	810518c <RCCEx_PLL2_Config>
 8104adc:	4603      	mov	r3, r0
 8104ade:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8104ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104ae6:	2b00      	cmp	r3, #0
 8104ae8:	d003      	beq.n	8104af2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104aea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104aee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8104af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104afa:	2100      	movs	r1, #0
 8104afc:	61b9      	str	r1, [r7, #24]
 8104afe:	f003 0304 	and.w	r3, r3, #4
 8104b02:	61fb      	str	r3, [r7, #28]
 8104b04:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8104b08:	460b      	mov	r3, r1
 8104b0a:	4313      	orrs	r3, r2
 8104b0c:	d011      	beq.n	8104b32 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104b12:	3308      	adds	r3, #8
 8104b14:	2102      	movs	r1, #2
 8104b16:	4618      	mov	r0, r3
 8104b18:	f000 fb38 	bl	810518c <RCCEx_PLL2_Config>
 8104b1c:	4603      	mov	r3, r0
 8104b1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8104b22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104b26:	2b00      	cmp	r3, #0
 8104b28:	d003      	beq.n	8104b32 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104b2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104b2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8104b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104b3a:	2100      	movs	r1, #0
 8104b3c:	6139      	str	r1, [r7, #16]
 8104b3e:	f003 0308 	and.w	r3, r3, #8
 8104b42:	617b      	str	r3, [r7, #20]
 8104b44:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8104b48:	460b      	mov	r3, r1
 8104b4a:	4313      	orrs	r3, r2
 8104b4c:	d011      	beq.n	8104b72 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104b52:	3328      	adds	r3, #40	; 0x28
 8104b54:	2100      	movs	r1, #0
 8104b56:	4618      	mov	r0, r3
 8104b58:	f000 fbca 	bl	81052f0 <RCCEx_PLL3_Config>
 8104b5c:	4603      	mov	r3, r0
 8104b5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8104b62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104b66:	2b00      	cmp	r3, #0
 8104b68:	d003      	beq.n	8104b72 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104b6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104b6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8104b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104b7a:	2100      	movs	r1, #0
 8104b7c:	60b9      	str	r1, [r7, #8]
 8104b7e:	f003 0310 	and.w	r3, r3, #16
 8104b82:	60fb      	str	r3, [r7, #12]
 8104b84:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8104b88:	460b      	mov	r3, r1
 8104b8a:	4313      	orrs	r3, r2
 8104b8c:	d011      	beq.n	8104bb2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104b92:	3328      	adds	r3, #40	; 0x28
 8104b94:	2101      	movs	r1, #1
 8104b96:	4618      	mov	r0, r3
 8104b98:	f000 fbaa 	bl	81052f0 <RCCEx_PLL3_Config>
 8104b9c:	4603      	mov	r3, r0
 8104b9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8104ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104ba6:	2b00      	cmp	r3, #0
 8104ba8:	d003      	beq.n	8104bb2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104baa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104bae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8104bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104bba:	2100      	movs	r1, #0
 8104bbc:	6039      	str	r1, [r7, #0]
 8104bbe:	f003 0320 	and.w	r3, r3, #32
 8104bc2:	607b      	str	r3, [r7, #4]
 8104bc4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8104bc8:	460b      	mov	r3, r1
 8104bca:	4313      	orrs	r3, r2
 8104bcc:	d011      	beq.n	8104bf2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104bd2:	3328      	adds	r3, #40	; 0x28
 8104bd4:	2102      	movs	r1, #2
 8104bd6:	4618      	mov	r0, r3
 8104bd8:	f000 fb8a 	bl	81052f0 <RCCEx_PLL3_Config>
 8104bdc:	4603      	mov	r3, r0
 8104bde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8104be2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104be6:	2b00      	cmp	r3, #0
 8104be8:	d003      	beq.n	8104bf2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104bea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104bee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8104bf2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8104bf6:	2b00      	cmp	r3, #0
 8104bf8:	d101      	bne.n	8104bfe <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8104bfa:	2300      	movs	r3, #0
 8104bfc:	e000      	b.n	8104c00 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8104bfe:	2301      	movs	r3, #1
}
 8104c00:	4618      	mov	r0, r3
 8104c02:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8104c06:	46bd      	mov	sp, r7
 8104c08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8104c0c:	58024400 	.word	0x58024400

08104c10 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8104c10:	b580      	push	{r7, lr}
 8104c12:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8104c14:	f7fe fd94 	bl	8103740 <HAL_RCC_GetHCLKFreq>
 8104c18:	4602      	mov	r2, r0
 8104c1a:	4b06      	ldr	r3, [pc, #24]	; (8104c34 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8104c1c:	6a1b      	ldr	r3, [r3, #32]
 8104c1e:	091b      	lsrs	r3, r3, #4
 8104c20:	f003 0307 	and.w	r3, r3, #7
 8104c24:	4904      	ldr	r1, [pc, #16]	; (8104c38 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8104c26:	5ccb      	ldrb	r3, [r1, r3]
 8104c28:	f003 031f 	and.w	r3, r3, #31
 8104c2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8104c30:	4618      	mov	r0, r3
 8104c32:	bd80      	pop	{r7, pc}
 8104c34:	58024400 	.word	0x58024400
 8104c38:	0810b71c 	.word	0x0810b71c

08104c3c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8104c3c:	b480      	push	{r7}
 8104c3e:	b089      	sub	sp, #36	; 0x24
 8104c40:	af00      	add	r7, sp, #0
 8104c42:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104c44:	4ba1      	ldr	r3, [pc, #644]	; (8104ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104c48:	f003 0303 	and.w	r3, r3, #3
 8104c4c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8104c4e:	4b9f      	ldr	r3, [pc, #636]	; (8104ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104c52:	0b1b      	lsrs	r3, r3, #12
 8104c54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104c58:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8104c5a:	4b9c      	ldr	r3, [pc, #624]	; (8104ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104c5e:	091b      	lsrs	r3, r3, #4
 8104c60:	f003 0301 	and.w	r3, r3, #1
 8104c64:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8104c66:	4b99      	ldr	r3, [pc, #612]	; (8104ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104c6a:	08db      	lsrs	r3, r3, #3
 8104c6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104c70:	693a      	ldr	r2, [r7, #16]
 8104c72:	fb02 f303 	mul.w	r3, r2, r3
 8104c76:	ee07 3a90 	vmov	s15, r3
 8104c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104c7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8104c82:	697b      	ldr	r3, [r7, #20]
 8104c84:	2b00      	cmp	r3, #0
 8104c86:	f000 8111 	beq.w	8104eac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8104c8a:	69bb      	ldr	r3, [r7, #24]
 8104c8c:	2b02      	cmp	r3, #2
 8104c8e:	f000 8083 	beq.w	8104d98 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8104c92:	69bb      	ldr	r3, [r7, #24]
 8104c94:	2b02      	cmp	r3, #2
 8104c96:	f200 80a1 	bhi.w	8104ddc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8104c9a:	69bb      	ldr	r3, [r7, #24]
 8104c9c:	2b00      	cmp	r3, #0
 8104c9e:	d003      	beq.n	8104ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8104ca0:	69bb      	ldr	r3, [r7, #24]
 8104ca2:	2b01      	cmp	r3, #1
 8104ca4:	d056      	beq.n	8104d54 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8104ca6:	e099      	b.n	8104ddc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104ca8:	4b88      	ldr	r3, [pc, #544]	; (8104ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104caa:	681b      	ldr	r3, [r3, #0]
 8104cac:	f003 0320 	and.w	r3, r3, #32
 8104cb0:	2b00      	cmp	r3, #0
 8104cb2:	d02d      	beq.n	8104d10 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104cb4:	4b85      	ldr	r3, [pc, #532]	; (8104ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104cb6:	681b      	ldr	r3, [r3, #0]
 8104cb8:	08db      	lsrs	r3, r3, #3
 8104cba:	f003 0303 	and.w	r3, r3, #3
 8104cbe:	4a84      	ldr	r2, [pc, #528]	; (8104ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8104cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8104cc4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104cc6:	68bb      	ldr	r3, [r7, #8]
 8104cc8:	ee07 3a90 	vmov	s15, r3
 8104ccc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104cd0:	697b      	ldr	r3, [r7, #20]
 8104cd2:	ee07 3a90 	vmov	s15, r3
 8104cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104cde:	4b7b      	ldr	r3, [pc, #492]	; (8104ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104ce6:	ee07 3a90 	vmov	s15, r3
 8104cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104cee:	ed97 6a03 	vldr	s12, [r7, #12]
 8104cf2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8104ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104cfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104d0a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8104d0e:	e087      	b.n	8104e20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104d10:	697b      	ldr	r3, [r7, #20]
 8104d12:	ee07 3a90 	vmov	s15, r3
 8104d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104d1a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8104ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8104d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104d22:	4b6a      	ldr	r3, [pc, #424]	; (8104ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104d2a:	ee07 3a90 	vmov	s15, r3
 8104d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104d32:	ed97 6a03 	vldr	s12, [r7, #12]
 8104d36:	eddf 5a67 	vldr	s11, [pc, #412]	; 8104ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104d42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104d4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104d52:	e065      	b.n	8104e20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104d54:	697b      	ldr	r3, [r7, #20]
 8104d56:	ee07 3a90 	vmov	s15, r3
 8104d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104d5e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8104edc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8104d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104d66:	4b59      	ldr	r3, [pc, #356]	; (8104ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104d6e:	ee07 3a90 	vmov	s15, r3
 8104d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104d76:	ed97 6a03 	vldr	s12, [r7, #12]
 8104d7a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8104ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104d82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104d86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104d92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104d96:	e043      	b.n	8104e20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104d98:	697b      	ldr	r3, [r7, #20]
 8104d9a:	ee07 3a90 	vmov	s15, r3
 8104d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104da2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8104ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8104da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104daa:	4b48      	ldr	r3, [pc, #288]	; (8104ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104db2:	ee07 3a90 	vmov	s15, r3
 8104db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104dba:	ed97 6a03 	vldr	s12, [r7, #12]
 8104dbe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8104ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104dca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104dd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104dda:	e021      	b.n	8104e20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104ddc:	697b      	ldr	r3, [r7, #20]
 8104dde:	ee07 3a90 	vmov	s15, r3
 8104de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104de6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8104edc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8104dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104dee:	4b37      	ldr	r3, [pc, #220]	; (8104ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104df6:	ee07 3a90 	vmov	s15, r3
 8104dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104dfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8104e02:	eddf 5a34 	vldr	s11, [pc, #208]	; 8104ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104e0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104e1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104e1e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8104e20:	4b2a      	ldr	r3, [pc, #168]	; (8104ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104e24:	0a5b      	lsrs	r3, r3, #9
 8104e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104e2a:	ee07 3a90 	vmov	s15, r3
 8104e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104e32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104e36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104e3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8104e3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104e42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104e46:	ee17 2a90 	vmov	r2, s15
 8104e4a:	687b      	ldr	r3, [r7, #4]
 8104e4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8104e4e:	4b1f      	ldr	r3, [pc, #124]	; (8104ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104e52:	0c1b      	lsrs	r3, r3, #16
 8104e54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104e58:	ee07 3a90 	vmov	s15, r3
 8104e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104e60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104e64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104e68:	edd7 6a07 	vldr	s13, [r7, #28]
 8104e6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104e70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104e74:	ee17 2a90 	vmov	r2, s15
 8104e78:	687b      	ldr	r3, [r7, #4]
 8104e7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8104e7c:	4b13      	ldr	r3, [pc, #76]	; (8104ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104e80:	0e1b      	lsrs	r3, r3, #24
 8104e82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104e86:	ee07 3a90 	vmov	s15, r3
 8104e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104e8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104e92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104e96:	edd7 6a07 	vldr	s13, [r7, #28]
 8104e9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104e9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104ea2:	ee17 2a90 	vmov	r2, s15
 8104ea6:	687b      	ldr	r3, [r7, #4]
 8104ea8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8104eaa:	e008      	b.n	8104ebe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8104eac:	687b      	ldr	r3, [r7, #4]
 8104eae:	2200      	movs	r2, #0
 8104eb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8104eb2:	687b      	ldr	r3, [r7, #4]
 8104eb4:	2200      	movs	r2, #0
 8104eb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8104eb8:	687b      	ldr	r3, [r7, #4]
 8104eba:	2200      	movs	r2, #0
 8104ebc:	609a      	str	r2, [r3, #8]
}
 8104ebe:	bf00      	nop
 8104ec0:	3724      	adds	r7, #36	; 0x24
 8104ec2:	46bd      	mov	sp, r7
 8104ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ec8:	4770      	bx	lr
 8104eca:	bf00      	nop
 8104ecc:	58024400 	.word	0x58024400
 8104ed0:	03d09000 	.word	0x03d09000
 8104ed4:	46000000 	.word	0x46000000
 8104ed8:	4c742400 	.word	0x4c742400
 8104edc:	4a742400 	.word	0x4a742400
 8104ee0:	4af42400 	.word	0x4af42400

08104ee4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8104ee4:	b480      	push	{r7}
 8104ee6:	b089      	sub	sp, #36	; 0x24
 8104ee8:	af00      	add	r7, sp, #0
 8104eea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104eec:	4ba1      	ldr	r3, [pc, #644]	; (8105174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104ef0:	f003 0303 	and.w	r3, r3, #3
 8104ef4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8104ef6:	4b9f      	ldr	r3, [pc, #636]	; (8105174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104efa:	0d1b      	lsrs	r3, r3, #20
 8104efc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104f00:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8104f02:	4b9c      	ldr	r3, [pc, #624]	; (8105174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104f06:	0a1b      	lsrs	r3, r3, #8
 8104f08:	f003 0301 	and.w	r3, r3, #1
 8104f0c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8104f0e:	4b99      	ldr	r3, [pc, #612]	; (8105174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104f12:	08db      	lsrs	r3, r3, #3
 8104f14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104f18:	693a      	ldr	r2, [r7, #16]
 8104f1a:	fb02 f303 	mul.w	r3, r2, r3
 8104f1e:	ee07 3a90 	vmov	s15, r3
 8104f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104f26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8104f2a:	697b      	ldr	r3, [r7, #20]
 8104f2c:	2b00      	cmp	r3, #0
 8104f2e:	f000 8111 	beq.w	8105154 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8104f32:	69bb      	ldr	r3, [r7, #24]
 8104f34:	2b02      	cmp	r3, #2
 8104f36:	f000 8083 	beq.w	8105040 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8104f3a:	69bb      	ldr	r3, [r7, #24]
 8104f3c:	2b02      	cmp	r3, #2
 8104f3e:	f200 80a1 	bhi.w	8105084 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8104f42:	69bb      	ldr	r3, [r7, #24]
 8104f44:	2b00      	cmp	r3, #0
 8104f46:	d003      	beq.n	8104f50 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8104f48:	69bb      	ldr	r3, [r7, #24]
 8104f4a:	2b01      	cmp	r3, #1
 8104f4c:	d056      	beq.n	8104ffc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8104f4e:	e099      	b.n	8105084 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104f50:	4b88      	ldr	r3, [pc, #544]	; (8105174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104f52:	681b      	ldr	r3, [r3, #0]
 8104f54:	f003 0320 	and.w	r3, r3, #32
 8104f58:	2b00      	cmp	r3, #0
 8104f5a:	d02d      	beq.n	8104fb8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104f5c:	4b85      	ldr	r3, [pc, #532]	; (8105174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104f5e:	681b      	ldr	r3, [r3, #0]
 8104f60:	08db      	lsrs	r3, r3, #3
 8104f62:	f003 0303 	and.w	r3, r3, #3
 8104f66:	4a84      	ldr	r2, [pc, #528]	; (8105178 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8104f68:	fa22 f303 	lsr.w	r3, r2, r3
 8104f6c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8104f6e:	68bb      	ldr	r3, [r7, #8]
 8104f70:	ee07 3a90 	vmov	s15, r3
 8104f74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104f78:	697b      	ldr	r3, [r7, #20]
 8104f7a:	ee07 3a90 	vmov	s15, r3
 8104f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104f86:	4b7b      	ldr	r3, [pc, #492]	; (8105174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104f8e:	ee07 3a90 	vmov	s15, r3
 8104f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104f96:	ed97 6a03 	vldr	s12, [r7, #12]
 8104f9a:	eddf 5a78 	vldr	s11, [pc, #480]	; 810517c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104fa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104fb2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8104fb6:	e087      	b.n	81050c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8104fb8:	697b      	ldr	r3, [r7, #20]
 8104fba:	ee07 3a90 	vmov	s15, r3
 8104fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104fc2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8105180 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8104fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104fca:	4b6a      	ldr	r3, [pc, #424]	; (8105174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104fd2:	ee07 3a90 	vmov	s15, r3
 8104fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104fda:	ed97 6a03 	vldr	s12, [r7, #12]
 8104fde:	eddf 5a67 	vldr	s11, [pc, #412]	; 810517c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104fea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104ff6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104ffa:	e065      	b.n	81050c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8104ffc:	697b      	ldr	r3, [r7, #20]
 8104ffe:	ee07 3a90 	vmov	s15, r3
 8105002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105006:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8105184 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810500a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810500e:	4b59      	ldr	r3, [pc, #356]	; (8105174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105016:	ee07 3a90 	vmov	s15, r3
 810501a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810501e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105022:	eddf 5a56 	vldr	s11, [pc, #344]	; 810517c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810502a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810502e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105036:	ee67 7a27 	vmul.f32	s15, s14, s15
 810503a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810503e:	e043      	b.n	81050c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105040:	697b      	ldr	r3, [r7, #20]
 8105042:	ee07 3a90 	vmov	s15, r3
 8105046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810504a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8105188 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 810504e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105052:	4b48      	ldr	r3, [pc, #288]	; (8105174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810505a:	ee07 3a90 	vmov	s15, r3
 810505e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105062:	ed97 6a03 	vldr	s12, [r7, #12]
 8105066:	eddf 5a45 	vldr	s11, [pc, #276]	; 810517c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810506a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810506e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105072:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810507a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810507e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105082:	e021      	b.n	81050c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105084:	697b      	ldr	r3, [r7, #20]
 8105086:	ee07 3a90 	vmov	s15, r3
 810508a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810508e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8105184 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8105092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105096:	4b37      	ldr	r3, [pc, #220]	; (8105174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810509a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810509e:	ee07 3a90 	vmov	s15, r3
 81050a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81050a6:	ed97 6a03 	vldr	s12, [r7, #12]
 81050aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 810517c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81050ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81050b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81050b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81050ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81050be:	ee67 7a27 	vmul.f32	s15, s14, s15
 81050c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81050c6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 81050c8:	4b2a      	ldr	r3, [pc, #168]	; (8105174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81050ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81050cc:	0a5b      	lsrs	r3, r3, #9
 81050ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81050d2:	ee07 3a90 	vmov	s15, r3
 81050d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81050da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81050de:	ee37 7a87 	vadd.f32	s14, s15, s14
 81050e2:	edd7 6a07 	vldr	s13, [r7, #28]
 81050e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81050ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81050ee:	ee17 2a90 	vmov	r2, s15
 81050f2:	687b      	ldr	r3, [r7, #4]
 81050f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 81050f6:	4b1f      	ldr	r3, [pc, #124]	; (8105174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81050fa:	0c1b      	lsrs	r3, r3, #16
 81050fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105100:	ee07 3a90 	vmov	s15, r3
 8105104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105108:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810510c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105110:	edd7 6a07 	vldr	s13, [r7, #28]
 8105114:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105118:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810511c:	ee17 2a90 	vmov	r2, s15
 8105120:	687b      	ldr	r3, [r7, #4]
 8105122:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8105124:	4b13      	ldr	r3, [pc, #76]	; (8105174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105128:	0e1b      	lsrs	r3, r3, #24
 810512a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810512e:	ee07 3a90 	vmov	s15, r3
 8105132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105136:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810513a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810513e:	edd7 6a07 	vldr	s13, [r7, #28]
 8105142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810514a:	ee17 2a90 	vmov	r2, s15
 810514e:	687b      	ldr	r3, [r7, #4]
 8105150:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8105152:	e008      	b.n	8105166 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8105154:	687b      	ldr	r3, [r7, #4]
 8105156:	2200      	movs	r2, #0
 8105158:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810515a:	687b      	ldr	r3, [r7, #4]
 810515c:	2200      	movs	r2, #0
 810515e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8105160:	687b      	ldr	r3, [r7, #4]
 8105162:	2200      	movs	r2, #0
 8105164:	609a      	str	r2, [r3, #8]
}
 8105166:	bf00      	nop
 8105168:	3724      	adds	r7, #36	; 0x24
 810516a:	46bd      	mov	sp, r7
 810516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105170:	4770      	bx	lr
 8105172:	bf00      	nop
 8105174:	58024400 	.word	0x58024400
 8105178:	03d09000 	.word	0x03d09000
 810517c:	46000000 	.word	0x46000000
 8105180:	4c742400 	.word	0x4c742400
 8105184:	4a742400 	.word	0x4a742400
 8105188:	4af42400 	.word	0x4af42400

0810518c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810518c:	b580      	push	{r7, lr}
 810518e:	b084      	sub	sp, #16
 8105190:	af00      	add	r7, sp, #0
 8105192:	6078      	str	r0, [r7, #4]
 8105194:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8105196:	2300      	movs	r3, #0
 8105198:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810519a:	4b54      	ldr	r3, [pc, #336]	; (81052ec <RCCEx_PLL2_Config+0x160>)
 810519c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810519e:	f003 0303 	and.w	r3, r3, #3
 81051a2:	2b03      	cmp	r3, #3
 81051a4:	d101      	bne.n	81051aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81051a6:	2301      	movs	r3, #1
 81051a8:	e09b      	b.n	81052e2 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81051aa:	4b50      	ldr	r3, [pc, #320]	; (81052ec <RCCEx_PLL2_Config+0x160>)
 81051ac:	681b      	ldr	r3, [r3, #0]
 81051ae:	4a4f      	ldr	r2, [pc, #316]	; (81052ec <RCCEx_PLL2_Config+0x160>)
 81051b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 81051b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81051b6:	f7fc ffd3 	bl	8102160 <HAL_GetTick>
 81051ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81051bc:	e008      	b.n	81051d0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81051be:	f7fc ffcf 	bl	8102160 <HAL_GetTick>
 81051c2:	4602      	mov	r2, r0
 81051c4:	68bb      	ldr	r3, [r7, #8]
 81051c6:	1ad3      	subs	r3, r2, r3
 81051c8:	2b02      	cmp	r3, #2
 81051ca:	d901      	bls.n	81051d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81051cc:	2303      	movs	r3, #3
 81051ce:	e088      	b.n	81052e2 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81051d0:	4b46      	ldr	r3, [pc, #280]	; (81052ec <RCCEx_PLL2_Config+0x160>)
 81051d2:	681b      	ldr	r3, [r3, #0]
 81051d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81051d8:	2b00      	cmp	r3, #0
 81051da:	d1f0      	bne.n	81051be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81051dc:	4b43      	ldr	r3, [pc, #268]	; (81052ec <RCCEx_PLL2_Config+0x160>)
 81051de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81051e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 81051e4:	687b      	ldr	r3, [r7, #4]
 81051e6:	681b      	ldr	r3, [r3, #0]
 81051e8:	031b      	lsls	r3, r3, #12
 81051ea:	4940      	ldr	r1, [pc, #256]	; (81052ec <RCCEx_PLL2_Config+0x160>)
 81051ec:	4313      	orrs	r3, r2
 81051ee:	628b      	str	r3, [r1, #40]	; 0x28
 81051f0:	687b      	ldr	r3, [r7, #4]
 81051f2:	685b      	ldr	r3, [r3, #4]
 81051f4:	3b01      	subs	r3, #1
 81051f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81051fa:	687b      	ldr	r3, [r7, #4]
 81051fc:	689b      	ldr	r3, [r3, #8]
 81051fe:	3b01      	subs	r3, #1
 8105200:	025b      	lsls	r3, r3, #9
 8105202:	b29b      	uxth	r3, r3
 8105204:	431a      	orrs	r2, r3
 8105206:	687b      	ldr	r3, [r7, #4]
 8105208:	68db      	ldr	r3, [r3, #12]
 810520a:	3b01      	subs	r3, #1
 810520c:	041b      	lsls	r3, r3, #16
 810520e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8105212:	431a      	orrs	r2, r3
 8105214:	687b      	ldr	r3, [r7, #4]
 8105216:	691b      	ldr	r3, [r3, #16]
 8105218:	3b01      	subs	r3, #1
 810521a:	061b      	lsls	r3, r3, #24
 810521c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8105220:	4932      	ldr	r1, [pc, #200]	; (81052ec <RCCEx_PLL2_Config+0x160>)
 8105222:	4313      	orrs	r3, r2
 8105224:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8105226:	4b31      	ldr	r3, [pc, #196]	; (81052ec <RCCEx_PLL2_Config+0x160>)
 8105228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810522a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 810522e:	687b      	ldr	r3, [r7, #4]
 8105230:	695b      	ldr	r3, [r3, #20]
 8105232:	492e      	ldr	r1, [pc, #184]	; (81052ec <RCCEx_PLL2_Config+0x160>)
 8105234:	4313      	orrs	r3, r2
 8105236:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8105238:	4b2c      	ldr	r3, [pc, #176]	; (81052ec <RCCEx_PLL2_Config+0x160>)
 810523a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810523c:	f023 0220 	bic.w	r2, r3, #32
 8105240:	687b      	ldr	r3, [r7, #4]
 8105242:	699b      	ldr	r3, [r3, #24]
 8105244:	4929      	ldr	r1, [pc, #164]	; (81052ec <RCCEx_PLL2_Config+0x160>)
 8105246:	4313      	orrs	r3, r2
 8105248:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810524a:	4b28      	ldr	r3, [pc, #160]	; (81052ec <RCCEx_PLL2_Config+0x160>)
 810524c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810524e:	4a27      	ldr	r2, [pc, #156]	; (81052ec <RCCEx_PLL2_Config+0x160>)
 8105250:	f023 0310 	bic.w	r3, r3, #16
 8105254:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8105256:	4b25      	ldr	r3, [pc, #148]	; (81052ec <RCCEx_PLL2_Config+0x160>)
 8105258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810525a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810525e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8105262:	687a      	ldr	r2, [r7, #4]
 8105264:	69d2      	ldr	r2, [r2, #28]
 8105266:	00d2      	lsls	r2, r2, #3
 8105268:	4920      	ldr	r1, [pc, #128]	; (81052ec <RCCEx_PLL2_Config+0x160>)
 810526a:	4313      	orrs	r3, r2
 810526c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810526e:	4b1f      	ldr	r3, [pc, #124]	; (81052ec <RCCEx_PLL2_Config+0x160>)
 8105270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105272:	4a1e      	ldr	r2, [pc, #120]	; (81052ec <RCCEx_PLL2_Config+0x160>)
 8105274:	f043 0310 	orr.w	r3, r3, #16
 8105278:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810527a:	683b      	ldr	r3, [r7, #0]
 810527c:	2b00      	cmp	r3, #0
 810527e:	d106      	bne.n	810528e <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8105280:	4b1a      	ldr	r3, [pc, #104]	; (81052ec <RCCEx_PLL2_Config+0x160>)
 8105282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105284:	4a19      	ldr	r2, [pc, #100]	; (81052ec <RCCEx_PLL2_Config+0x160>)
 8105286:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 810528a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810528c:	e00f      	b.n	81052ae <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810528e:	683b      	ldr	r3, [r7, #0]
 8105290:	2b01      	cmp	r3, #1
 8105292:	d106      	bne.n	81052a2 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8105294:	4b15      	ldr	r3, [pc, #84]	; (81052ec <RCCEx_PLL2_Config+0x160>)
 8105296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105298:	4a14      	ldr	r2, [pc, #80]	; (81052ec <RCCEx_PLL2_Config+0x160>)
 810529a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810529e:	62d3      	str	r3, [r2, #44]	; 0x2c
 81052a0:	e005      	b.n	81052ae <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81052a2:	4b12      	ldr	r3, [pc, #72]	; (81052ec <RCCEx_PLL2_Config+0x160>)
 81052a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81052a6:	4a11      	ldr	r2, [pc, #68]	; (81052ec <RCCEx_PLL2_Config+0x160>)
 81052a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81052ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81052ae:	4b0f      	ldr	r3, [pc, #60]	; (81052ec <RCCEx_PLL2_Config+0x160>)
 81052b0:	681b      	ldr	r3, [r3, #0]
 81052b2:	4a0e      	ldr	r2, [pc, #56]	; (81052ec <RCCEx_PLL2_Config+0x160>)
 81052b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 81052b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81052ba:	f7fc ff51 	bl	8102160 <HAL_GetTick>
 81052be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81052c0:	e008      	b.n	81052d4 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81052c2:	f7fc ff4d 	bl	8102160 <HAL_GetTick>
 81052c6:	4602      	mov	r2, r0
 81052c8:	68bb      	ldr	r3, [r7, #8]
 81052ca:	1ad3      	subs	r3, r2, r3
 81052cc:	2b02      	cmp	r3, #2
 81052ce:	d901      	bls.n	81052d4 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81052d0:	2303      	movs	r3, #3
 81052d2:	e006      	b.n	81052e2 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81052d4:	4b05      	ldr	r3, [pc, #20]	; (81052ec <RCCEx_PLL2_Config+0x160>)
 81052d6:	681b      	ldr	r3, [r3, #0]
 81052d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81052dc:	2b00      	cmp	r3, #0
 81052de:	d0f0      	beq.n	81052c2 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81052e0:	7bfb      	ldrb	r3, [r7, #15]
}
 81052e2:	4618      	mov	r0, r3
 81052e4:	3710      	adds	r7, #16
 81052e6:	46bd      	mov	sp, r7
 81052e8:	bd80      	pop	{r7, pc}
 81052ea:	bf00      	nop
 81052ec:	58024400 	.word	0x58024400

081052f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81052f0:	b580      	push	{r7, lr}
 81052f2:	b084      	sub	sp, #16
 81052f4:	af00      	add	r7, sp, #0
 81052f6:	6078      	str	r0, [r7, #4]
 81052f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81052fa:	2300      	movs	r3, #0
 81052fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81052fe:	4b54      	ldr	r3, [pc, #336]	; (8105450 <RCCEx_PLL3_Config+0x160>)
 8105300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105302:	f003 0303 	and.w	r3, r3, #3
 8105306:	2b03      	cmp	r3, #3
 8105308:	d101      	bne.n	810530e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810530a:	2301      	movs	r3, #1
 810530c:	e09b      	b.n	8105446 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810530e:	4b50      	ldr	r3, [pc, #320]	; (8105450 <RCCEx_PLL3_Config+0x160>)
 8105310:	681b      	ldr	r3, [r3, #0]
 8105312:	4a4f      	ldr	r2, [pc, #316]	; (8105450 <RCCEx_PLL3_Config+0x160>)
 8105314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8105318:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810531a:	f7fc ff21 	bl	8102160 <HAL_GetTick>
 810531e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8105320:	e008      	b.n	8105334 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8105322:	f7fc ff1d 	bl	8102160 <HAL_GetTick>
 8105326:	4602      	mov	r2, r0
 8105328:	68bb      	ldr	r3, [r7, #8]
 810532a:	1ad3      	subs	r3, r2, r3
 810532c:	2b02      	cmp	r3, #2
 810532e:	d901      	bls.n	8105334 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8105330:	2303      	movs	r3, #3
 8105332:	e088      	b.n	8105446 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8105334:	4b46      	ldr	r3, [pc, #280]	; (8105450 <RCCEx_PLL3_Config+0x160>)
 8105336:	681b      	ldr	r3, [r3, #0]
 8105338:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810533c:	2b00      	cmp	r3, #0
 810533e:	d1f0      	bne.n	8105322 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8105340:	4b43      	ldr	r3, [pc, #268]	; (8105450 <RCCEx_PLL3_Config+0x160>)
 8105342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105344:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8105348:	687b      	ldr	r3, [r7, #4]
 810534a:	681b      	ldr	r3, [r3, #0]
 810534c:	051b      	lsls	r3, r3, #20
 810534e:	4940      	ldr	r1, [pc, #256]	; (8105450 <RCCEx_PLL3_Config+0x160>)
 8105350:	4313      	orrs	r3, r2
 8105352:	628b      	str	r3, [r1, #40]	; 0x28
 8105354:	687b      	ldr	r3, [r7, #4]
 8105356:	685b      	ldr	r3, [r3, #4]
 8105358:	3b01      	subs	r3, #1
 810535a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810535e:	687b      	ldr	r3, [r7, #4]
 8105360:	689b      	ldr	r3, [r3, #8]
 8105362:	3b01      	subs	r3, #1
 8105364:	025b      	lsls	r3, r3, #9
 8105366:	b29b      	uxth	r3, r3
 8105368:	431a      	orrs	r2, r3
 810536a:	687b      	ldr	r3, [r7, #4]
 810536c:	68db      	ldr	r3, [r3, #12]
 810536e:	3b01      	subs	r3, #1
 8105370:	041b      	lsls	r3, r3, #16
 8105372:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8105376:	431a      	orrs	r2, r3
 8105378:	687b      	ldr	r3, [r7, #4]
 810537a:	691b      	ldr	r3, [r3, #16]
 810537c:	3b01      	subs	r3, #1
 810537e:	061b      	lsls	r3, r3, #24
 8105380:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8105384:	4932      	ldr	r1, [pc, #200]	; (8105450 <RCCEx_PLL3_Config+0x160>)
 8105386:	4313      	orrs	r3, r2
 8105388:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810538a:	4b31      	ldr	r3, [pc, #196]	; (8105450 <RCCEx_PLL3_Config+0x160>)
 810538c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810538e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8105392:	687b      	ldr	r3, [r7, #4]
 8105394:	695b      	ldr	r3, [r3, #20]
 8105396:	492e      	ldr	r1, [pc, #184]	; (8105450 <RCCEx_PLL3_Config+0x160>)
 8105398:	4313      	orrs	r3, r2
 810539a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810539c:	4b2c      	ldr	r3, [pc, #176]	; (8105450 <RCCEx_PLL3_Config+0x160>)
 810539e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81053a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 81053a4:	687b      	ldr	r3, [r7, #4]
 81053a6:	699b      	ldr	r3, [r3, #24]
 81053a8:	4929      	ldr	r1, [pc, #164]	; (8105450 <RCCEx_PLL3_Config+0x160>)
 81053aa:	4313      	orrs	r3, r2
 81053ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81053ae:	4b28      	ldr	r3, [pc, #160]	; (8105450 <RCCEx_PLL3_Config+0x160>)
 81053b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81053b2:	4a27      	ldr	r2, [pc, #156]	; (8105450 <RCCEx_PLL3_Config+0x160>)
 81053b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81053b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 81053ba:	4b25      	ldr	r3, [pc, #148]	; (8105450 <RCCEx_PLL3_Config+0x160>)
 81053bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81053be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81053c2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81053c6:	687a      	ldr	r2, [r7, #4]
 81053c8:	69d2      	ldr	r2, [r2, #28]
 81053ca:	00d2      	lsls	r2, r2, #3
 81053cc:	4920      	ldr	r1, [pc, #128]	; (8105450 <RCCEx_PLL3_Config+0x160>)
 81053ce:	4313      	orrs	r3, r2
 81053d0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81053d2:	4b1f      	ldr	r3, [pc, #124]	; (8105450 <RCCEx_PLL3_Config+0x160>)
 81053d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81053d6:	4a1e      	ldr	r2, [pc, #120]	; (8105450 <RCCEx_PLL3_Config+0x160>)
 81053d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81053dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81053de:	683b      	ldr	r3, [r7, #0]
 81053e0:	2b00      	cmp	r3, #0
 81053e2:	d106      	bne.n	81053f2 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81053e4:	4b1a      	ldr	r3, [pc, #104]	; (8105450 <RCCEx_PLL3_Config+0x160>)
 81053e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81053e8:	4a19      	ldr	r2, [pc, #100]	; (8105450 <RCCEx_PLL3_Config+0x160>)
 81053ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 81053ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 81053f0:	e00f      	b.n	8105412 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81053f2:	683b      	ldr	r3, [r7, #0]
 81053f4:	2b01      	cmp	r3, #1
 81053f6:	d106      	bne.n	8105406 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81053f8:	4b15      	ldr	r3, [pc, #84]	; (8105450 <RCCEx_PLL3_Config+0x160>)
 81053fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81053fc:	4a14      	ldr	r2, [pc, #80]	; (8105450 <RCCEx_PLL3_Config+0x160>)
 81053fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8105402:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105404:	e005      	b.n	8105412 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8105406:	4b12      	ldr	r3, [pc, #72]	; (8105450 <RCCEx_PLL3_Config+0x160>)
 8105408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810540a:	4a11      	ldr	r2, [pc, #68]	; (8105450 <RCCEx_PLL3_Config+0x160>)
 810540c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8105410:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8105412:	4b0f      	ldr	r3, [pc, #60]	; (8105450 <RCCEx_PLL3_Config+0x160>)
 8105414:	681b      	ldr	r3, [r3, #0]
 8105416:	4a0e      	ldr	r2, [pc, #56]	; (8105450 <RCCEx_PLL3_Config+0x160>)
 8105418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 810541c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810541e:	f7fc fe9f 	bl	8102160 <HAL_GetTick>
 8105422:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105424:	e008      	b.n	8105438 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8105426:	f7fc fe9b 	bl	8102160 <HAL_GetTick>
 810542a:	4602      	mov	r2, r0
 810542c:	68bb      	ldr	r3, [r7, #8]
 810542e:	1ad3      	subs	r3, r2, r3
 8105430:	2b02      	cmp	r3, #2
 8105432:	d901      	bls.n	8105438 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8105434:	2303      	movs	r3, #3
 8105436:	e006      	b.n	8105446 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105438:	4b05      	ldr	r3, [pc, #20]	; (8105450 <RCCEx_PLL3_Config+0x160>)
 810543a:	681b      	ldr	r3, [r3, #0]
 810543c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105440:	2b00      	cmp	r3, #0
 8105442:	d0f0      	beq.n	8105426 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8105444:	7bfb      	ldrb	r3, [r7, #15]
}
 8105446:	4618      	mov	r0, r3
 8105448:	3710      	adds	r7, #16
 810544a:	46bd      	mov	sp, r7
 810544c:	bd80      	pop	{r7, pc}
 810544e:	bf00      	nop
 8105450:	58024400 	.word	0x58024400

08105454 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8105454:	b580      	push	{r7, lr}
 8105456:	b082      	sub	sp, #8
 8105458:	af00      	add	r7, sp, #0
 810545a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810545c:	687b      	ldr	r3, [r7, #4]
 810545e:	2b00      	cmp	r3, #0
 8105460:	d101      	bne.n	8105466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8105462:	2301      	movs	r3, #1
 8105464:	e042      	b.n	81054ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8105466:	687b      	ldr	r3, [r7, #4]
 8105468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810546c:	2b00      	cmp	r3, #0
 810546e:	d106      	bne.n	810547e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8105470:	687b      	ldr	r3, [r7, #4]
 8105472:	2200      	movs	r2, #0
 8105474:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8105478:	6878      	ldr	r0, [r7, #4]
 810547a:	f7fc fc3d 	bl	8101cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810547e:	687b      	ldr	r3, [r7, #4]
 8105480:	2224      	movs	r2, #36	; 0x24
 8105482:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8105486:	687b      	ldr	r3, [r7, #4]
 8105488:	681b      	ldr	r3, [r3, #0]
 810548a:	681a      	ldr	r2, [r3, #0]
 810548c:	687b      	ldr	r3, [r7, #4]
 810548e:	681b      	ldr	r3, [r3, #0]
 8105490:	f022 0201 	bic.w	r2, r2, #1
 8105494:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8105496:	6878      	ldr	r0, [r7, #4]
 8105498:	f000 f982 	bl	81057a0 <UART_SetConfig>
 810549c:	4603      	mov	r3, r0
 810549e:	2b01      	cmp	r3, #1
 81054a0:	d101      	bne.n	81054a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 81054a2:	2301      	movs	r3, #1
 81054a4:	e022      	b.n	81054ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 81054a6:	687b      	ldr	r3, [r7, #4]
 81054a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81054aa:	2b00      	cmp	r3, #0
 81054ac:	d002      	beq.n	81054b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 81054ae:	6878      	ldr	r0, [r7, #4]
 81054b0:	f000 fede 	bl	8106270 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 81054b4:	687b      	ldr	r3, [r7, #4]
 81054b6:	681b      	ldr	r3, [r3, #0]
 81054b8:	685a      	ldr	r2, [r3, #4]
 81054ba:	687b      	ldr	r3, [r7, #4]
 81054bc:	681b      	ldr	r3, [r3, #0]
 81054be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 81054c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 81054c4:	687b      	ldr	r3, [r7, #4]
 81054c6:	681b      	ldr	r3, [r3, #0]
 81054c8:	689a      	ldr	r2, [r3, #8]
 81054ca:	687b      	ldr	r3, [r7, #4]
 81054cc:	681b      	ldr	r3, [r3, #0]
 81054ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 81054d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 81054d4:	687b      	ldr	r3, [r7, #4]
 81054d6:	681b      	ldr	r3, [r3, #0]
 81054d8:	681a      	ldr	r2, [r3, #0]
 81054da:	687b      	ldr	r3, [r7, #4]
 81054dc:	681b      	ldr	r3, [r3, #0]
 81054de:	f042 0201 	orr.w	r2, r2, #1
 81054e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 81054e4:	6878      	ldr	r0, [r7, #4]
 81054e6:	f000 ff65 	bl	81063b4 <UART_CheckIdleState>
 81054ea:	4603      	mov	r3, r0
}
 81054ec:	4618      	mov	r0, r3
 81054ee:	3708      	adds	r7, #8
 81054f0:	46bd      	mov	sp, r7
 81054f2:	bd80      	pop	{r7, pc}

081054f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81054f4:	b580      	push	{r7, lr}
 81054f6:	b08a      	sub	sp, #40	; 0x28
 81054f8:	af02      	add	r7, sp, #8
 81054fa:	60f8      	str	r0, [r7, #12]
 81054fc:	60b9      	str	r1, [r7, #8]
 81054fe:	603b      	str	r3, [r7, #0]
 8105500:	4613      	mov	r3, r2
 8105502:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8105504:	68fb      	ldr	r3, [r7, #12]
 8105506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810550a:	2b20      	cmp	r3, #32
 810550c:	d17b      	bne.n	8105606 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 810550e:	68bb      	ldr	r3, [r7, #8]
 8105510:	2b00      	cmp	r3, #0
 8105512:	d002      	beq.n	810551a <HAL_UART_Transmit+0x26>
 8105514:	88fb      	ldrh	r3, [r7, #6]
 8105516:	2b00      	cmp	r3, #0
 8105518:	d101      	bne.n	810551e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 810551a:	2301      	movs	r3, #1
 810551c:	e074      	b.n	8105608 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810551e:	68fb      	ldr	r3, [r7, #12]
 8105520:	2200      	movs	r2, #0
 8105522:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8105526:	68fb      	ldr	r3, [r7, #12]
 8105528:	2221      	movs	r2, #33	; 0x21
 810552a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 810552e:	f7fc fe17 	bl	8102160 <HAL_GetTick>
 8105532:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8105534:	68fb      	ldr	r3, [r7, #12]
 8105536:	88fa      	ldrh	r2, [r7, #6]
 8105538:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 810553c:	68fb      	ldr	r3, [r7, #12]
 810553e:	88fa      	ldrh	r2, [r7, #6]
 8105540:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8105544:	68fb      	ldr	r3, [r7, #12]
 8105546:	689b      	ldr	r3, [r3, #8]
 8105548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810554c:	d108      	bne.n	8105560 <HAL_UART_Transmit+0x6c>
 810554e:	68fb      	ldr	r3, [r7, #12]
 8105550:	691b      	ldr	r3, [r3, #16]
 8105552:	2b00      	cmp	r3, #0
 8105554:	d104      	bne.n	8105560 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8105556:	2300      	movs	r3, #0
 8105558:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 810555a:	68bb      	ldr	r3, [r7, #8]
 810555c:	61bb      	str	r3, [r7, #24]
 810555e:	e003      	b.n	8105568 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8105560:	68bb      	ldr	r3, [r7, #8]
 8105562:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8105564:	2300      	movs	r3, #0
 8105566:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8105568:	e030      	b.n	81055cc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 810556a:	683b      	ldr	r3, [r7, #0]
 810556c:	9300      	str	r3, [sp, #0]
 810556e:	697b      	ldr	r3, [r7, #20]
 8105570:	2200      	movs	r2, #0
 8105572:	2180      	movs	r1, #128	; 0x80
 8105574:	68f8      	ldr	r0, [r7, #12]
 8105576:	f000 ffc7 	bl	8106508 <UART_WaitOnFlagUntilTimeout>
 810557a:	4603      	mov	r3, r0
 810557c:	2b00      	cmp	r3, #0
 810557e:	d005      	beq.n	810558c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8105580:	68fb      	ldr	r3, [r7, #12]
 8105582:	2220      	movs	r2, #32
 8105584:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8105588:	2303      	movs	r3, #3
 810558a:	e03d      	b.n	8105608 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 810558c:	69fb      	ldr	r3, [r7, #28]
 810558e:	2b00      	cmp	r3, #0
 8105590:	d10b      	bne.n	81055aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8105592:	69bb      	ldr	r3, [r7, #24]
 8105594:	881b      	ldrh	r3, [r3, #0]
 8105596:	461a      	mov	r2, r3
 8105598:	68fb      	ldr	r3, [r7, #12]
 810559a:	681b      	ldr	r3, [r3, #0]
 810559c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 81055a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 81055a2:	69bb      	ldr	r3, [r7, #24]
 81055a4:	3302      	adds	r3, #2
 81055a6:	61bb      	str	r3, [r7, #24]
 81055a8:	e007      	b.n	81055ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 81055aa:	69fb      	ldr	r3, [r7, #28]
 81055ac:	781a      	ldrb	r2, [r3, #0]
 81055ae:	68fb      	ldr	r3, [r7, #12]
 81055b0:	681b      	ldr	r3, [r3, #0]
 81055b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 81055b4:	69fb      	ldr	r3, [r7, #28]
 81055b6:	3301      	adds	r3, #1
 81055b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 81055ba:	68fb      	ldr	r3, [r7, #12]
 81055bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81055c0:	b29b      	uxth	r3, r3
 81055c2:	3b01      	subs	r3, #1
 81055c4:	b29a      	uxth	r2, r3
 81055c6:	68fb      	ldr	r3, [r7, #12]
 81055c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 81055cc:	68fb      	ldr	r3, [r7, #12]
 81055ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81055d2:	b29b      	uxth	r3, r3
 81055d4:	2b00      	cmp	r3, #0
 81055d6:	d1c8      	bne.n	810556a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 81055d8:	683b      	ldr	r3, [r7, #0]
 81055da:	9300      	str	r3, [sp, #0]
 81055dc:	697b      	ldr	r3, [r7, #20]
 81055de:	2200      	movs	r2, #0
 81055e0:	2140      	movs	r1, #64	; 0x40
 81055e2:	68f8      	ldr	r0, [r7, #12]
 81055e4:	f000 ff90 	bl	8106508 <UART_WaitOnFlagUntilTimeout>
 81055e8:	4603      	mov	r3, r0
 81055ea:	2b00      	cmp	r3, #0
 81055ec:	d005      	beq.n	81055fa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 81055ee:	68fb      	ldr	r3, [r7, #12]
 81055f0:	2220      	movs	r2, #32
 81055f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 81055f6:	2303      	movs	r3, #3
 81055f8:	e006      	b.n	8105608 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 81055fa:	68fb      	ldr	r3, [r7, #12]
 81055fc:	2220      	movs	r2, #32
 81055fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8105602:	2300      	movs	r3, #0
 8105604:	e000      	b.n	8105608 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8105606:	2302      	movs	r3, #2
  }
}
 8105608:	4618      	mov	r0, r3
 810560a:	3720      	adds	r7, #32
 810560c:	46bd      	mov	sp, r7
 810560e:	bd80      	pop	{r7, pc}

08105610 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8105610:	b580      	push	{r7, lr}
 8105612:	b08a      	sub	sp, #40	; 0x28
 8105614:	af02      	add	r7, sp, #8
 8105616:	60f8      	str	r0, [r7, #12]
 8105618:	60b9      	str	r1, [r7, #8]
 810561a:	603b      	str	r3, [r7, #0]
 810561c:	4613      	mov	r3, r2
 810561e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8105620:	68fb      	ldr	r3, [r7, #12]
 8105622:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8105626:	2b20      	cmp	r3, #32
 8105628:	f040 80b5 	bne.w	8105796 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 810562c:	68bb      	ldr	r3, [r7, #8]
 810562e:	2b00      	cmp	r3, #0
 8105630:	d002      	beq.n	8105638 <HAL_UART_Receive+0x28>
 8105632:	88fb      	ldrh	r3, [r7, #6]
 8105634:	2b00      	cmp	r3, #0
 8105636:	d101      	bne.n	810563c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8105638:	2301      	movs	r3, #1
 810563a:	e0ad      	b.n	8105798 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810563c:	68fb      	ldr	r3, [r7, #12]
 810563e:	2200      	movs	r2, #0
 8105640:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8105644:	68fb      	ldr	r3, [r7, #12]
 8105646:	2222      	movs	r2, #34	; 0x22
 8105648:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810564c:	68fb      	ldr	r3, [r7, #12]
 810564e:	2200      	movs	r2, #0
 8105650:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8105652:	f7fc fd85 	bl	8102160 <HAL_GetTick>
 8105656:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8105658:	68fb      	ldr	r3, [r7, #12]
 810565a:	88fa      	ldrh	r2, [r7, #6]
 810565c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8105660:	68fb      	ldr	r3, [r7, #12]
 8105662:	88fa      	ldrh	r2, [r7, #6]
 8105664:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8105668:	68fb      	ldr	r3, [r7, #12]
 810566a:	689b      	ldr	r3, [r3, #8]
 810566c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105670:	d10e      	bne.n	8105690 <HAL_UART_Receive+0x80>
 8105672:	68fb      	ldr	r3, [r7, #12]
 8105674:	691b      	ldr	r3, [r3, #16]
 8105676:	2b00      	cmp	r3, #0
 8105678:	d105      	bne.n	8105686 <HAL_UART_Receive+0x76>
 810567a:	68fb      	ldr	r3, [r7, #12]
 810567c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8105680:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8105684:	e02d      	b.n	81056e2 <HAL_UART_Receive+0xd2>
 8105686:	68fb      	ldr	r3, [r7, #12]
 8105688:	22ff      	movs	r2, #255	; 0xff
 810568a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 810568e:	e028      	b.n	81056e2 <HAL_UART_Receive+0xd2>
 8105690:	68fb      	ldr	r3, [r7, #12]
 8105692:	689b      	ldr	r3, [r3, #8]
 8105694:	2b00      	cmp	r3, #0
 8105696:	d10d      	bne.n	81056b4 <HAL_UART_Receive+0xa4>
 8105698:	68fb      	ldr	r3, [r7, #12]
 810569a:	691b      	ldr	r3, [r3, #16]
 810569c:	2b00      	cmp	r3, #0
 810569e:	d104      	bne.n	81056aa <HAL_UART_Receive+0x9a>
 81056a0:	68fb      	ldr	r3, [r7, #12]
 81056a2:	22ff      	movs	r2, #255	; 0xff
 81056a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 81056a8:	e01b      	b.n	81056e2 <HAL_UART_Receive+0xd2>
 81056aa:	68fb      	ldr	r3, [r7, #12]
 81056ac:	227f      	movs	r2, #127	; 0x7f
 81056ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 81056b2:	e016      	b.n	81056e2 <HAL_UART_Receive+0xd2>
 81056b4:	68fb      	ldr	r3, [r7, #12]
 81056b6:	689b      	ldr	r3, [r3, #8]
 81056b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81056bc:	d10d      	bne.n	81056da <HAL_UART_Receive+0xca>
 81056be:	68fb      	ldr	r3, [r7, #12]
 81056c0:	691b      	ldr	r3, [r3, #16]
 81056c2:	2b00      	cmp	r3, #0
 81056c4:	d104      	bne.n	81056d0 <HAL_UART_Receive+0xc0>
 81056c6:	68fb      	ldr	r3, [r7, #12]
 81056c8:	227f      	movs	r2, #127	; 0x7f
 81056ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 81056ce:	e008      	b.n	81056e2 <HAL_UART_Receive+0xd2>
 81056d0:	68fb      	ldr	r3, [r7, #12]
 81056d2:	223f      	movs	r2, #63	; 0x3f
 81056d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 81056d8:	e003      	b.n	81056e2 <HAL_UART_Receive+0xd2>
 81056da:	68fb      	ldr	r3, [r7, #12]
 81056dc:	2200      	movs	r2, #0
 81056de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 81056e2:	68fb      	ldr	r3, [r7, #12]
 81056e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 81056e8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 81056ea:	68fb      	ldr	r3, [r7, #12]
 81056ec:	689b      	ldr	r3, [r3, #8]
 81056ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81056f2:	d108      	bne.n	8105706 <HAL_UART_Receive+0xf6>
 81056f4:	68fb      	ldr	r3, [r7, #12]
 81056f6:	691b      	ldr	r3, [r3, #16]
 81056f8:	2b00      	cmp	r3, #0
 81056fa:	d104      	bne.n	8105706 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 81056fc:	2300      	movs	r3, #0
 81056fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8105700:	68bb      	ldr	r3, [r7, #8]
 8105702:	61bb      	str	r3, [r7, #24]
 8105704:	e003      	b.n	810570e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8105706:	68bb      	ldr	r3, [r7, #8]
 8105708:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810570a:	2300      	movs	r3, #0
 810570c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 810570e:	e036      	b.n	810577e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8105710:	683b      	ldr	r3, [r7, #0]
 8105712:	9300      	str	r3, [sp, #0]
 8105714:	697b      	ldr	r3, [r7, #20]
 8105716:	2200      	movs	r2, #0
 8105718:	2120      	movs	r1, #32
 810571a:	68f8      	ldr	r0, [r7, #12]
 810571c:	f000 fef4 	bl	8106508 <UART_WaitOnFlagUntilTimeout>
 8105720:	4603      	mov	r3, r0
 8105722:	2b00      	cmp	r3, #0
 8105724:	d005      	beq.n	8105732 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8105726:	68fb      	ldr	r3, [r7, #12]
 8105728:	2220      	movs	r2, #32
 810572a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 810572e:	2303      	movs	r3, #3
 8105730:	e032      	b.n	8105798 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8105732:	69fb      	ldr	r3, [r7, #28]
 8105734:	2b00      	cmp	r3, #0
 8105736:	d10c      	bne.n	8105752 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8105738:	68fb      	ldr	r3, [r7, #12]
 810573a:	681b      	ldr	r3, [r3, #0]
 810573c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810573e:	b29a      	uxth	r2, r3
 8105740:	8a7b      	ldrh	r3, [r7, #18]
 8105742:	4013      	ands	r3, r2
 8105744:	b29a      	uxth	r2, r3
 8105746:	69bb      	ldr	r3, [r7, #24]
 8105748:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 810574a:	69bb      	ldr	r3, [r7, #24]
 810574c:	3302      	adds	r3, #2
 810574e:	61bb      	str	r3, [r7, #24]
 8105750:	e00c      	b.n	810576c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8105752:	68fb      	ldr	r3, [r7, #12]
 8105754:	681b      	ldr	r3, [r3, #0]
 8105756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105758:	b2da      	uxtb	r2, r3
 810575a:	8a7b      	ldrh	r3, [r7, #18]
 810575c:	b2db      	uxtb	r3, r3
 810575e:	4013      	ands	r3, r2
 8105760:	b2da      	uxtb	r2, r3
 8105762:	69fb      	ldr	r3, [r7, #28]
 8105764:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8105766:	69fb      	ldr	r3, [r7, #28]
 8105768:	3301      	adds	r3, #1
 810576a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 810576c:	68fb      	ldr	r3, [r7, #12]
 810576e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8105772:	b29b      	uxth	r3, r3
 8105774:	3b01      	subs	r3, #1
 8105776:	b29a      	uxth	r2, r3
 8105778:	68fb      	ldr	r3, [r7, #12]
 810577a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 810577e:	68fb      	ldr	r3, [r7, #12]
 8105780:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8105784:	b29b      	uxth	r3, r3
 8105786:	2b00      	cmp	r3, #0
 8105788:	d1c2      	bne.n	8105710 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 810578a:	68fb      	ldr	r3, [r7, #12]
 810578c:	2220      	movs	r2, #32
 810578e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8105792:	2300      	movs	r3, #0
 8105794:	e000      	b.n	8105798 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8105796:	2302      	movs	r3, #2
  }
}
 8105798:	4618      	mov	r0, r3
 810579a:	3720      	adds	r7, #32
 810579c:	46bd      	mov	sp, r7
 810579e:	bd80      	pop	{r7, pc}

081057a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 81057a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81057a4:	b092      	sub	sp, #72	; 0x48
 81057a6:	af00      	add	r7, sp, #0
 81057a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 81057aa:	2300      	movs	r3, #0
 81057ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 81057b0:	697b      	ldr	r3, [r7, #20]
 81057b2:	689a      	ldr	r2, [r3, #8]
 81057b4:	697b      	ldr	r3, [r7, #20]
 81057b6:	691b      	ldr	r3, [r3, #16]
 81057b8:	431a      	orrs	r2, r3
 81057ba:	697b      	ldr	r3, [r7, #20]
 81057bc:	695b      	ldr	r3, [r3, #20]
 81057be:	431a      	orrs	r2, r3
 81057c0:	697b      	ldr	r3, [r7, #20]
 81057c2:	69db      	ldr	r3, [r3, #28]
 81057c4:	4313      	orrs	r3, r2
 81057c6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 81057c8:	697b      	ldr	r3, [r7, #20]
 81057ca:	681b      	ldr	r3, [r3, #0]
 81057cc:	681a      	ldr	r2, [r3, #0]
 81057ce:	4bbd      	ldr	r3, [pc, #756]	; (8105ac4 <UART_SetConfig+0x324>)
 81057d0:	4013      	ands	r3, r2
 81057d2:	697a      	ldr	r2, [r7, #20]
 81057d4:	6812      	ldr	r2, [r2, #0]
 81057d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 81057d8:	430b      	orrs	r3, r1
 81057da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 81057dc:	697b      	ldr	r3, [r7, #20]
 81057de:	681b      	ldr	r3, [r3, #0]
 81057e0:	685b      	ldr	r3, [r3, #4]
 81057e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 81057e6:	697b      	ldr	r3, [r7, #20]
 81057e8:	68da      	ldr	r2, [r3, #12]
 81057ea:	697b      	ldr	r3, [r7, #20]
 81057ec:	681b      	ldr	r3, [r3, #0]
 81057ee:	430a      	orrs	r2, r1
 81057f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 81057f2:	697b      	ldr	r3, [r7, #20]
 81057f4:	699b      	ldr	r3, [r3, #24]
 81057f6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 81057f8:	697b      	ldr	r3, [r7, #20]
 81057fa:	681b      	ldr	r3, [r3, #0]
 81057fc:	4ab2      	ldr	r2, [pc, #712]	; (8105ac8 <UART_SetConfig+0x328>)
 81057fe:	4293      	cmp	r3, r2
 8105800:	d004      	beq.n	810580c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8105802:	697b      	ldr	r3, [r7, #20]
 8105804:	6a1b      	ldr	r3, [r3, #32]
 8105806:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8105808:	4313      	orrs	r3, r2
 810580a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810580c:	697b      	ldr	r3, [r7, #20]
 810580e:	681b      	ldr	r3, [r3, #0]
 8105810:	689b      	ldr	r3, [r3, #8]
 8105812:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8105816:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 810581a:	697a      	ldr	r2, [r7, #20]
 810581c:	6812      	ldr	r2, [r2, #0]
 810581e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8105820:	430b      	orrs	r3, r1
 8105822:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8105824:	697b      	ldr	r3, [r7, #20]
 8105826:	681b      	ldr	r3, [r3, #0]
 8105828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810582a:	f023 010f 	bic.w	r1, r3, #15
 810582e:	697b      	ldr	r3, [r7, #20]
 8105830:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8105832:	697b      	ldr	r3, [r7, #20]
 8105834:	681b      	ldr	r3, [r3, #0]
 8105836:	430a      	orrs	r2, r1
 8105838:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810583a:	697b      	ldr	r3, [r7, #20]
 810583c:	681b      	ldr	r3, [r3, #0]
 810583e:	4aa3      	ldr	r2, [pc, #652]	; (8105acc <UART_SetConfig+0x32c>)
 8105840:	4293      	cmp	r3, r2
 8105842:	d177      	bne.n	8105934 <UART_SetConfig+0x194>
 8105844:	4ba2      	ldr	r3, [pc, #648]	; (8105ad0 <UART_SetConfig+0x330>)
 8105846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105848:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810584c:	2b28      	cmp	r3, #40	; 0x28
 810584e:	d86d      	bhi.n	810592c <UART_SetConfig+0x18c>
 8105850:	a201      	add	r2, pc, #4	; (adr r2, 8105858 <UART_SetConfig+0xb8>)
 8105852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105856:	bf00      	nop
 8105858:	081058fd 	.word	0x081058fd
 810585c:	0810592d 	.word	0x0810592d
 8105860:	0810592d 	.word	0x0810592d
 8105864:	0810592d 	.word	0x0810592d
 8105868:	0810592d 	.word	0x0810592d
 810586c:	0810592d 	.word	0x0810592d
 8105870:	0810592d 	.word	0x0810592d
 8105874:	0810592d 	.word	0x0810592d
 8105878:	08105905 	.word	0x08105905
 810587c:	0810592d 	.word	0x0810592d
 8105880:	0810592d 	.word	0x0810592d
 8105884:	0810592d 	.word	0x0810592d
 8105888:	0810592d 	.word	0x0810592d
 810588c:	0810592d 	.word	0x0810592d
 8105890:	0810592d 	.word	0x0810592d
 8105894:	0810592d 	.word	0x0810592d
 8105898:	0810590d 	.word	0x0810590d
 810589c:	0810592d 	.word	0x0810592d
 81058a0:	0810592d 	.word	0x0810592d
 81058a4:	0810592d 	.word	0x0810592d
 81058a8:	0810592d 	.word	0x0810592d
 81058ac:	0810592d 	.word	0x0810592d
 81058b0:	0810592d 	.word	0x0810592d
 81058b4:	0810592d 	.word	0x0810592d
 81058b8:	08105915 	.word	0x08105915
 81058bc:	0810592d 	.word	0x0810592d
 81058c0:	0810592d 	.word	0x0810592d
 81058c4:	0810592d 	.word	0x0810592d
 81058c8:	0810592d 	.word	0x0810592d
 81058cc:	0810592d 	.word	0x0810592d
 81058d0:	0810592d 	.word	0x0810592d
 81058d4:	0810592d 	.word	0x0810592d
 81058d8:	0810591d 	.word	0x0810591d
 81058dc:	0810592d 	.word	0x0810592d
 81058e0:	0810592d 	.word	0x0810592d
 81058e4:	0810592d 	.word	0x0810592d
 81058e8:	0810592d 	.word	0x0810592d
 81058ec:	0810592d 	.word	0x0810592d
 81058f0:	0810592d 	.word	0x0810592d
 81058f4:	0810592d 	.word	0x0810592d
 81058f8:	08105925 	.word	0x08105925
 81058fc:	2301      	movs	r3, #1
 81058fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105902:	e220      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105904:	2304      	movs	r3, #4
 8105906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810590a:	e21c      	b.n	8105d46 <UART_SetConfig+0x5a6>
 810590c:	2308      	movs	r3, #8
 810590e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105912:	e218      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105914:	2310      	movs	r3, #16
 8105916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810591a:	e214      	b.n	8105d46 <UART_SetConfig+0x5a6>
 810591c:	2320      	movs	r3, #32
 810591e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105922:	e210      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105924:	2340      	movs	r3, #64	; 0x40
 8105926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810592a:	e20c      	b.n	8105d46 <UART_SetConfig+0x5a6>
 810592c:	2380      	movs	r3, #128	; 0x80
 810592e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105932:	e208      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105934:	697b      	ldr	r3, [r7, #20]
 8105936:	681b      	ldr	r3, [r3, #0]
 8105938:	4a66      	ldr	r2, [pc, #408]	; (8105ad4 <UART_SetConfig+0x334>)
 810593a:	4293      	cmp	r3, r2
 810593c:	d130      	bne.n	81059a0 <UART_SetConfig+0x200>
 810593e:	4b64      	ldr	r3, [pc, #400]	; (8105ad0 <UART_SetConfig+0x330>)
 8105940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105942:	f003 0307 	and.w	r3, r3, #7
 8105946:	2b05      	cmp	r3, #5
 8105948:	d826      	bhi.n	8105998 <UART_SetConfig+0x1f8>
 810594a:	a201      	add	r2, pc, #4	; (adr r2, 8105950 <UART_SetConfig+0x1b0>)
 810594c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105950:	08105969 	.word	0x08105969
 8105954:	08105971 	.word	0x08105971
 8105958:	08105979 	.word	0x08105979
 810595c:	08105981 	.word	0x08105981
 8105960:	08105989 	.word	0x08105989
 8105964:	08105991 	.word	0x08105991
 8105968:	2300      	movs	r3, #0
 810596a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810596e:	e1ea      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105970:	2304      	movs	r3, #4
 8105972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105976:	e1e6      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105978:	2308      	movs	r3, #8
 810597a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810597e:	e1e2      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105980:	2310      	movs	r3, #16
 8105982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105986:	e1de      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105988:	2320      	movs	r3, #32
 810598a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810598e:	e1da      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105990:	2340      	movs	r3, #64	; 0x40
 8105992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105996:	e1d6      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105998:	2380      	movs	r3, #128	; 0x80
 810599a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810599e:	e1d2      	b.n	8105d46 <UART_SetConfig+0x5a6>
 81059a0:	697b      	ldr	r3, [r7, #20]
 81059a2:	681b      	ldr	r3, [r3, #0]
 81059a4:	4a4c      	ldr	r2, [pc, #304]	; (8105ad8 <UART_SetConfig+0x338>)
 81059a6:	4293      	cmp	r3, r2
 81059a8:	d130      	bne.n	8105a0c <UART_SetConfig+0x26c>
 81059aa:	4b49      	ldr	r3, [pc, #292]	; (8105ad0 <UART_SetConfig+0x330>)
 81059ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81059ae:	f003 0307 	and.w	r3, r3, #7
 81059b2:	2b05      	cmp	r3, #5
 81059b4:	d826      	bhi.n	8105a04 <UART_SetConfig+0x264>
 81059b6:	a201      	add	r2, pc, #4	; (adr r2, 81059bc <UART_SetConfig+0x21c>)
 81059b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81059bc:	081059d5 	.word	0x081059d5
 81059c0:	081059dd 	.word	0x081059dd
 81059c4:	081059e5 	.word	0x081059e5
 81059c8:	081059ed 	.word	0x081059ed
 81059cc:	081059f5 	.word	0x081059f5
 81059d0:	081059fd 	.word	0x081059fd
 81059d4:	2300      	movs	r3, #0
 81059d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81059da:	e1b4      	b.n	8105d46 <UART_SetConfig+0x5a6>
 81059dc:	2304      	movs	r3, #4
 81059de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81059e2:	e1b0      	b.n	8105d46 <UART_SetConfig+0x5a6>
 81059e4:	2308      	movs	r3, #8
 81059e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81059ea:	e1ac      	b.n	8105d46 <UART_SetConfig+0x5a6>
 81059ec:	2310      	movs	r3, #16
 81059ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81059f2:	e1a8      	b.n	8105d46 <UART_SetConfig+0x5a6>
 81059f4:	2320      	movs	r3, #32
 81059f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81059fa:	e1a4      	b.n	8105d46 <UART_SetConfig+0x5a6>
 81059fc:	2340      	movs	r3, #64	; 0x40
 81059fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105a02:	e1a0      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105a04:	2380      	movs	r3, #128	; 0x80
 8105a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105a0a:	e19c      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105a0c:	697b      	ldr	r3, [r7, #20]
 8105a0e:	681b      	ldr	r3, [r3, #0]
 8105a10:	4a32      	ldr	r2, [pc, #200]	; (8105adc <UART_SetConfig+0x33c>)
 8105a12:	4293      	cmp	r3, r2
 8105a14:	d130      	bne.n	8105a78 <UART_SetConfig+0x2d8>
 8105a16:	4b2e      	ldr	r3, [pc, #184]	; (8105ad0 <UART_SetConfig+0x330>)
 8105a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105a1a:	f003 0307 	and.w	r3, r3, #7
 8105a1e:	2b05      	cmp	r3, #5
 8105a20:	d826      	bhi.n	8105a70 <UART_SetConfig+0x2d0>
 8105a22:	a201      	add	r2, pc, #4	; (adr r2, 8105a28 <UART_SetConfig+0x288>)
 8105a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105a28:	08105a41 	.word	0x08105a41
 8105a2c:	08105a49 	.word	0x08105a49
 8105a30:	08105a51 	.word	0x08105a51
 8105a34:	08105a59 	.word	0x08105a59
 8105a38:	08105a61 	.word	0x08105a61
 8105a3c:	08105a69 	.word	0x08105a69
 8105a40:	2300      	movs	r3, #0
 8105a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105a46:	e17e      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105a48:	2304      	movs	r3, #4
 8105a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105a4e:	e17a      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105a50:	2308      	movs	r3, #8
 8105a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105a56:	e176      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105a58:	2310      	movs	r3, #16
 8105a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105a5e:	e172      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105a60:	2320      	movs	r3, #32
 8105a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105a66:	e16e      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105a68:	2340      	movs	r3, #64	; 0x40
 8105a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105a6e:	e16a      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105a70:	2380      	movs	r3, #128	; 0x80
 8105a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105a76:	e166      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105a78:	697b      	ldr	r3, [r7, #20]
 8105a7a:	681b      	ldr	r3, [r3, #0]
 8105a7c:	4a18      	ldr	r2, [pc, #96]	; (8105ae0 <UART_SetConfig+0x340>)
 8105a7e:	4293      	cmp	r3, r2
 8105a80:	d140      	bne.n	8105b04 <UART_SetConfig+0x364>
 8105a82:	4b13      	ldr	r3, [pc, #76]	; (8105ad0 <UART_SetConfig+0x330>)
 8105a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105a86:	f003 0307 	and.w	r3, r3, #7
 8105a8a:	2b05      	cmp	r3, #5
 8105a8c:	d836      	bhi.n	8105afc <UART_SetConfig+0x35c>
 8105a8e:	a201      	add	r2, pc, #4	; (adr r2, 8105a94 <UART_SetConfig+0x2f4>)
 8105a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105a94:	08105aad 	.word	0x08105aad
 8105a98:	08105ab5 	.word	0x08105ab5
 8105a9c:	08105abd 	.word	0x08105abd
 8105aa0:	08105ae5 	.word	0x08105ae5
 8105aa4:	08105aed 	.word	0x08105aed
 8105aa8:	08105af5 	.word	0x08105af5
 8105aac:	2300      	movs	r3, #0
 8105aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105ab2:	e148      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105ab4:	2304      	movs	r3, #4
 8105ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105aba:	e144      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105abc:	2308      	movs	r3, #8
 8105abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105ac2:	e140      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105ac4:	cfff69f3 	.word	0xcfff69f3
 8105ac8:	58000c00 	.word	0x58000c00
 8105acc:	40011000 	.word	0x40011000
 8105ad0:	58024400 	.word	0x58024400
 8105ad4:	40004400 	.word	0x40004400
 8105ad8:	40004800 	.word	0x40004800
 8105adc:	40004c00 	.word	0x40004c00
 8105ae0:	40005000 	.word	0x40005000
 8105ae4:	2310      	movs	r3, #16
 8105ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105aea:	e12c      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105aec:	2320      	movs	r3, #32
 8105aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105af2:	e128      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105af4:	2340      	movs	r3, #64	; 0x40
 8105af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105afa:	e124      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105afc:	2380      	movs	r3, #128	; 0x80
 8105afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105b02:	e120      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105b04:	697b      	ldr	r3, [r7, #20]
 8105b06:	681b      	ldr	r3, [r3, #0]
 8105b08:	4acb      	ldr	r2, [pc, #812]	; (8105e38 <UART_SetConfig+0x698>)
 8105b0a:	4293      	cmp	r3, r2
 8105b0c:	d176      	bne.n	8105bfc <UART_SetConfig+0x45c>
 8105b0e:	4bcb      	ldr	r3, [pc, #812]	; (8105e3c <UART_SetConfig+0x69c>)
 8105b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105b12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8105b16:	2b28      	cmp	r3, #40	; 0x28
 8105b18:	d86c      	bhi.n	8105bf4 <UART_SetConfig+0x454>
 8105b1a:	a201      	add	r2, pc, #4	; (adr r2, 8105b20 <UART_SetConfig+0x380>)
 8105b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105b20:	08105bc5 	.word	0x08105bc5
 8105b24:	08105bf5 	.word	0x08105bf5
 8105b28:	08105bf5 	.word	0x08105bf5
 8105b2c:	08105bf5 	.word	0x08105bf5
 8105b30:	08105bf5 	.word	0x08105bf5
 8105b34:	08105bf5 	.word	0x08105bf5
 8105b38:	08105bf5 	.word	0x08105bf5
 8105b3c:	08105bf5 	.word	0x08105bf5
 8105b40:	08105bcd 	.word	0x08105bcd
 8105b44:	08105bf5 	.word	0x08105bf5
 8105b48:	08105bf5 	.word	0x08105bf5
 8105b4c:	08105bf5 	.word	0x08105bf5
 8105b50:	08105bf5 	.word	0x08105bf5
 8105b54:	08105bf5 	.word	0x08105bf5
 8105b58:	08105bf5 	.word	0x08105bf5
 8105b5c:	08105bf5 	.word	0x08105bf5
 8105b60:	08105bd5 	.word	0x08105bd5
 8105b64:	08105bf5 	.word	0x08105bf5
 8105b68:	08105bf5 	.word	0x08105bf5
 8105b6c:	08105bf5 	.word	0x08105bf5
 8105b70:	08105bf5 	.word	0x08105bf5
 8105b74:	08105bf5 	.word	0x08105bf5
 8105b78:	08105bf5 	.word	0x08105bf5
 8105b7c:	08105bf5 	.word	0x08105bf5
 8105b80:	08105bdd 	.word	0x08105bdd
 8105b84:	08105bf5 	.word	0x08105bf5
 8105b88:	08105bf5 	.word	0x08105bf5
 8105b8c:	08105bf5 	.word	0x08105bf5
 8105b90:	08105bf5 	.word	0x08105bf5
 8105b94:	08105bf5 	.word	0x08105bf5
 8105b98:	08105bf5 	.word	0x08105bf5
 8105b9c:	08105bf5 	.word	0x08105bf5
 8105ba0:	08105be5 	.word	0x08105be5
 8105ba4:	08105bf5 	.word	0x08105bf5
 8105ba8:	08105bf5 	.word	0x08105bf5
 8105bac:	08105bf5 	.word	0x08105bf5
 8105bb0:	08105bf5 	.word	0x08105bf5
 8105bb4:	08105bf5 	.word	0x08105bf5
 8105bb8:	08105bf5 	.word	0x08105bf5
 8105bbc:	08105bf5 	.word	0x08105bf5
 8105bc0:	08105bed 	.word	0x08105bed
 8105bc4:	2301      	movs	r3, #1
 8105bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105bca:	e0bc      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105bcc:	2304      	movs	r3, #4
 8105bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105bd2:	e0b8      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105bd4:	2308      	movs	r3, #8
 8105bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105bda:	e0b4      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105bdc:	2310      	movs	r3, #16
 8105bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105be2:	e0b0      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105be4:	2320      	movs	r3, #32
 8105be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105bea:	e0ac      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105bec:	2340      	movs	r3, #64	; 0x40
 8105bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105bf2:	e0a8      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105bf4:	2380      	movs	r3, #128	; 0x80
 8105bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105bfa:	e0a4      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105bfc:	697b      	ldr	r3, [r7, #20]
 8105bfe:	681b      	ldr	r3, [r3, #0]
 8105c00:	4a8f      	ldr	r2, [pc, #572]	; (8105e40 <UART_SetConfig+0x6a0>)
 8105c02:	4293      	cmp	r3, r2
 8105c04:	d130      	bne.n	8105c68 <UART_SetConfig+0x4c8>
 8105c06:	4b8d      	ldr	r3, [pc, #564]	; (8105e3c <UART_SetConfig+0x69c>)
 8105c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105c0a:	f003 0307 	and.w	r3, r3, #7
 8105c0e:	2b05      	cmp	r3, #5
 8105c10:	d826      	bhi.n	8105c60 <UART_SetConfig+0x4c0>
 8105c12:	a201      	add	r2, pc, #4	; (adr r2, 8105c18 <UART_SetConfig+0x478>)
 8105c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105c18:	08105c31 	.word	0x08105c31
 8105c1c:	08105c39 	.word	0x08105c39
 8105c20:	08105c41 	.word	0x08105c41
 8105c24:	08105c49 	.word	0x08105c49
 8105c28:	08105c51 	.word	0x08105c51
 8105c2c:	08105c59 	.word	0x08105c59
 8105c30:	2300      	movs	r3, #0
 8105c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105c36:	e086      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105c38:	2304      	movs	r3, #4
 8105c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105c3e:	e082      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105c40:	2308      	movs	r3, #8
 8105c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105c46:	e07e      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105c48:	2310      	movs	r3, #16
 8105c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105c4e:	e07a      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105c50:	2320      	movs	r3, #32
 8105c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105c56:	e076      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105c58:	2340      	movs	r3, #64	; 0x40
 8105c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105c5e:	e072      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105c60:	2380      	movs	r3, #128	; 0x80
 8105c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105c66:	e06e      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105c68:	697b      	ldr	r3, [r7, #20]
 8105c6a:	681b      	ldr	r3, [r3, #0]
 8105c6c:	4a75      	ldr	r2, [pc, #468]	; (8105e44 <UART_SetConfig+0x6a4>)
 8105c6e:	4293      	cmp	r3, r2
 8105c70:	d130      	bne.n	8105cd4 <UART_SetConfig+0x534>
 8105c72:	4b72      	ldr	r3, [pc, #456]	; (8105e3c <UART_SetConfig+0x69c>)
 8105c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105c76:	f003 0307 	and.w	r3, r3, #7
 8105c7a:	2b05      	cmp	r3, #5
 8105c7c:	d826      	bhi.n	8105ccc <UART_SetConfig+0x52c>
 8105c7e:	a201      	add	r2, pc, #4	; (adr r2, 8105c84 <UART_SetConfig+0x4e4>)
 8105c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105c84:	08105c9d 	.word	0x08105c9d
 8105c88:	08105ca5 	.word	0x08105ca5
 8105c8c:	08105cad 	.word	0x08105cad
 8105c90:	08105cb5 	.word	0x08105cb5
 8105c94:	08105cbd 	.word	0x08105cbd
 8105c98:	08105cc5 	.word	0x08105cc5
 8105c9c:	2300      	movs	r3, #0
 8105c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105ca2:	e050      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105ca4:	2304      	movs	r3, #4
 8105ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105caa:	e04c      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105cac:	2308      	movs	r3, #8
 8105cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105cb2:	e048      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105cb4:	2310      	movs	r3, #16
 8105cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105cba:	e044      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105cbc:	2320      	movs	r3, #32
 8105cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105cc2:	e040      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105cc4:	2340      	movs	r3, #64	; 0x40
 8105cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105cca:	e03c      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105ccc:	2380      	movs	r3, #128	; 0x80
 8105cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105cd2:	e038      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105cd4:	697b      	ldr	r3, [r7, #20]
 8105cd6:	681b      	ldr	r3, [r3, #0]
 8105cd8:	4a5b      	ldr	r2, [pc, #364]	; (8105e48 <UART_SetConfig+0x6a8>)
 8105cda:	4293      	cmp	r3, r2
 8105cdc:	d130      	bne.n	8105d40 <UART_SetConfig+0x5a0>
 8105cde:	4b57      	ldr	r3, [pc, #348]	; (8105e3c <UART_SetConfig+0x69c>)
 8105ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105ce2:	f003 0307 	and.w	r3, r3, #7
 8105ce6:	2b05      	cmp	r3, #5
 8105ce8:	d826      	bhi.n	8105d38 <UART_SetConfig+0x598>
 8105cea:	a201      	add	r2, pc, #4	; (adr r2, 8105cf0 <UART_SetConfig+0x550>)
 8105cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105cf0:	08105d09 	.word	0x08105d09
 8105cf4:	08105d11 	.word	0x08105d11
 8105cf8:	08105d19 	.word	0x08105d19
 8105cfc:	08105d21 	.word	0x08105d21
 8105d00:	08105d29 	.word	0x08105d29
 8105d04:	08105d31 	.word	0x08105d31
 8105d08:	2302      	movs	r3, #2
 8105d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105d0e:	e01a      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105d10:	2304      	movs	r3, #4
 8105d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105d16:	e016      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105d18:	2308      	movs	r3, #8
 8105d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105d1e:	e012      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105d20:	2310      	movs	r3, #16
 8105d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105d26:	e00e      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105d28:	2320      	movs	r3, #32
 8105d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105d2e:	e00a      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105d30:	2340      	movs	r3, #64	; 0x40
 8105d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105d36:	e006      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105d38:	2380      	movs	r3, #128	; 0x80
 8105d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105d3e:	e002      	b.n	8105d46 <UART_SetConfig+0x5a6>
 8105d40:	2380      	movs	r3, #128	; 0x80
 8105d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8105d46:	697b      	ldr	r3, [r7, #20]
 8105d48:	681b      	ldr	r3, [r3, #0]
 8105d4a:	4a3f      	ldr	r2, [pc, #252]	; (8105e48 <UART_SetConfig+0x6a8>)
 8105d4c:	4293      	cmp	r3, r2
 8105d4e:	f040 80f8 	bne.w	8105f42 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8105d52:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8105d56:	2b20      	cmp	r3, #32
 8105d58:	dc46      	bgt.n	8105de8 <UART_SetConfig+0x648>
 8105d5a:	2b02      	cmp	r3, #2
 8105d5c:	f2c0 8082 	blt.w	8105e64 <UART_SetConfig+0x6c4>
 8105d60:	3b02      	subs	r3, #2
 8105d62:	2b1e      	cmp	r3, #30
 8105d64:	d87e      	bhi.n	8105e64 <UART_SetConfig+0x6c4>
 8105d66:	a201      	add	r2, pc, #4	; (adr r2, 8105d6c <UART_SetConfig+0x5cc>)
 8105d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105d6c:	08105def 	.word	0x08105def
 8105d70:	08105e65 	.word	0x08105e65
 8105d74:	08105df7 	.word	0x08105df7
 8105d78:	08105e65 	.word	0x08105e65
 8105d7c:	08105e65 	.word	0x08105e65
 8105d80:	08105e65 	.word	0x08105e65
 8105d84:	08105e07 	.word	0x08105e07
 8105d88:	08105e65 	.word	0x08105e65
 8105d8c:	08105e65 	.word	0x08105e65
 8105d90:	08105e65 	.word	0x08105e65
 8105d94:	08105e65 	.word	0x08105e65
 8105d98:	08105e65 	.word	0x08105e65
 8105d9c:	08105e65 	.word	0x08105e65
 8105da0:	08105e65 	.word	0x08105e65
 8105da4:	08105e17 	.word	0x08105e17
 8105da8:	08105e65 	.word	0x08105e65
 8105dac:	08105e65 	.word	0x08105e65
 8105db0:	08105e65 	.word	0x08105e65
 8105db4:	08105e65 	.word	0x08105e65
 8105db8:	08105e65 	.word	0x08105e65
 8105dbc:	08105e65 	.word	0x08105e65
 8105dc0:	08105e65 	.word	0x08105e65
 8105dc4:	08105e65 	.word	0x08105e65
 8105dc8:	08105e65 	.word	0x08105e65
 8105dcc:	08105e65 	.word	0x08105e65
 8105dd0:	08105e65 	.word	0x08105e65
 8105dd4:	08105e65 	.word	0x08105e65
 8105dd8:	08105e65 	.word	0x08105e65
 8105ddc:	08105e65 	.word	0x08105e65
 8105de0:	08105e65 	.word	0x08105e65
 8105de4:	08105e57 	.word	0x08105e57
 8105de8:	2b40      	cmp	r3, #64	; 0x40
 8105dea:	d037      	beq.n	8105e5c <UART_SetConfig+0x6bc>
 8105dec:	e03a      	b.n	8105e64 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8105dee:	f7fe ff0f 	bl	8104c10 <HAL_RCCEx_GetD3PCLK1Freq>
 8105df2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8105df4:	e03c      	b.n	8105e70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105dfa:	4618      	mov	r0, r3
 8105dfc:	f7fe ff1e 	bl	8104c3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105e02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105e04:	e034      	b.n	8105e70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105e06:	f107 0318 	add.w	r3, r7, #24
 8105e0a:	4618      	mov	r0, r3
 8105e0c:	f7ff f86a 	bl	8104ee4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8105e10:	69fb      	ldr	r3, [r7, #28]
 8105e12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105e14:	e02c      	b.n	8105e70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105e16:	4b09      	ldr	r3, [pc, #36]	; (8105e3c <UART_SetConfig+0x69c>)
 8105e18:	681b      	ldr	r3, [r3, #0]
 8105e1a:	f003 0320 	and.w	r3, r3, #32
 8105e1e:	2b00      	cmp	r3, #0
 8105e20:	d016      	beq.n	8105e50 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8105e22:	4b06      	ldr	r3, [pc, #24]	; (8105e3c <UART_SetConfig+0x69c>)
 8105e24:	681b      	ldr	r3, [r3, #0]
 8105e26:	08db      	lsrs	r3, r3, #3
 8105e28:	f003 0303 	and.w	r3, r3, #3
 8105e2c:	4a07      	ldr	r2, [pc, #28]	; (8105e4c <UART_SetConfig+0x6ac>)
 8105e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8105e32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8105e34:	e01c      	b.n	8105e70 <UART_SetConfig+0x6d0>
 8105e36:	bf00      	nop
 8105e38:	40011400 	.word	0x40011400
 8105e3c:	58024400 	.word	0x58024400
 8105e40:	40007800 	.word	0x40007800
 8105e44:	40007c00 	.word	0x40007c00
 8105e48:	58000c00 	.word	0x58000c00
 8105e4c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8105e50:	4b9d      	ldr	r3, [pc, #628]	; (81060c8 <UART_SetConfig+0x928>)
 8105e52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105e54:	e00c      	b.n	8105e70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8105e56:	4b9d      	ldr	r3, [pc, #628]	; (81060cc <UART_SetConfig+0x92c>)
 8105e58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105e5a:	e009      	b.n	8105e70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8105e5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8105e60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105e62:	e005      	b.n	8105e70 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8105e64:	2300      	movs	r3, #0
 8105e66:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8105e68:	2301      	movs	r3, #1
 8105e6a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8105e6e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8105e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105e72:	2b00      	cmp	r3, #0
 8105e74:	f000 81de 	beq.w	8106234 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8105e78:	697b      	ldr	r3, [r7, #20]
 8105e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105e7c:	4a94      	ldr	r2, [pc, #592]	; (81060d0 <UART_SetConfig+0x930>)
 8105e7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105e82:	461a      	mov	r2, r3
 8105e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105e86:	fbb3 f3f2 	udiv	r3, r3, r2
 8105e8a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8105e8c:	697b      	ldr	r3, [r7, #20]
 8105e8e:	685a      	ldr	r2, [r3, #4]
 8105e90:	4613      	mov	r3, r2
 8105e92:	005b      	lsls	r3, r3, #1
 8105e94:	4413      	add	r3, r2
 8105e96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8105e98:	429a      	cmp	r2, r3
 8105e9a:	d305      	bcc.n	8105ea8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8105e9c:	697b      	ldr	r3, [r7, #20]
 8105e9e:	685b      	ldr	r3, [r3, #4]
 8105ea0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8105ea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8105ea4:	429a      	cmp	r2, r3
 8105ea6:	d903      	bls.n	8105eb0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8105ea8:	2301      	movs	r3, #1
 8105eaa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8105eae:	e1c1      	b.n	8106234 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8105eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105eb2:	2200      	movs	r2, #0
 8105eb4:	60bb      	str	r3, [r7, #8]
 8105eb6:	60fa      	str	r2, [r7, #12]
 8105eb8:	697b      	ldr	r3, [r7, #20]
 8105eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105ebc:	4a84      	ldr	r2, [pc, #528]	; (81060d0 <UART_SetConfig+0x930>)
 8105ebe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105ec2:	b29b      	uxth	r3, r3
 8105ec4:	2200      	movs	r2, #0
 8105ec6:	603b      	str	r3, [r7, #0]
 8105ec8:	607a      	str	r2, [r7, #4]
 8105eca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105ece:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8105ed2:	f7fa ff61 	bl	8100d98 <__aeabi_uldivmod>
 8105ed6:	4602      	mov	r2, r0
 8105ed8:	460b      	mov	r3, r1
 8105eda:	4610      	mov	r0, r2
 8105edc:	4619      	mov	r1, r3
 8105ede:	f04f 0200 	mov.w	r2, #0
 8105ee2:	f04f 0300 	mov.w	r3, #0
 8105ee6:	020b      	lsls	r3, r1, #8
 8105ee8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8105eec:	0202      	lsls	r2, r0, #8
 8105eee:	6979      	ldr	r1, [r7, #20]
 8105ef0:	6849      	ldr	r1, [r1, #4]
 8105ef2:	0849      	lsrs	r1, r1, #1
 8105ef4:	2000      	movs	r0, #0
 8105ef6:	460c      	mov	r4, r1
 8105ef8:	4605      	mov	r5, r0
 8105efa:	eb12 0804 	adds.w	r8, r2, r4
 8105efe:	eb43 0905 	adc.w	r9, r3, r5
 8105f02:	697b      	ldr	r3, [r7, #20]
 8105f04:	685b      	ldr	r3, [r3, #4]
 8105f06:	2200      	movs	r2, #0
 8105f08:	469a      	mov	sl, r3
 8105f0a:	4693      	mov	fp, r2
 8105f0c:	4652      	mov	r2, sl
 8105f0e:	465b      	mov	r3, fp
 8105f10:	4640      	mov	r0, r8
 8105f12:	4649      	mov	r1, r9
 8105f14:	f7fa ff40 	bl	8100d98 <__aeabi_uldivmod>
 8105f18:	4602      	mov	r2, r0
 8105f1a:	460b      	mov	r3, r1
 8105f1c:	4613      	mov	r3, r2
 8105f1e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8105f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105f22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105f26:	d308      	bcc.n	8105f3a <UART_SetConfig+0x79a>
 8105f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105f2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105f2e:	d204      	bcs.n	8105f3a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8105f30:	697b      	ldr	r3, [r7, #20]
 8105f32:	681b      	ldr	r3, [r3, #0]
 8105f34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8105f36:	60da      	str	r2, [r3, #12]
 8105f38:	e17c      	b.n	8106234 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8105f3a:	2301      	movs	r3, #1
 8105f3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8105f40:	e178      	b.n	8106234 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8105f42:	697b      	ldr	r3, [r7, #20]
 8105f44:	69db      	ldr	r3, [r3, #28]
 8105f46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8105f4a:	f040 80c5 	bne.w	81060d8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8105f4e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8105f52:	2b20      	cmp	r3, #32
 8105f54:	dc48      	bgt.n	8105fe8 <UART_SetConfig+0x848>
 8105f56:	2b00      	cmp	r3, #0
 8105f58:	db7b      	blt.n	8106052 <UART_SetConfig+0x8b2>
 8105f5a:	2b20      	cmp	r3, #32
 8105f5c:	d879      	bhi.n	8106052 <UART_SetConfig+0x8b2>
 8105f5e:	a201      	add	r2, pc, #4	; (adr r2, 8105f64 <UART_SetConfig+0x7c4>)
 8105f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105f64:	08105fef 	.word	0x08105fef
 8105f68:	08105ff7 	.word	0x08105ff7
 8105f6c:	08106053 	.word	0x08106053
 8105f70:	08106053 	.word	0x08106053
 8105f74:	08105fff 	.word	0x08105fff
 8105f78:	08106053 	.word	0x08106053
 8105f7c:	08106053 	.word	0x08106053
 8105f80:	08106053 	.word	0x08106053
 8105f84:	0810600f 	.word	0x0810600f
 8105f88:	08106053 	.word	0x08106053
 8105f8c:	08106053 	.word	0x08106053
 8105f90:	08106053 	.word	0x08106053
 8105f94:	08106053 	.word	0x08106053
 8105f98:	08106053 	.word	0x08106053
 8105f9c:	08106053 	.word	0x08106053
 8105fa0:	08106053 	.word	0x08106053
 8105fa4:	0810601f 	.word	0x0810601f
 8105fa8:	08106053 	.word	0x08106053
 8105fac:	08106053 	.word	0x08106053
 8105fb0:	08106053 	.word	0x08106053
 8105fb4:	08106053 	.word	0x08106053
 8105fb8:	08106053 	.word	0x08106053
 8105fbc:	08106053 	.word	0x08106053
 8105fc0:	08106053 	.word	0x08106053
 8105fc4:	08106053 	.word	0x08106053
 8105fc8:	08106053 	.word	0x08106053
 8105fcc:	08106053 	.word	0x08106053
 8105fd0:	08106053 	.word	0x08106053
 8105fd4:	08106053 	.word	0x08106053
 8105fd8:	08106053 	.word	0x08106053
 8105fdc:	08106053 	.word	0x08106053
 8105fe0:	08106053 	.word	0x08106053
 8105fe4:	08106045 	.word	0x08106045
 8105fe8:	2b40      	cmp	r3, #64	; 0x40
 8105fea:	d02e      	beq.n	810604a <UART_SetConfig+0x8aa>
 8105fec:	e031      	b.n	8106052 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8105fee:	f7fd fbd9 	bl	81037a4 <HAL_RCC_GetPCLK1Freq>
 8105ff2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8105ff4:	e033      	b.n	810605e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8105ff6:	f7fd fbeb 	bl	81037d0 <HAL_RCC_GetPCLK2Freq>
 8105ffa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8105ffc:	e02f      	b.n	810605e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106002:	4618      	mov	r0, r3
 8106004:	f7fe fe1a 	bl	8104c3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8106008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810600a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810600c:	e027      	b.n	810605e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810600e:	f107 0318 	add.w	r3, r7, #24
 8106012:	4618      	mov	r0, r3
 8106014:	f7fe ff66 	bl	8104ee4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8106018:	69fb      	ldr	r3, [r7, #28]
 810601a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810601c:	e01f      	b.n	810605e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810601e:	4b2d      	ldr	r3, [pc, #180]	; (81060d4 <UART_SetConfig+0x934>)
 8106020:	681b      	ldr	r3, [r3, #0]
 8106022:	f003 0320 	and.w	r3, r3, #32
 8106026:	2b00      	cmp	r3, #0
 8106028:	d009      	beq.n	810603e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810602a:	4b2a      	ldr	r3, [pc, #168]	; (81060d4 <UART_SetConfig+0x934>)
 810602c:	681b      	ldr	r3, [r3, #0]
 810602e:	08db      	lsrs	r3, r3, #3
 8106030:	f003 0303 	and.w	r3, r3, #3
 8106034:	4a24      	ldr	r2, [pc, #144]	; (81060c8 <UART_SetConfig+0x928>)
 8106036:	fa22 f303 	lsr.w	r3, r2, r3
 810603a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810603c:	e00f      	b.n	810605e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810603e:	4b22      	ldr	r3, [pc, #136]	; (81060c8 <UART_SetConfig+0x928>)
 8106040:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106042:	e00c      	b.n	810605e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8106044:	4b21      	ldr	r3, [pc, #132]	; (81060cc <UART_SetConfig+0x92c>)
 8106046:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106048:	e009      	b.n	810605e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810604a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810604e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106050:	e005      	b.n	810605e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8106052:	2300      	movs	r3, #0
 8106054:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8106056:	2301      	movs	r3, #1
 8106058:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810605c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810605e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106060:	2b00      	cmp	r3, #0
 8106062:	f000 80e7 	beq.w	8106234 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8106066:	697b      	ldr	r3, [r7, #20]
 8106068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810606a:	4a19      	ldr	r2, [pc, #100]	; (81060d0 <UART_SetConfig+0x930>)
 810606c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8106070:	461a      	mov	r2, r3
 8106072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106074:	fbb3 f3f2 	udiv	r3, r3, r2
 8106078:	005a      	lsls	r2, r3, #1
 810607a:	697b      	ldr	r3, [r7, #20]
 810607c:	685b      	ldr	r3, [r3, #4]
 810607e:	085b      	lsrs	r3, r3, #1
 8106080:	441a      	add	r2, r3
 8106082:	697b      	ldr	r3, [r7, #20]
 8106084:	685b      	ldr	r3, [r3, #4]
 8106086:	fbb2 f3f3 	udiv	r3, r2, r3
 810608a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810608c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810608e:	2b0f      	cmp	r3, #15
 8106090:	d916      	bls.n	81060c0 <UART_SetConfig+0x920>
 8106092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106098:	d212      	bcs.n	81060c0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810609a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810609c:	b29b      	uxth	r3, r3
 810609e:	f023 030f 	bic.w	r3, r3, #15
 81060a2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 81060a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81060a6:	085b      	lsrs	r3, r3, #1
 81060a8:	b29b      	uxth	r3, r3
 81060aa:	f003 0307 	and.w	r3, r3, #7
 81060ae:	b29a      	uxth	r2, r3
 81060b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 81060b2:	4313      	orrs	r3, r2
 81060b4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 81060b6:	697b      	ldr	r3, [r7, #20]
 81060b8:	681b      	ldr	r3, [r3, #0]
 81060ba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 81060bc:	60da      	str	r2, [r3, #12]
 81060be:	e0b9      	b.n	8106234 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 81060c0:	2301      	movs	r3, #1
 81060c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 81060c6:	e0b5      	b.n	8106234 <UART_SetConfig+0xa94>
 81060c8:	03d09000 	.word	0x03d09000
 81060cc:	003d0900 	.word	0x003d0900
 81060d0:	0810b72c 	.word	0x0810b72c
 81060d4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 81060d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 81060dc:	2b20      	cmp	r3, #32
 81060de:	dc49      	bgt.n	8106174 <UART_SetConfig+0x9d4>
 81060e0:	2b00      	cmp	r3, #0
 81060e2:	db7c      	blt.n	81061de <UART_SetConfig+0xa3e>
 81060e4:	2b20      	cmp	r3, #32
 81060e6:	d87a      	bhi.n	81061de <UART_SetConfig+0xa3e>
 81060e8:	a201      	add	r2, pc, #4	; (adr r2, 81060f0 <UART_SetConfig+0x950>)
 81060ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81060ee:	bf00      	nop
 81060f0:	0810617b 	.word	0x0810617b
 81060f4:	08106183 	.word	0x08106183
 81060f8:	081061df 	.word	0x081061df
 81060fc:	081061df 	.word	0x081061df
 8106100:	0810618b 	.word	0x0810618b
 8106104:	081061df 	.word	0x081061df
 8106108:	081061df 	.word	0x081061df
 810610c:	081061df 	.word	0x081061df
 8106110:	0810619b 	.word	0x0810619b
 8106114:	081061df 	.word	0x081061df
 8106118:	081061df 	.word	0x081061df
 810611c:	081061df 	.word	0x081061df
 8106120:	081061df 	.word	0x081061df
 8106124:	081061df 	.word	0x081061df
 8106128:	081061df 	.word	0x081061df
 810612c:	081061df 	.word	0x081061df
 8106130:	081061ab 	.word	0x081061ab
 8106134:	081061df 	.word	0x081061df
 8106138:	081061df 	.word	0x081061df
 810613c:	081061df 	.word	0x081061df
 8106140:	081061df 	.word	0x081061df
 8106144:	081061df 	.word	0x081061df
 8106148:	081061df 	.word	0x081061df
 810614c:	081061df 	.word	0x081061df
 8106150:	081061df 	.word	0x081061df
 8106154:	081061df 	.word	0x081061df
 8106158:	081061df 	.word	0x081061df
 810615c:	081061df 	.word	0x081061df
 8106160:	081061df 	.word	0x081061df
 8106164:	081061df 	.word	0x081061df
 8106168:	081061df 	.word	0x081061df
 810616c:	081061df 	.word	0x081061df
 8106170:	081061d1 	.word	0x081061d1
 8106174:	2b40      	cmp	r3, #64	; 0x40
 8106176:	d02e      	beq.n	81061d6 <UART_SetConfig+0xa36>
 8106178:	e031      	b.n	81061de <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810617a:	f7fd fb13 	bl	81037a4 <HAL_RCC_GetPCLK1Freq>
 810617e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8106180:	e033      	b.n	81061ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8106182:	f7fd fb25 	bl	81037d0 <HAL_RCC_GetPCLK2Freq>
 8106186:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8106188:	e02f      	b.n	81061ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810618a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810618e:	4618      	mov	r0, r3
 8106190:	f7fe fd54 	bl	8104c3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8106194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106196:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106198:	e027      	b.n	81061ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810619a:	f107 0318 	add.w	r3, r7, #24
 810619e:	4618      	mov	r0, r3
 81061a0:	f7fe fea0 	bl	8104ee4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81061a4:	69fb      	ldr	r3, [r7, #28]
 81061a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81061a8:	e01f      	b.n	81061ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81061aa:	4b2d      	ldr	r3, [pc, #180]	; (8106260 <UART_SetConfig+0xac0>)
 81061ac:	681b      	ldr	r3, [r3, #0]
 81061ae:	f003 0320 	and.w	r3, r3, #32
 81061b2:	2b00      	cmp	r3, #0
 81061b4:	d009      	beq.n	81061ca <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81061b6:	4b2a      	ldr	r3, [pc, #168]	; (8106260 <UART_SetConfig+0xac0>)
 81061b8:	681b      	ldr	r3, [r3, #0]
 81061ba:	08db      	lsrs	r3, r3, #3
 81061bc:	f003 0303 	and.w	r3, r3, #3
 81061c0:	4a28      	ldr	r2, [pc, #160]	; (8106264 <UART_SetConfig+0xac4>)
 81061c2:	fa22 f303 	lsr.w	r3, r2, r3
 81061c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81061c8:	e00f      	b.n	81061ea <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 81061ca:	4b26      	ldr	r3, [pc, #152]	; (8106264 <UART_SetConfig+0xac4>)
 81061cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81061ce:	e00c      	b.n	81061ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81061d0:	4b25      	ldr	r3, [pc, #148]	; (8106268 <UART_SetConfig+0xac8>)
 81061d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81061d4:	e009      	b.n	81061ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81061d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81061da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81061dc:	e005      	b.n	81061ea <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 81061de:	2300      	movs	r3, #0
 81061e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 81061e2:	2301      	movs	r3, #1
 81061e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 81061e8:	bf00      	nop
    }

    if (pclk != 0U)
 81061ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81061ec:	2b00      	cmp	r3, #0
 81061ee:	d021      	beq.n	8106234 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81061f0:	697b      	ldr	r3, [r7, #20]
 81061f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81061f4:	4a1d      	ldr	r2, [pc, #116]	; (810626c <UART_SetConfig+0xacc>)
 81061f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81061fa:	461a      	mov	r2, r3
 81061fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81061fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8106202:	697b      	ldr	r3, [r7, #20]
 8106204:	685b      	ldr	r3, [r3, #4]
 8106206:	085b      	lsrs	r3, r3, #1
 8106208:	441a      	add	r2, r3
 810620a:	697b      	ldr	r3, [r7, #20]
 810620c:	685b      	ldr	r3, [r3, #4]
 810620e:	fbb2 f3f3 	udiv	r3, r2, r3
 8106212:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8106214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106216:	2b0f      	cmp	r3, #15
 8106218:	d909      	bls.n	810622e <UART_SetConfig+0xa8e>
 810621a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810621c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106220:	d205      	bcs.n	810622e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8106222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106224:	b29a      	uxth	r2, r3
 8106226:	697b      	ldr	r3, [r7, #20]
 8106228:	681b      	ldr	r3, [r3, #0]
 810622a:	60da      	str	r2, [r3, #12]
 810622c:	e002      	b.n	8106234 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810622e:	2301      	movs	r3, #1
 8106230:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8106234:	697b      	ldr	r3, [r7, #20]
 8106236:	2201      	movs	r2, #1
 8106238:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 810623c:	697b      	ldr	r3, [r7, #20]
 810623e:	2201      	movs	r2, #1
 8106240:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8106244:	697b      	ldr	r3, [r7, #20]
 8106246:	2200      	movs	r2, #0
 8106248:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 810624a:	697b      	ldr	r3, [r7, #20]
 810624c:	2200      	movs	r2, #0
 810624e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8106250:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8106254:	4618      	mov	r0, r3
 8106256:	3748      	adds	r7, #72	; 0x48
 8106258:	46bd      	mov	sp, r7
 810625a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810625e:	bf00      	nop
 8106260:	58024400 	.word	0x58024400
 8106264:	03d09000 	.word	0x03d09000
 8106268:	003d0900 	.word	0x003d0900
 810626c:	0810b72c 	.word	0x0810b72c

08106270 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8106270:	b480      	push	{r7}
 8106272:	b083      	sub	sp, #12
 8106274:	af00      	add	r7, sp, #0
 8106276:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8106278:	687b      	ldr	r3, [r7, #4]
 810627a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810627c:	f003 0301 	and.w	r3, r3, #1
 8106280:	2b00      	cmp	r3, #0
 8106282:	d00a      	beq.n	810629a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8106284:	687b      	ldr	r3, [r7, #4]
 8106286:	681b      	ldr	r3, [r3, #0]
 8106288:	685b      	ldr	r3, [r3, #4]
 810628a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 810628e:	687b      	ldr	r3, [r7, #4]
 8106290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8106292:	687b      	ldr	r3, [r7, #4]
 8106294:	681b      	ldr	r3, [r3, #0]
 8106296:	430a      	orrs	r2, r1
 8106298:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810629a:	687b      	ldr	r3, [r7, #4]
 810629c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810629e:	f003 0302 	and.w	r3, r3, #2
 81062a2:	2b00      	cmp	r3, #0
 81062a4:	d00a      	beq.n	81062bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 81062a6:	687b      	ldr	r3, [r7, #4]
 81062a8:	681b      	ldr	r3, [r3, #0]
 81062aa:	685b      	ldr	r3, [r3, #4]
 81062ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 81062b0:	687b      	ldr	r3, [r7, #4]
 81062b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81062b4:	687b      	ldr	r3, [r7, #4]
 81062b6:	681b      	ldr	r3, [r3, #0]
 81062b8:	430a      	orrs	r2, r1
 81062ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 81062bc:	687b      	ldr	r3, [r7, #4]
 81062be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81062c0:	f003 0304 	and.w	r3, r3, #4
 81062c4:	2b00      	cmp	r3, #0
 81062c6:	d00a      	beq.n	81062de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 81062c8:	687b      	ldr	r3, [r7, #4]
 81062ca:	681b      	ldr	r3, [r3, #0]
 81062cc:	685b      	ldr	r3, [r3, #4]
 81062ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 81062d2:	687b      	ldr	r3, [r7, #4]
 81062d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81062d6:	687b      	ldr	r3, [r7, #4]
 81062d8:	681b      	ldr	r3, [r3, #0]
 81062da:	430a      	orrs	r2, r1
 81062dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 81062de:	687b      	ldr	r3, [r7, #4]
 81062e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81062e2:	f003 0308 	and.w	r3, r3, #8
 81062e6:	2b00      	cmp	r3, #0
 81062e8:	d00a      	beq.n	8106300 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 81062ea:	687b      	ldr	r3, [r7, #4]
 81062ec:	681b      	ldr	r3, [r3, #0]
 81062ee:	685b      	ldr	r3, [r3, #4]
 81062f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 81062f4:	687b      	ldr	r3, [r7, #4]
 81062f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 81062f8:	687b      	ldr	r3, [r7, #4]
 81062fa:	681b      	ldr	r3, [r3, #0]
 81062fc:	430a      	orrs	r2, r1
 81062fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8106300:	687b      	ldr	r3, [r7, #4]
 8106302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106304:	f003 0310 	and.w	r3, r3, #16
 8106308:	2b00      	cmp	r3, #0
 810630a:	d00a      	beq.n	8106322 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810630c:	687b      	ldr	r3, [r7, #4]
 810630e:	681b      	ldr	r3, [r3, #0]
 8106310:	689b      	ldr	r3, [r3, #8]
 8106312:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8106316:	687b      	ldr	r3, [r7, #4]
 8106318:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810631a:	687b      	ldr	r3, [r7, #4]
 810631c:	681b      	ldr	r3, [r3, #0]
 810631e:	430a      	orrs	r2, r1
 8106320:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8106322:	687b      	ldr	r3, [r7, #4]
 8106324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106326:	f003 0320 	and.w	r3, r3, #32
 810632a:	2b00      	cmp	r3, #0
 810632c:	d00a      	beq.n	8106344 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810632e:	687b      	ldr	r3, [r7, #4]
 8106330:	681b      	ldr	r3, [r3, #0]
 8106332:	689b      	ldr	r3, [r3, #8]
 8106334:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8106338:	687b      	ldr	r3, [r7, #4]
 810633a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810633c:	687b      	ldr	r3, [r7, #4]
 810633e:	681b      	ldr	r3, [r3, #0]
 8106340:	430a      	orrs	r2, r1
 8106342:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8106344:	687b      	ldr	r3, [r7, #4]
 8106346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810634c:	2b00      	cmp	r3, #0
 810634e:	d01a      	beq.n	8106386 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8106350:	687b      	ldr	r3, [r7, #4]
 8106352:	681b      	ldr	r3, [r3, #0]
 8106354:	685b      	ldr	r3, [r3, #4]
 8106356:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810635a:	687b      	ldr	r3, [r7, #4]
 810635c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810635e:	687b      	ldr	r3, [r7, #4]
 8106360:	681b      	ldr	r3, [r3, #0]
 8106362:	430a      	orrs	r2, r1
 8106364:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8106366:	687b      	ldr	r3, [r7, #4]
 8106368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810636a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810636e:	d10a      	bne.n	8106386 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8106370:	687b      	ldr	r3, [r7, #4]
 8106372:	681b      	ldr	r3, [r3, #0]
 8106374:	685b      	ldr	r3, [r3, #4]
 8106376:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810637a:	687b      	ldr	r3, [r7, #4]
 810637c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810637e:	687b      	ldr	r3, [r7, #4]
 8106380:	681b      	ldr	r3, [r3, #0]
 8106382:	430a      	orrs	r2, r1
 8106384:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8106386:	687b      	ldr	r3, [r7, #4]
 8106388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810638a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810638e:	2b00      	cmp	r3, #0
 8106390:	d00a      	beq.n	81063a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8106392:	687b      	ldr	r3, [r7, #4]
 8106394:	681b      	ldr	r3, [r3, #0]
 8106396:	685b      	ldr	r3, [r3, #4]
 8106398:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 810639c:	687b      	ldr	r3, [r7, #4]
 810639e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 81063a0:	687b      	ldr	r3, [r7, #4]
 81063a2:	681b      	ldr	r3, [r3, #0]
 81063a4:	430a      	orrs	r2, r1
 81063a6:	605a      	str	r2, [r3, #4]
  }
}
 81063a8:	bf00      	nop
 81063aa:	370c      	adds	r7, #12
 81063ac:	46bd      	mov	sp, r7
 81063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063b2:	4770      	bx	lr

081063b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 81063b4:	b580      	push	{r7, lr}
 81063b6:	b098      	sub	sp, #96	; 0x60
 81063b8:	af02      	add	r7, sp, #8
 81063ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 81063bc:	687b      	ldr	r3, [r7, #4]
 81063be:	2200      	movs	r2, #0
 81063c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 81063c4:	f7fb fecc 	bl	8102160 <HAL_GetTick>
 81063c8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 81063ca:	687b      	ldr	r3, [r7, #4]
 81063cc:	681b      	ldr	r3, [r3, #0]
 81063ce:	681b      	ldr	r3, [r3, #0]
 81063d0:	f003 0308 	and.w	r3, r3, #8
 81063d4:	2b08      	cmp	r3, #8
 81063d6:	d12f      	bne.n	8106438 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81063d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 81063dc:	9300      	str	r3, [sp, #0]
 81063de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81063e0:	2200      	movs	r2, #0
 81063e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 81063e6:	6878      	ldr	r0, [r7, #4]
 81063e8:	f000 f88e 	bl	8106508 <UART_WaitOnFlagUntilTimeout>
 81063ec:	4603      	mov	r3, r0
 81063ee:	2b00      	cmp	r3, #0
 81063f0:	d022      	beq.n	8106438 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 81063f2:	687b      	ldr	r3, [r7, #4]
 81063f4:	681b      	ldr	r3, [r3, #0]
 81063f6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81063f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81063fa:	e853 3f00 	ldrex	r3, [r3]
 81063fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8106400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106402:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8106406:	653b      	str	r3, [r7, #80]	; 0x50
 8106408:	687b      	ldr	r3, [r7, #4]
 810640a:	681b      	ldr	r3, [r3, #0]
 810640c:	461a      	mov	r2, r3
 810640e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8106410:	647b      	str	r3, [r7, #68]	; 0x44
 8106412:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106414:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8106416:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8106418:	e841 2300 	strex	r3, r2, [r1]
 810641c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 810641e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106420:	2b00      	cmp	r3, #0
 8106422:	d1e6      	bne.n	81063f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8106424:	687b      	ldr	r3, [r7, #4]
 8106426:	2220      	movs	r2, #32
 8106428:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 810642c:	687b      	ldr	r3, [r7, #4]
 810642e:	2200      	movs	r2, #0
 8106430:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8106434:	2303      	movs	r3, #3
 8106436:	e063      	b.n	8106500 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8106438:	687b      	ldr	r3, [r7, #4]
 810643a:	681b      	ldr	r3, [r3, #0]
 810643c:	681b      	ldr	r3, [r3, #0]
 810643e:	f003 0304 	and.w	r3, r3, #4
 8106442:	2b04      	cmp	r3, #4
 8106444:	d149      	bne.n	81064da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8106446:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810644a:	9300      	str	r3, [sp, #0]
 810644c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810644e:	2200      	movs	r2, #0
 8106450:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8106454:	6878      	ldr	r0, [r7, #4]
 8106456:	f000 f857 	bl	8106508 <UART_WaitOnFlagUntilTimeout>
 810645a:	4603      	mov	r3, r0
 810645c:	2b00      	cmp	r3, #0
 810645e:	d03c      	beq.n	81064da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8106460:	687b      	ldr	r3, [r7, #4]
 8106462:	681b      	ldr	r3, [r3, #0]
 8106464:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106468:	e853 3f00 	ldrex	r3, [r3]
 810646c:	623b      	str	r3, [r7, #32]
   return(result);
 810646e:	6a3b      	ldr	r3, [r7, #32]
 8106470:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8106474:	64fb      	str	r3, [r7, #76]	; 0x4c
 8106476:	687b      	ldr	r3, [r7, #4]
 8106478:	681b      	ldr	r3, [r3, #0]
 810647a:	461a      	mov	r2, r3
 810647c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810647e:	633b      	str	r3, [r7, #48]	; 0x30
 8106480:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106482:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8106484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8106486:	e841 2300 	strex	r3, r2, [r1]
 810648a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 810648c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810648e:	2b00      	cmp	r3, #0
 8106490:	d1e6      	bne.n	8106460 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8106492:	687b      	ldr	r3, [r7, #4]
 8106494:	681b      	ldr	r3, [r3, #0]
 8106496:	3308      	adds	r3, #8
 8106498:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810649a:	693b      	ldr	r3, [r7, #16]
 810649c:	e853 3f00 	ldrex	r3, [r3]
 81064a0:	60fb      	str	r3, [r7, #12]
   return(result);
 81064a2:	68fb      	ldr	r3, [r7, #12]
 81064a4:	f023 0301 	bic.w	r3, r3, #1
 81064a8:	64bb      	str	r3, [r7, #72]	; 0x48
 81064aa:	687b      	ldr	r3, [r7, #4]
 81064ac:	681b      	ldr	r3, [r3, #0]
 81064ae:	3308      	adds	r3, #8
 81064b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81064b2:	61fa      	str	r2, [r7, #28]
 81064b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81064b6:	69b9      	ldr	r1, [r7, #24]
 81064b8:	69fa      	ldr	r2, [r7, #28]
 81064ba:	e841 2300 	strex	r3, r2, [r1]
 81064be:	617b      	str	r3, [r7, #20]
   return(result);
 81064c0:	697b      	ldr	r3, [r7, #20]
 81064c2:	2b00      	cmp	r3, #0
 81064c4:	d1e5      	bne.n	8106492 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 81064c6:	687b      	ldr	r3, [r7, #4]
 81064c8:	2220      	movs	r2, #32
 81064ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 81064ce:	687b      	ldr	r3, [r7, #4]
 81064d0:	2200      	movs	r2, #0
 81064d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 81064d6:	2303      	movs	r3, #3
 81064d8:	e012      	b.n	8106500 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 81064da:	687b      	ldr	r3, [r7, #4]
 81064dc:	2220      	movs	r2, #32
 81064de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 81064e2:	687b      	ldr	r3, [r7, #4]
 81064e4:	2220      	movs	r2, #32
 81064e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81064ea:	687b      	ldr	r3, [r7, #4]
 81064ec:	2200      	movs	r2, #0
 81064ee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 81064f0:	687b      	ldr	r3, [r7, #4]
 81064f2:	2200      	movs	r2, #0
 81064f4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 81064f6:	687b      	ldr	r3, [r7, #4]
 81064f8:	2200      	movs	r2, #0
 81064fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 81064fe:	2300      	movs	r3, #0
}
 8106500:	4618      	mov	r0, r3
 8106502:	3758      	adds	r7, #88	; 0x58
 8106504:	46bd      	mov	sp, r7
 8106506:	bd80      	pop	{r7, pc}

08106508 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8106508:	b580      	push	{r7, lr}
 810650a:	b084      	sub	sp, #16
 810650c:	af00      	add	r7, sp, #0
 810650e:	60f8      	str	r0, [r7, #12]
 8106510:	60b9      	str	r1, [r7, #8]
 8106512:	603b      	str	r3, [r7, #0]
 8106514:	4613      	mov	r3, r2
 8106516:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8106518:	e049      	b.n	81065ae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810651a:	69bb      	ldr	r3, [r7, #24]
 810651c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106520:	d045      	beq.n	81065ae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8106522:	f7fb fe1d 	bl	8102160 <HAL_GetTick>
 8106526:	4602      	mov	r2, r0
 8106528:	683b      	ldr	r3, [r7, #0]
 810652a:	1ad3      	subs	r3, r2, r3
 810652c:	69ba      	ldr	r2, [r7, #24]
 810652e:	429a      	cmp	r2, r3
 8106530:	d302      	bcc.n	8106538 <UART_WaitOnFlagUntilTimeout+0x30>
 8106532:	69bb      	ldr	r3, [r7, #24]
 8106534:	2b00      	cmp	r3, #0
 8106536:	d101      	bne.n	810653c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8106538:	2303      	movs	r3, #3
 810653a:	e048      	b.n	81065ce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810653c:	68fb      	ldr	r3, [r7, #12]
 810653e:	681b      	ldr	r3, [r3, #0]
 8106540:	681b      	ldr	r3, [r3, #0]
 8106542:	f003 0304 	and.w	r3, r3, #4
 8106546:	2b00      	cmp	r3, #0
 8106548:	d031      	beq.n	81065ae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810654a:	68fb      	ldr	r3, [r7, #12]
 810654c:	681b      	ldr	r3, [r3, #0]
 810654e:	69db      	ldr	r3, [r3, #28]
 8106550:	f003 0308 	and.w	r3, r3, #8
 8106554:	2b08      	cmp	r3, #8
 8106556:	d110      	bne.n	810657a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8106558:	68fb      	ldr	r3, [r7, #12]
 810655a:	681b      	ldr	r3, [r3, #0]
 810655c:	2208      	movs	r2, #8
 810655e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8106560:	68f8      	ldr	r0, [r7, #12]
 8106562:	f000 f838 	bl	81065d6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8106566:	68fb      	ldr	r3, [r7, #12]
 8106568:	2208      	movs	r2, #8
 810656a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 810656e:	68fb      	ldr	r3, [r7, #12]
 8106570:	2200      	movs	r2, #0
 8106572:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8106576:	2301      	movs	r3, #1
 8106578:	e029      	b.n	81065ce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810657a:	68fb      	ldr	r3, [r7, #12]
 810657c:	681b      	ldr	r3, [r3, #0]
 810657e:	69db      	ldr	r3, [r3, #28]
 8106580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8106584:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8106588:	d111      	bne.n	81065ae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810658a:	68fb      	ldr	r3, [r7, #12]
 810658c:	681b      	ldr	r3, [r3, #0]
 810658e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8106592:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8106594:	68f8      	ldr	r0, [r7, #12]
 8106596:	f000 f81e 	bl	81065d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810659a:	68fb      	ldr	r3, [r7, #12]
 810659c:	2220      	movs	r2, #32
 810659e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 81065a2:	68fb      	ldr	r3, [r7, #12]
 81065a4:	2200      	movs	r2, #0
 81065a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 81065aa:	2303      	movs	r3, #3
 81065ac:	e00f      	b.n	81065ce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81065ae:	68fb      	ldr	r3, [r7, #12]
 81065b0:	681b      	ldr	r3, [r3, #0]
 81065b2:	69da      	ldr	r2, [r3, #28]
 81065b4:	68bb      	ldr	r3, [r7, #8]
 81065b6:	4013      	ands	r3, r2
 81065b8:	68ba      	ldr	r2, [r7, #8]
 81065ba:	429a      	cmp	r2, r3
 81065bc:	bf0c      	ite	eq
 81065be:	2301      	moveq	r3, #1
 81065c0:	2300      	movne	r3, #0
 81065c2:	b2db      	uxtb	r3, r3
 81065c4:	461a      	mov	r2, r3
 81065c6:	79fb      	ldrb	r3, [r7, #7]
 81065c8:	429a      	cmp	r2, r3
 81065ca:	d0a6      	beq.n	810651a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81065cc:	2300      	movs	r3, #0
}
 81065ce:	4618      	mov	r0, r3
 81065d0:	3710      	adds	r7, #16
 81065d2:	46bd      	mov	sp, r7
 81065d4:	bd80      	pop	{r7, pc}

081065d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 81065d6:	b480      	push	{r7}
 81065d8:	b095      	sub	sp, #84	; 0x54
 81065da:	af00      	add	r7, sp, #0
 81065dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 81065de:	687b      	ldr	r3, [r7, #4]
 81065e0:	681b      	ldr	r3, [r3, #0]
 81065e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81065e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81065e6:	e853 3f00 	ldrex	r3, [r3]
 81065ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 81065ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81065ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 81065f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 81065f4:	687b      	ldr	r3, [r7, #4]
 81065f6:	681b      	ldr	r3, [r3, #0]
 81065f8:	461a      	mov	r2, r3
 81065fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81065fc:	643b      	str	r3, [r7, #64]	; 0x40
 81065fe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106600:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8106602:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8106604:	e841 2300 	strex	r3, r2, [r1]
 8106608:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 810660a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810660c:	2b00      	cmp	r3, #0
 810660e:	d1e6      	bne.n	81065de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8106610:	687b      	ldr	r3, [r7, #4]
 8106612:	681b      	ldr	r3, [r3, #0]
 8106614:	3308      	adds	r3, #8
 8106616:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106618:	6a3b      	ldr	r3, [r7, #32]
 810661a:	e853 3f00 	ldrex	r3, [r3]
 810661e:	61fb      	str	r3, [r7, #28]
   return(result);
 8106620:	69fb      	ldr	r3, [r7, #28]
 8106622:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8106626:	f023 0301 	bic.w	r3, r3, #1
 810662a:	64bb      	str	r3, [r7, #72]	; 0x48
 810662c:	687b      	ldr	r3, [r7, #4]
 810662e:	681b      	ldr	r3, [r3, #0]
 8106630:	3308      	adds	r3, #8
 8106632:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8106634:	62fa      	str	r2, [r7, #44]	; 0x2c
 8106636:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106638:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810663a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810663c:	e841 2300 	strex	r3, r2, [r1]
 8106640:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8106642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106644:	2b00      	cmp	r3, #0
 8106646:	d1e3      	bne.n	8106610 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8106648:	687b      	ldr	r3, [r7, #4]
 810664a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810664c:	2b01      	cmp	r3, #1
 810664e:	d118      	bne.n	8106682 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8106650:	687b      	ldr	r3, [r7, #4]
 8106652:	681b      	ldr	r3, [r3, #0]
 8106654:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106656:	68fb      	ldr	r3, [r7, #12]
 8106658:	e853 3f00 	ldrex	r3, [r3]
 810665c:	60bb      	str	r3, [r7, #8]
   return(result);
 810665e:	68bb      	ldr	r3, [r7, #8]
 8106660:	f023 0310 	bic.w	r3, r3, #16
 8106664:	647b      	str	r3, [r7, #68]	; 0x44
 8106666:	687b      	ldr	r3, [r7, #4]
 8106668:	681b      	ldr	r3, [r3, #0]
 810666a:	461a      	mov	r2, r3
 810666c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810666e:	61bb      	str	r3, [r7, #24]
 8106670:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106672:	6979      	ldr	r1, [r7, #20]
 8106674:	69ba      	ldr	r2, [r7, #24]
 8106676:	e841 2300 	strex	r3, r2, [r1]
 810667a:	613b      	str	r3, [r7, #16]
   return(result);
 810667c:	693b      	ldr	r3, [r7, #16]
 810667e:	2b00      	cmp	r3, #0
 8106680:	d1e6      	bne.n	8106650 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8106682:	687b      	ldr	r3, [r7, #4]
 8106684:	2220      	movs	r2, #32
 8106686:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810668a:	687b      	ldr	r3, [r7, #4]
 810668c:	2200      	movs	r2, #0
 810668e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8106690:	687b      	ldr	r3, [r7, #4]
 8106692:	2200      	movs	r2, #0
 8106694:	675a      	str	r2, [r3, #116]	; 0x74
}
 8106696:	bf00      	nop
 8106698:	3754      	adds	r7, #84	; 0x54
 810669a:	46bd      	mov	sp, r7
 810669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81066a0:	4770      	bx	lr

081066a2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 81066a2:	b480      	push	{r7}
 81066a4:	b085      	sub	sp, #20
 81066a6:	af00      	add	r7, sp, #0
 81066a8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 81066aa:	687b      	ldr	r3, [r7, #4]
 81066ac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 81066b0:	2b01      	cmp	r3, #1
 81066b2:	d101      	bne.n	81066b8 <HAL_UARTEx_DisableFifoMode+0x16>
 81066b4:	2302      	movs	r3, #2
 81066b6:	e027      	b.n	8106708 <HAL_UARTEx_DisableFifoMode+0x66>
 81066b8:	687b      	ldr	r3, [r7, #4]
 81066ba:	2201      	movs	r2, #1
 81066bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 81066c0:	687b      	ldr	r3, [r7, #4]
 81066c2:	2224      	movs	r2, #36	; 0x24
 81066c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81066c8:	687b      	ldr	r3, [r7, #4]
 81066ca:	681b      	ldr	r3, [r3, #0]
 81066cc:	681b      	ldr	r3, [r3, #0]
 81066ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81066d0:	687b      	ldr	r3, [r7, #4]
 81066d2:	681b      	ldr	r3, [r3, #0]
 81066d4:	681a      	ldr	r2, [r3, #0]
 81066d6:	687b      	ldr	r3, [r7, #4]
 81066d8:	681b      	ldr	r3, [r3, #0]
 81066da:	f022 0201 	bic.w	r2, r2, #1
 81066de:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 81066e0:	68fb      	ldr	r3, [r7, #12]
 81066e2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 81066e6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 81066e8:	687b      	ldr	r3, [r7, #4]
 81066ea:	2200      	movs	r2, #0
 81066ec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81066ee:	687b      	ldr	r3, [r7, #4]
 81066f0:	681b      	ldr	r3, [r3, #0]
 81066f2:	68fa      	ldr	r2, [r7, #12]
 81066f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81066f6:	687b      	ldr	r3, [r7, #4]
 81066f8:	2220      	movs	r2, #32
 81066fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81066fe:	687b      	ldr	r3, [r7, #4]
 8106700:	2200      	movs	r2, #0
 8106702:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8106706:	2300      	movs	r3, #0
}
 8106708:	4618      	mov	r0, r3
 810670a:	3714      	adds	r7, #20
 810670c:	46bd      	mov	sp, r7
 810670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106712:	4770      	bx	lr

08106714 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8106714:	b580      	push	{r7, lr}
 8106716:	b084      	sub	sp, #16
 8106718:	af00      	add	r7, sp, #0
 810671a:	6078      	str	r0, [r7, #4]
 810671c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810671e:	687b      	ldr	r3, [r7, #4]
 8106720:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8106724:	2b01      	cmp	r3, #1
 8106726:	d101      	bne.n	810672c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8106728:	2302      	movs	r3, #2
 810672a:	e02d      	b.n	8106788 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810672c:	687b      	ldr	r3, [r7, #4]
 810672e:	2201      	movs	r2, #1
 8106730:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8106734:	687b      	ldr	r3, [r7, #4]
 8106736:	2224      	movs	r2, #36	; 0x24
 8106738:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810673c:	687b      	ldr	r3, [r7, #4]
 810673e:	681b      	ldr	r3, [r3, #0]
 8106740:	681b      	ldr	r3, [r3, #0]
 8106742:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8106744:	687b      	ldr	r3, [r7, #4]
 8106746:	681b      	ldr	r3, [r3, #0]
 8106748:	681a      	ldr	r2, [r3, #0]
 810674a:	687b      	ldr	r3, [r7, #4]
 810674c:	681b      	ldr	r3, [r3, #0]
 810674e:	f022 0201 	bic.w	r2, r2, #1
 8106752:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8106754:	687b      	ldr	r3, [r7, #4]
 8106756:	681b      	ldr	r3, [r3, #0]
 8106758:	689b      	ldr	r3, [r3, #8]
 810675a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810675e:	687b      	ldr	r3, [r7, #4]
 8106760:	681b      	ldr	r3, [r3, #0]
 8106762:	683a      	ldr	r2, [r7, #0]
 8106764:	430a      	orrs	r2, r1
 8106766:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8106768:	6878      	ldr	r0, [r7, #4]
 810676a:	f000 f84f 	bl	810680c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810676e:	687b      	ldr	r3, [r7, #4]
 8106770:	681b      	ldr	r3, [r3, #0]
 8106772:	68fa      	ldr	r2, [r7, #12]
 8106774:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8106776:	687b      	ldr	r3, [r7, #4]
 8106778:	2220      	movs	r2, #32
 810677a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810677e:	687b      	ldr	r3, [r7, #4]
 8106780:	2200      	movs	r2, #0
 8106782:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8106786:	2300      	movs	r3, #0
}
 8106788:	4618      	mov	r0, r3
 810678a:	3710      	adds	r7, #16
 810678c:	46bd      	mov	sp, r7
 810678e:	bd80      	pop	{r7, pc}

08106790 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8106790:	b580      	push	{r7, lr}
 8106792:	b084      	sub	sp, #16
 8106794:	af00      	add	r7, sp, #0
 8106796:	6078      	str	r0, [r7, #4]
 8106798:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810679a:	687b      	ldr	r3, [r7, #4]
 810679c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 81067a0:	2b01      	cmp	r3, #1
 81067a2:	d101      	bne.n	81067a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 81067a4:	2302      	movs	r3, #2
 81067a6:	e02d      	b.n	8106804 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 81067a8:	687b      	ldr	r3, [r7, #4]
 81067aa:	2201      	movs	r2, #1
 81067ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 81067b0:	687b      	ldr	r3, [r7, #4]
 81067b2:	2224      	movs	r2, #36	; 0x24
 81067b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81067b8:	687b      	ldr	r3, [r7, #4]
 81067ba:	681b      	ldr	r3, [r3, #0]
 81067bc:	681b      	ldr	r3, [r3, #0]
 81067be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81067c0:	687b      	ldr	r3, [r7, #4]
 81067c2:	681b      	ldr	r3, [r3, #0]
 81067c4:	681a      	ldr	r2, [r3, #0]
 81067c6:	687b      	ldr	r3, [r7, #4]
 81067c8:	681b      	ldr	r3, [r3, #0]
 81067ca:	f022 0201 	bic.w	r2, r2, #1
 81067ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 81067d0:	687b      	ldr	r3, [r7, #4]
 81067d2:	681b      	ldr	r3, [r3, #0]
 81067d4:	689b      	ldr	r3, [r3, #8]
 81067d6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 81067da:	687b      	ldr	r3, [r7, #4]
 81067dc:	681b      	ldr	r3, [r3, #0]
 81067de:	683a      	ldr	r2, [r7, #0]
 81067e0:	430a      	orrs	r2, r1
 81067e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81067e4:	6878      	ldr	r0, [r7, #4]
 81067e6:	f000 f811 	bl	810680c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81067ea:	687b      	ldr	r3, [r7, #4]
 81067ec:	681b      	ldr	r3, [r3, #0]
 81067ee:	68fa      	ldr	r2, [r7, #12]
 81067f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81067f2:	687b      	ldr	r3, [r7, #4]
 81067f4:	2220      	movs	r2, #32
 81067f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81067fa:	687b      	ldr	r3, [r7, #4]
 81067fc:	2200      	movs	r2, #0
 81067fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8106802:	2300      	movs	r3, #0
}
 8106804:	4618      	mov	r0, r3
 8106806:	3710      	adds	r7, #16
 8106808:	46bd      	mov	sp, r7
 810680a:	bd80      	pop	{r7, pc}

0810680c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810680c:	b480      	push	{r7}
 810680e:	b085      	sub	sp, #20
 8106810:	af00      	add	r7, sp, #0
 8106812:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8106814:	687b      	ldr	r3, [r7, #4]
 8106816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106818:	2b00      	cmp	r3, #0
 810681a:	d108      	bne.n	810682e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810681c:	687b      	ldr	r3, [r7, #4]
 810681e:	2201      	movs	r2, #1
 8106820:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8106824:	687b      	ldr	r3, [r7, #4]
 8106826:	2201      	movs	r2, #1
 8106828:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810682c:	e031      	b.n	8106892 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810682e:	2310      	movs	r3, #16
 8106830:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8106832:	2310      	movs	r3, #16
 8106834:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8106836:	687b      	ldr	r3, [r7, #4]
 8106838:	681b      	ldr	r3, [r3, #0]
 810683a:	689b      	ldr	r3, [r3, #8]
 810683c:	0e5b      	lsrs	r3, r3, #25
 810683e:	b2db      	uxtb	r3, r3
 8106840:	f003 0307 	and.w	r3, r3, #7
 8106844:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8106846:	687b      	ldr	r3, [r7, #4]
 8106848:	681b      	ldr	r3, [r3, #0]
 810684a:	689b      	ldr	r3, [r3, #8]
 810684c:	0f5b      	lsrs	r3, r3, #29
 810684e:	b2db      	uxtb	r3, r3
 8106850:	f003 0307 	and.w	r3, r3, #7
 8106854:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8106856:	7bbb      	ldrb	r3, [r7, #14]
 8106858:	7b3a      	ldrb	r2, [r7, #12]
 810685a:	4911      	ldr	r1, [pc, #68]	; (81068a0 <UARTEx_SetNbDataToProcess+0x94>)
 810685c:	5c8a      	ldrb	r2, [r1, r2]
 810685e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8106862:	7b3a      	ldrb	r2, [r7, #12]
 8106864:	490f      	ldr	r1, [pc, #60]	; (81068a4 <UARTEx_SetNbDataToProcess+0x98>)
 8106866:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8106868:	fb93 f3f2 	sdiv	r3, r3, r2
 810686c:	b29a      	uxth	r2, r3
 810686e:	687b      	ldr	r3, [r7, #4]
 8106870:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8106874:	7bfb      	ldrb	r3, [r7, #15]
 8106876:	7b7a      	ldrb	r2, [r7, #13]
 8106878:	4909      	ldr	r1, [pc, #36]	; (81068a0 <UARTEx_SetNbDataToProcess+0x94>)
 810687a:	5c8a      	ldrb	r2, [r1, r2]
 810687c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8106880:	7b7a      	ldrb	r2, [r7, #13]
 8106882:	4908      	ldr	r1, [pc, #32]	; (81068a4 <UARTEx_SetNbDataToProcess+0x98>)
 8106884:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8106886:	fb93 f3f2 	sdiv	r3, r3, r2
 810688a:	b29a      	uxth	r2, r3
 810688c:	687b      	ldr	r3, [r7, #4]
 810688e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8106892:	bf00      	nop
 8106894:	3714      	adds	r7, #20
 8106896:	46bd      	mov	sp, r7
 8106898:	f85d 7b04 	ldr.w	r7, [sp], #4
 810689c:	4770      	bx	lr
 810689e:	bf00      	nop
 81068a0:	0810b744 	.word	0x0810b744
 81068a4:	0810b74c 	.word	0x0810b74c

081068a8 <__cvt>:
 81068a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 81068ac:	ec55 4b10 	vmov	r4, r5, d0
 81068b0:	2d00      	cmp	r5, #0
 81068b2:	460e      	mov	r6, r1
 81068b4:	4619      	mov	r1, r3
 81068b6:	462b      	mov	r3, r5
 81068b8:	bfbb      	ittet	lt
 81068ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 81068be:	461d      	movlt	r5, r3
 81068c0:	2300      	movge	r3, #0
 81068c2:	232d      	movlt	r3, #45	; 0x2d
 81068c4:	700b      	strb	r3, [r1, #0]
 81068c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 81068c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 81068cc:	4691      	mov	r9, r2
 81068ce:	f023 0820 	bic.w	r8, r3, #32
 81068d2:	bfbc      	itt	lt
 81068d4:	4622      	movlt	r2, r4
 81068d6:	4614      	movlt	r4, r2
 81068d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 81068dc:	d005      	beq.n	81068ea <__cvt+0x42>
 81068de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 81068e2:	d100      	bne.n	81068e6 <__cvt+0x3e>
 81068e4:	3601      	adds	r6, #1
 81068e6:	2102      	movs	r1, #2
 81068e8:	e000      	b.n	81068ec <__cvt+0x44>
 81068ea:	2103      	movs	r1, #3
 81068ec:	ab03      	add	r3, sp, #12
 81068ee:	9301      	str	r3, [sp, #4]
 81068f0:	ab02      	add	r3, sp, #8
 81068f2:	9300      	str	r3, [sp, #0]
 81068f4:	ec45 4b10 	vmov	d0, r4, r5
 81068f8:	4653      	mov	r3, sl
 81068fa:	4632      	mov	r2, r6
 81068fc:	f001 f990 	bl	8107c20 <_dtoa_r>
 8106900:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8106904:	4607      	mov	r7, r0
 8106906:	d102      	bne.n	810690e <__cvt+0x66>
 8106908:	f019 0f01 	tst.w	r9, #1
 810690c:	d022      	beq.n	8106954 <__cvt+0xac>
 810690e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8106912:	eb07 0906 	add.w	r9, r7, r6
 8106916:	d110      	bne.n	810693a <__cvt+0x92>
 8106918:	783b      	ldrb	r3, [r7, #0]
 810691a:	2b30      	cmp	r3, #48	; 0x30
 810691c:	d10a      	bne.n	8106934 <__cvt+0x8c>
 810691e:	2200      	movs	r2, #0
 8106920:	2300      	movs	r3, #0
 8106922:	4620      	mov	r0, r4
 8106924:	4629      	mov	r1, r5
 8106926:	f7fa f957 	bl	8100bd8 <__aeabi_dcmpeq>
 810692a:	b918      	cbnz	r0, 8106934 <__cvt+0x8c>
 810692c:	f1c6 0601 	rsb	r6, r6, #1
 8106930:	f8ca 6000 	str.w	r6, [sl]
 8106934:	f8da 3000 	ldr.w	r3, [sl]
 8106938:	4499      	add	r9, r3
 810693a:	2200      	movs	r2, #0
 810693c:	2300      	movs	r3, #0
 810693e:	4620      	mov	r0, r4
 8106940:	4629      	mov	r1, r5
 8106942:	f7fa f949 	bl	8100bd8 <__aeabi_dcmpeq>
 8106946:	b108      	cbz	r0, 810694c <__cvt+0xa4>
 8106948:	f8cd 900c 	str.w	r9, [sp, #12]
 810694c:	2230      	movs	r2, #48	; 0x30
 810694e:	9b03      	ldr	r3, [sp, #12]
 8106950:	454b      	cmp	r3, r9
 8106952:	d307      	bcc.n	8106964 <__cvt+0xbc>
 8106954:	9b03      	ldr	r3, [sp, #12]
 8106956:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8106958:	1bdb      	subs	r3, r3, r7
 810695a:	4638      	mov	r0, r7
 810695c:	6013      	str	r3, [r2, #0]
 810695e:	b004      	add	sp, #16
 8106960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8106964:	1c59      	adds	r1, r3, #1
 8106966:	9103      	str	r1, [sp, #12]
 8106968:	701a      	strb	r2, [r3, #0]
 810696a:	e7f0      	b.n	810694e <__cvt+0xa6>

0810696c <__exponent>:
 810696c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810696e:	4603      	mov	r3, r0
 8106970:	2900      	cmp	r1, #0
 8106972:	bfb8      	it	lt
 8106974:	4249      	neglt	r1, r1
 8106976:	f803 2b02 	strb.w	r2, [r3], #2
 810697a:	bfb4      	ite	lt
 810697c:	222d      	movlt	r2, #45	; 0x2d
 810697e:	222b      	movge	r2, #43	; 0x2b
 8106980:	2909      	cmp	r1, #9
 8106982:	7042      	strb	r2, [r0, #1]
 8106984:	dd2a      	ble.n	81069dc <__exponent+0x70>
 8106986:	f10d 0207 	add.w	r2, sp, #7
 810698a:	4617      	mov	r7, r2
 810698c:	260a      	movs	r6, #10
 810698e:	4694      	mov	ip, r2
 8106990:	fb91 f5f6 	sdiv	r5, r1, r6
 8106994:	fb06 1415 	mls	r4, r6, r5, r1
 8106998:	3430      	adds	r4, #48	; 0x30
 810699a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 810699e:	460c      	mov	r4, r1
 81069a0:	2c63      	cmp	r4, #99	; 0x63
 81069a2:	f102 32ff 	add.w	r2, r2, #4294967295
 81069a6:	4629      	mov	r1, r5
 81069a8:	dcf1      	bgt.n	810698e <__exponent+0x22>
 81069aa:	3130      	adds	r1, #48	; 0x30
 81069ac:	f1ac 0402 	sub.w	r4, ip, #2
 81069b0:	f802 1c01 	strb.w	r1, [r2, #-1]
 81069b4:	1c41      	adds	r1, r0, #1
 81069b6:	4622      	mov	r2, r4
 81069b8:	42ba      	cmp	r2, r7
 81069ba:	d30a      	bcc.n	81069d2 <__exponent+0x66>
 81069bc:	f10d 0209 	add.w	r2, sp, #9
 81069c0:	eba2 020c 	sub.w	r2, r2, ip
 81069c4:	42bc      	cmp	r4, r7
 81069c6:	bf88      	it	hi
 81069c8:	2200      	movhi	r2, #0
 81069ca:	4413      	add	r3, r2
 81069cc:	1a18      	subs	r0, r3, r0
 81069ce:	b003      	add	sp, #12
 81069d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 81069d2:	f812 5b01 	ldrb.w	r5, [r2], #1
 81069d6:	f801 5f01 	strb.w	r5, [r1, #1]!
 81069da:	e7ed      	b.n	81069b8 <__exponent+0x4c>
 81069dc:	2330      	movs	r3, #48	; 0x30
 81069de:	3130      	adds	r1, #48	; 0x30
 81069e0:	7083      	strb	r3, [r0, #2]
 81069e2:	70c1      	strb	r1, [r0, #3]
 81069e4:	1d03      	adds	r3, r0, #4
 81069e6:	e7f1      	b.n	81069cc <__exponent+0x60>

081069e8 <_printf_float>:
 81069e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81069ec:	ed2d 8b02 	vpush	{d8}
 81069f0:	b08d      	sub	sp, #52	; 0x34
 81069f2:	460c      	mov	r4, r1
 81069f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 81069f8:	4616      	mov	r6, r2
 81069fa:	461f      	mov	r7, r3
 81069fc:	4605      	mov	r5, r0
 81069fe:	f000 fff9 	bl	81079f4 <_localeconv_r>
 8106a02:	f8d0 a000 	ldr.w	sl, [r0]
 8106a06:	4650      	mov	r0, sl
 8106a08:	f7f9 fcba 	bl	8100380 <strlen>
 8106a0c:	2300      	movs	r3, #0
 8106a0e:	930a      	str	r3, [sp, #40]	; 0x28
 8106a10:	6823      	ldr	r3, [r4, #0]
 8106a12:	9305      	str	r3, [sp, #20]
 8106a14:	f8d8 3000 	ldr.w	r3, [r8]
 8106a18:	f894 b018 	ldrb.w	fp, [r4, #24]
 8106a1c:	3307      	adds	r3, #7
 8106a1e:	f023 0307 	bic.w	r3, r3, #7
 8106a22:	f103 0208 	add.w	r2, r3, #8
 8106a26:	f8c8 2000 	str.w	r2, [r8]
 8106a2a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8106a2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8106a32:	9307      	str	r3, [sp, #28]
 8106a34:	f8cd 8018 	str.w	r8, [sp, #24]
 8106a38:	ee08 0a10 	vmov	s16, r0
 8106a3c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8106a40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8106a44:	4b9e      	ldr	r3, [pc, #632]	; (8106cc0 <_printf_float+0x2d8>)
 8106a46:	f04f 32ff 	mov.w	r2, #4294967295
 8106a4a:	f7fa f8f7 	bl	8100c3c <__aeabi_dcmpun>
 8106a4e:	bb88      	cbnz	r0, 8106ab4 <_printf_float+0xcc>
 8106a50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8106a54:	4b9a      	ldr	r3, [pc, #616]	; (8106cc0 <_printf_float+0x2d8>)
 8106a56:	f04f 32ff 	mov.w	r2, #4294967295
 8106a5a:	f7fa f8d1 	bl	8100c00 <__aeabi_dcmple>
 8106a5e:	bb48      	cbnz	r0, 8106ab4 <_printf_float+0xcc>
 8106a60:	2200      	movs	r2, #0
 8106a62:	2300      	movs	r3, #0
 8106a64:	4640      	mov	r0, r8
 8106a66:	4649      	mov	r1, r9
 8106a68:	f7fa f8c0 	bl	8100bec <__aeabi_dcmplt>
 8106a6c:	b110      	cbz	r0, 8106a74 <_printf_float+0x8c>
 8106a6e:	232d      	movs	r3, #45	; 0x2d
 8106a70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8106a74:	4a93      	ldr	r2, [pc, #588]	; (8106cc4 <_printf_float+0x2dc>)
 8106a76:	4b94      	ldr	r3, [pc, #592]	; (8106cc8 <_printf_float+0x2e0>)
 8106a78:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8106a7c:	bf94      	ite	ls
 8106a7e:	4690      	movls	r8, r2
 8106a80:	4698      	movhi	r8, r3
 8106a82:	2303      	movs	r3, #3
 8106a84:	6123      	str	r3, [r4, #16]
 8106a86:	9b05      	ldr	r3, [sp, #20]
 8106a88:	f023 0304 	bic.w	r3, r3, #4
 8106a8c:	6023      	str	r3, [r4, #0]
 8106a8e:	f04f 0900 	mov.w	r9, #0
 8106a92:	9700      	str	r7, [sp, #0]
 8106a94:	4633      	mov	r3, r6
 8106a96:	aa0b      	add	r2, sp, #44	; 0x2c
 8106a98:	4621      	mov	r1, r4
 8106a9a:	4628      	mov	r0, r5
 8106a9c:	f000 f9da 	bl	8106e54 <_printf_common>
 8106aa0:	3001      	adds	r0, #1
 8106aa2:	f040 8090 	bne.w	8106bc6 <_printf_float+0x1de>
 8106aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8106aaa:	b00d      	add	sp, #52	; 0x34
 8106aac:	ecbd 8b02 	vpop	{d8}
 8106ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8106ab4:	4642      	mov	r2, r8
 8106ab6:	464b      	mov	r3, r9
 8106ab8:	4640      	mov	r0, r8
 8106aba:	4649      	mov	r1, r9
 8106abc:	f7fa f8be 	bl	8100c3c <__aeabi_dcmpun>
 8106ac0:	b140      	cbz	r0, 8106ad4 <_printf_float+0xec>
 8106ac2:	464b      	mov	r3, r9
 8106ac4:	2b00      	cmp	r3, #0
 8106ac6:	bfbc      	itt	lt
 8106ac8:	232d      	movlt	r3, #45	; 0x2d
 8106aca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8106ace:	4a7f      	ldr	r2, [pc, #508]	; (8106ccc <_printf_float+0x2e4>)
 8106ad0:	4b7f      	ldr	r3, [pc, #508]	; (8106cd0 <_printf_float+0x2e8>)
 8106ad2:	e7d1      	b.n	8106a78 <_printf_float+0x90>
 8106ad4:	6863      	ldr	r3, [r4, #4]
 8106ad6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8106ada:	9206      	str	r2, [sp, #24]
 8106adc:	1c5a      	adds	r2, r3, #1
 8106ade:	d13f      	bne.n	8106b60 <_printf_float+0x178>
 8106ae0:	2306      	movs	r3, #6
 8106ae2:	6063      	str	r3, [r4, #4]
 8106ae4:	9b05      	ldr	r3, [sp, #20]
 8106ae6:	6861      	ldr	r1, [r4, #4]
 8106ae8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8106aec:	2300      	movs	r3, #0
 8106aee:	9303      	str	r3, [sp, #12]
 8106af0:	ab0a      	add	r3, sp, #40	; 0x28
 8106af2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8106af6:	ab09      	add	r3, sp, #36	; 0x24
 8106af8:	ec49 8b10 	vmov	d0, r8, r9
 8106afc:	9300      	str	r3, [sp, #0]
 8106afe:	6022      	str	r2, [r4, #0]
 8106b00:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8106b04:	4628      	mov	r0, r5
 8106b06:	f7ff fecf 	bl	81068a8 <__cvt>
 8106b0a:	9b06      	ldr	r3, [sp, #24]
 8106b0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8106b0e:	2b47      	cmp	r3, #71	; 0x47
 8106b10:	4680      	mov	r8, r0
 8106b12:	d108      	bne.n	8106b26 <_printf_float+0x13e>
 8106b14:	1cc8      	adds	r0, r1, #3
 8106b16:	db02      	blt.n	8106b1e <_printf_float+0x136>
 8106b18:	6863      	ldr	r3, [r4, #4]
 8106b1a:	4299      	cmp	r1, r3
 8106b1c:	dd41      	ble.n	8106ba2 <_printf_float+0x1ba>
 8106b1e:	f1ab 0302 	sub.w	r3, fp, #2
 8106b22:	fa5f fb83 	uxtb.w	fp, r3
 8106b26:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8106b2a:	d820      	bhi.n	8106b6e <_printf_float+0x186>
 8106b2c:	3901      	subs	r1, #1
 8106b2e:	465a      	mov	r2, fp
 8106b30:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8106b34:	9109      	str	r1, [sp, #36]	; 0x24
 8106b36:	f7ff ff19 	bl	810696c <__exponent>
 8106b3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8106b3c:	1813      	adds	r3, r2, r0
 8106b3e:	2a01      	cmp	r2, #1
 8106b40:	4681      	mov	r9, r0
 8106b42:	6123      	str	r3, [r4, #16]
 8106b44:	dc02      	bgt.n	8106b4c <_printf_float+0x164>
 8106b46:	6822      	ldr	r2, [r4, #0]
 8106b48:	07d2      	lsls	r2, r2, #31
 8106b4a:	d501      	bpl.n	8106b50 <_printf_float+0x168>
 8106b4c:	3301      	adds	r3, #1
 8106b4e:	6123      	str	r3, [r4, #16]
 8106b50:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8106b54:	2b00      	cmp	r3, #0
 8106b56:	d09c      	beq.n	8106a92 <_printf_float+0xaa>
 8106b58:	232d      	movs	r3, #45	; 0x2d
 8106b5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8106b5e:	e798      	b.n	8106a92 <_printf_float+0xaa>
 8106b60:	9a06      	ldr	r2, [sp, #24]
 8106b62:	2a47      	cmp	r2, #71	; 0x47
 8106b64:	d1be      	bne.n	8106ae4 <_printf_float+0xfc>
 8106b66:	2b00      	cmp	r3, #0
 8106b68:	d1bc      	bne.n	8106ae4 <_printf_float+0xfc>
 8106b6a:	2301      	movs	r3, #1
 8106b6c:	e7b9      	b.n	8106ae2 <_printf_float+0xfa>
 8106b6e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8106b72:	d118      	bne.n	8106ba6 <_printf_float+0x1be>
 8106b74:	2900      	cmp	r1, #0
 8106b76:	6863      	ldr	r3, [r4, #4]
 8106b78:	dd0b      	ble.n	8106b92 <_printf_float+0x1aa>
 8106b7a:	6121      	str	r1, [r4, #16]
 8106b7c:	b913      	cbnz	r3, 8106b84 <_printf_float+0x19c>
 8106b7e:	6822      	ldr	r2, [r4, #0]
 8106b80:	07d0      	lsls	r0, r2, #31
 8106b82:	d502      	bpl.n	8106b8a <_printf_float+0x1a2>
 8106b84:	3301      	adds	r3, #1
 8106b86:	440b      	add	r3, r1
 8106b88:	6123      	str	r3, [r4, #16]
 8106b8a:	65a1      	str	r1, [r4, #88]	; 0x58
 8106b8c:	f04f 0900 	mov.w	r9, #0
 8106b90:	e7de      	b.n	8106b50 <_printf_float+0x168>
 8106b92:	b913      	cbnz	r3, 8106b9a <_printf_float+0x1b2>
 8106b94:	6822      	ldr	r2, [r4, #0]
 8106b96:	07d2      	lsls	r2, r2, #31
 8106b98:	d501      	bpl.n	8106b9e <_printf_float+0x1b6>
 8106b9a:	3302      	adds	r3, #2
 8106b9c:	e7f4      	b.n	8106b88 <_printf_float+0x1a0>
 8106b9e:	2301      	movs	r3, #1
 8106ba0:	e7f2      	b.n	8106b88 <_printf_float+0x1a0>
 8106ba2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8106ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8106ba8:	4299      	cmp	r1, r3
 8106baa:	db05      	blt.n	8106bb8 <_printf_float+0x1d0>
 8106bac:	6823      	ldr	r3, [r4, #0]
 8106bae:	6121      	str	r1, [r4, #16]
 8106bb0:	07d8      	lsls	r0, r3, #31
 8106bb2:	d5ea      	bpl.n	8106b8a <_printf_float+0x1a2>
 8106bb4:	1c4b      	adds	r3, r1, #1
 8106bb6:	e7e7      	b.n	8106b88 <_printf_float+0x1a0>
 8106bb8:	2900      	cmp	r1, #0
 8106bba:	bfd4      	ite	le
 8106bbc:	f1c1 0202 	rsble	r2, r1, #2
 8106bc0:	2201      	movgt	r2, #1
 8106bc2:	4413      	add	r3, r2
 8106bc4:	e7e0      	b.n	8106b88 <_printf_float+0x1a0>
 8106bc6:	6823      	ldr	r3, [r4, #0]
 8106bc8:	055a      	lsls	r2, r3, #21
 8106bca:	d407      	bmi.n	8106bdc <_printf_float+0x1f4>
 8106bcc:	6923      	ldr	r3, [r4, #16]
 8106bce:	4642      	mov	r2, r8
 8106bd0:	4631      	mov	r1, r6
 8106bd2:	4628      	mov	r0, r5
 8106bd4:	47b8      	blx	r7
 8106bd6:	3001      	adds	r0, #1
 8106bd8:	d12c      	bne.n	8106c34 <_printf_float+0x24c>
 8106bda:	e764      	b.n	8106aa6 <_printf_float+0xbe>
 8106bdc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8106be0:	f240 80e0 	bls.w	8106da4 <_printf_float+0x3bc>
 8106be4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8106be8:	2200      	movs	r2, #0
 8106bea:	2300      	movs	r3, #0
 8106bec:	f7f9 fff4 	bl	8100bd8 <__aeabi_dcmpeq>
 8106bf0:	2800      	cmp	r0, #0
 8106bf2:	d034      	beq.n	8106c5e <_printf_float+0x276>
 8106bf4:	4a37      	ldr	r2, [pc, #220]	; (8106cd4 <_printf_float+0x2ec>)
 8106bf6:	2301      	movs	r3, #1
 8106bf8:	4631      	mov	r1, r6
 8106bfa:	4628      	mov	r0, r5
 8106bfc:	47b8      	blx	r7
 8106bfe:	3001      	adds	r0, #1
 8106c00:	f43f af51 	beq.w	8106aa6 <_printf_float+0xbe>
 8106c04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8106c08:	429a      	cmp	r2, r3
 8106c0a:	db02      	blt.n	8106c12 <_printf_float+0x22a>
 8106c0c:	6823      	ldr	r3, [r4, #0]
 8106c0e:	07d8      	lsls	r0, r3, #31
 8106c10:	d510      	bpl.n	8106c34 <_printf_float+0x24c>
 8106c12:	ee18 3a10 	vmov	r3, s16
 8106c16:	4652      	mov	r2, sl
 8106c18:	4631      	mov	r1, r6
 8106c1a:	4628      	mov	r0, r5
 8106c1c:	47b8      	blx	r7
 8106c1e:	3001      	adds	r0, #1
 8106c20:	f43f af41 	beq.w	8106aa6 <_printf_float+0xbe>
 8106c24:	f04f 0800 	mov.w	r8, #0
 8106c28:	f104 091a 	add.w	r9, r4, #26
 8106c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8106c2e:	3b01      	subs	r3, #1
 8106c30:	4543      	cmp	r3, r8
 8106c32:	dc09      	bgt.n	8106c48 <_printf_float+0x260>
 8106c34:	6823      	ldr	r3, [r4, #0]
 8106c36:	079b      	lsls	r3, r3, #30
 8106c38:	f100 8107 	bmi.w	8106e4a <_printf_float+0x462>
 8106c3c:	68e0      	ldr	r0, [r4, #12]
 8106c3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8106c40:	4298      	cmp	r0, r3
 8106c42:	bfb8      	it	lt
 8106c44:	4618      	movlt	r0, r3
 8106c46:	e730      	b.n	8106aaa <_printf_float+0xc2>
 8106c48:	2301      	movs	r3, #1
 8106c4a:	464a      	mov	r2, r9
 8106c4c:	4631      	mov	r1, r6
 8106c4e:	4628      	mov	r0, r5
 8106c50:	47b8      	blx	r7
 8106c52:	3001      	adds	r0, #1
 8106c54:	f43f af27 	beq.w	8106aa6 <_printf_float+0xbe>
 8106c58:	f108 0801 	add.w	r8, r8, #1
 8106c5c:	e7e6      	b.n	8106c2c <_printf_float+0x244>
 8106c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8106c60:	2b00      	cmp	r3, #0
 8106c62:	dc39      	bgt.n	8106cd8 <_printf_float+0x2f0>
 8106c64:	4a1b      	ldr	r2, [pc, #108]	; (8106cd4 <_printf_float+0x2ec>)
 8106c66:	2301      	movs	r3, #1
 8106c68:	4631      	mov	r1, r6
 8106c6a:	4628      	mov	r0, r5
 8106c6c:	47b8      	blx	r7
 8106c6e:	3001      	adds	r0, #1
 8106c70:	f43f af19 	beq.w	8106aa6 <_printf_float+0xbe>
 8106c74:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8106c78:	4313      	orrs	r3, r2
 8106c7a:	d102      	bne.n	8106c82 <_printf_float+0x29a>
 8106c7c:	6823      	ldr	r3, [r4, #0]
 8106c7e:	07d9      	lsls	r1, r3, #31
 8106c80:	d5d8      	bpl.n	8106c34 <_printf_float+0x24c>
 8106c82:	ee18 3a10 	vmov	r3, s16
 8106c86:	4652      	mov	r2, sl
 8106c88:	4631      	mov	r1, r6
 8106c8a:	4628      	mov	r0, r5
 8106c8c:	47b8      	blx	r7
 8106c8e:	3001      	adds	r0, #1
 8106c90:	f43f af09 	beq.w	8106aa6 <_printf_float+0xbe>
 8106c94:	f04f 0900 	mov.w	r9, #0
 8106c98:	f104 0a1a 	add.w	sl, r4, #26
 8106c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8106c9e:	425b      	negs	r3, r3
 8106ca0:	454b      	cmp	r3, r9
 8106ca2:	dc01      	bgt.n	8106ca8 <_printf_float+0x2c0>
 8106ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8106ca6:	e792      	b.n	8106bce <_printf_float+0x1e6>
 8106ca8:	2301      	movs	r3, #1
 8106caa:	4652      	mov	r2, sl
 8106cac:	4631      	mov	r1, r6
 8106cae:	4628      	mov	r0, r5
 8106cb0:	47b8      	blx	r7
 8106cb2:	3001      	adds	r0, #1
 8106cb4:	f43f aef7 	beq.w	8106aa6 <_printf_float+0xbe>
 8106cb8:	f109 0901 	add.w	r9, r9, #1
 8106cbc:	e7ee      	b.n	8106c9c <_printf_float+0x2b4>
 8106cbe:	bf00      	nop
 8106cc0:	7fefffff 	.word	0x7fefffff
 8106cc4:	0810b754 	.word	0x0810b754
 8106cc8:	0810b758 	.word	0x0810b758
 8106ccc:	0810b75c 	.word	0x0810b75c
 8106cd0:	0810b760 	.word	0x0810b760
 8106cd4:	0810b764 	.word	0x0810b764
 8106cd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8106cda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8106cdc:	429a      	cmp	r2, r3
 8106cde:	bfa8      	it	ge
 8106ce0:	461a      	movge	r2, r3
 8106ce2:	2a00      	cmp	r2, #0
 8106ce4:	4691      	mov	r9, r2
 8106ce6:	dc37      	bgt.n	8106d58 <_printf_float+0x370>
 8106ce8:	f04f 0b00 	mov.w	fp, #0
 8106cec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8106cf0:	f104 021a 	add.w	r2, r4, #26
 8106cf4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8106cf6:	9305      	str	r3, [sp, #20]
 8106cf8:	eba3 0309 	sub.w	r3, r3, r9
 8106cfc:	455b      	cmp	r3, fp
 8106cfe:	dc33      	bgt.n	8106d68 <_printf_float+0x380>
 8106d00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8106d04:	429a      	cmp	r2, r3
 8106d06:	db3b      	blt.n	8106d80 <_printf_float+0x398>
 8106d08:	6823      	ldr	r3, [r4, #0]
 8106d0a:	07da      	lsls	r2, r3, #31
 8106d0c:	d438      	bmi.n	8106d80 <_printf_float+0x398>
 8106d0e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8106d12:	eba2 0903 	sub.w	r9, r2, r3
 8106d16:	9b05      	ldr	r3, [sp, #20]
 8106d18:	1ad2      	subs	r2, r2, r3
 8106d1a:	4591      	cmp	r9, r2
 8106d1c:	bfa8      	it	ge
 8106d1e:	4691      	movge	r9, r2
 8106d20:	f1b9 0f00 	cmp.w	r9, #0
 8106d24:	dc35      	bgt.n	8106d92 <_printf_float+0x3aa>
 8106d26:	f04f 0800 	mov.w	r8, #0
 8106d2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8106d2e:	f104 0a1a 	add.w	sl, r4, #26
 8106d32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8106d36:	1a9b      	subs	r3, r3, r2
 8106d38:	eba3 0309 	sub.w	r3, r3, r9
 8106d3c:	4543      	cmp	r3, r8
 8106d3e:	f77f af79 	ble.w	8106c34 <_printf_float+0x24c>
 8106d42:	2301      	movs	r3, #1
 8106d44:	4652      	mov	r2, sl
 8106d46:	4631      	mov	r1, r6
 8106d48:	4628      	mov	r0, r5
 8106d4a:	47b8      	blx	r7
 8106d4c:	3001      	adds	r0, #1
 8106d4e:	f43f aeaa 	beq.w	8106aa6 <_printf_float+0xbe>
 8106d52:	f108 0801 	add.w	r8, r8, #1
 8106d56:	e7ec      	b.n	8106d32 <_printf_float+0x34a>
 8106d58:	4613      	mov	r3, r2
 8106d5a:	4631      	mov	r1, r6
 8106d5c:	4642      	mov	r2, r8
 8106d5e:	4628      	mov	r0, r5
 8106d60:	47b8      	blx	r7
 8106d62:	3001      	adds	r0, #1
 8106d64:	d1c0      	bne.n	8106ce8 <_printf_float+0x300>
 8106d66:	e69e      	b.n	8106aa6 <_printf_float+0xbe>
 8106d68:	2301      	movs	r3, #1
 8106d6a:	4631      	mov	r1, r6
 8106d6c:	4628      	mov	r0, r5
 8106d6e:	9205      	str	r2, [sp, #20]
 8106d70:	47b8      	blx	r7
 8106d72:	3001      	adds	r0, #1
 8106d74:	f43f ae97 	beq.w	8106aa6 <_printf_float+0xbe>
 8106d78:	9a05      	ldr	r2, [sp, #20]
 8106d7a:	f10b 0b01 	add.w	fp, fp, #1
 8106d7e:	e7b9      	b.n	8106cf4 <_printf_float+0x30c>
 8106d80:	ee18 3a10 	vmov	r3, s16
 8106d84:	4652      	mov	r2, sl
 8106d86:	4631      	mov	r1, r6
 8106d88:	4628      	mov	r0, r5
 8106d8a:	47b8      	blx	r7
 8106d8c:	3001      	adds	r0, #1
 8106d8e:	d1be      	bne.n	8106d0e <_printf_float+0x326>
 8106d90:	e689      	b.n	8106aa6 <_printf_float+0xbe>
 8106d92:	9a05      	ldr	r2, [sp, #20]
 8106d94:	464b      	mov	r3, r9
 8106d96:	4442      	add	r2, r8
 8106d98:	4631      	mov	r1, r6
 8106d9a:	4628      	mov	r0, r5
 8106d9c:	47b8      	blx	r7
 8106d9e:	3001      	adds	r0, #1
 8106da0:	d1c1      	bne.n	8106d26 <_printf_float+0x33e>
 8106da2:	e680      	b.n	8106aa6 <_printf_float+0xbe>
 8106da4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8106da6:	2a01      	cmp	r2, #1
 8106da8:	dc01      	bgt.n	8106dae <_printf_float+0x3c6>
 8106daa:	07db      	lsls	r3, r3, #31
 8106dac:	d53a      	bpl.n	8106e24 <_printf_float+0x43c>
 8106dae:	2301      	movs	r3, #1
 8106db0:	4642      	mov	r2, r8
 8106db2:	4631      	mov	r1, r6
 8106db4:	4628      	mov	r0, r5
 8106db6:	47b8      	blx	r7
 8106db8:	3001      	adds	r0, #1
 8106dba:	f43f ae74 	beq.w	8106aa6 <_printf_float+0xbe>
 8106dbe:	ee18 3a10 	vmov	r3, s16
 8106dc2:	4652      	mov	r2, sl
 8106dc4:	4631      	mov	r1, r6
 8106dc6:	4628      	mov	r0, r5
 8106dc8:	47b8      	blx	r7
 8106dca:	3001      	adds	r0, #1
 8106dcc:	f43f ae6b 	beq.w	8106aa6 <_printf_float+0xbe>
 8106dd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8106dd4:	2200      	movs	r2, #0
 8106dd6:	2300      	movs	r3, #0
 8106dd8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8106ddc:	f7f9 fefc 	bl	8100bd8 <__aeabi_dcmpeq>
 8106de0:	b9d8      	cbnz	r0, 8106e1a <_printf_float+0x432>
 8106de2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8106de6:	f108 0201 	add.w	r2, r8, #1
 8106dea:	4631      	mov	r1, r6
 8106dec:	4628      	mov	r0, r5
 8106dee:	47b8      	blx	r7
 8106df0:	3001      	adds	r0, #1
 8106df2:	d10e      	bne.n	8106e12 <_printf_float+0x42a>
 8106df4:	e657      	b.n	8106aa6 <_printf_float+0xbe>
 8106df6:	2301      	movs	r3, #1
 8106df8:	4652      	mov	r2, sl
 8106dfa:	4631      	mov	r1, r6
 8106dfc:	4628      	mov	r0, r5
 8106dfe:	47b8      	blx	r7
 8106e00:	3001      	adds	r0, #1
 8106e02:	f43f ae50 	beq.w	8106aa6 <_printf_float+0xbe>
 8106e06:	f108 0801 	add.w	r8, r8, #1
 8106e0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8106e0c:	3b01      	subs	r3, #1
 8106e0e:	4543      	cmp	r3, r8
 8106e10:	dcf1      	bgt.n	8106df6 <_printf_float+0x40e>
 8106e12:	464b      	mov	r3, r9
 8106e14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8106e18:	e6da      	b.n	8106bd0 <_printf_float+0x1e8>
 8106e1a:	f04f 0800 	mov.w	r8, #0
 8106e1e:	f104 0a1a 	add.w	sl, r4, #26
 8106e22:	e7f2      	b.n	8106e0a <_printf_float+0x422>
 8106e24:	2301      	movs	r3, #1
 8106e26:	4642      	mov	r2, r8
 8106e28:	e7df      	b.n	8106dea <_printf_float+0x402>
 8106e2a:	2301      	movs	r3, #1
 8106e2c:	464a      	mov	r2, r9
 8106e2e:	4631      	mov	r1, r6
 8106e30:	4628      	mov	r0, r5
 8106e32:	47b8      	blx	r7
 8106e34:	3001      	adds	r0, #1
 8106e36:	f43f ae36 	beq.w	8106aa6 <_printf_float+0xbe>
 8106e3a:	f108 0801 	add.w	r8, r8, #1
 8106e3e:	68e3      	ldr	r3, [r4, #12]
 8106e40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8106e42:	1a5b      	subs	r3, r3, r1
 8106e44:	4543      	cmp	r3, r8
 8106e46:	dcf0      	bgt.n	8106e2a <_printf_float+0x442>
 8106e48:	e6f8      	b.n	8106c3c <_printf_float+0x254>
 8106e4a:	f04f 0800 	mov.w	r8, #0
 8106e4e:	f104 0919 	add.w	r9, r4, #25
 8106e52:	e7f4      	b.n	8106e3e <_printf_float+0x456>

08106e54 <_printf_common>:
 8106e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8106e58:	4616      	mov	r6, r2
 8106e5a:	4699      	mov	r9, r3
 8106e5c:	688a      	ldr	r2, [r1, #8]
 8106e5e:	690b      	ldr	r3, [r1, #16]
 8106e60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8106e64:	4293      	cmp	r3, r2
 8106e66:	bfb8      	it	lt
 8106e68:	4613      	movlt	r3, r2
 8106e6a:	6033      	str	r3, [r6, #0]
 8106e6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8106e70:	4607      	mov	r7, r0
 8106e72:	460c      	mov	r4, r1
 8106e74:	b10a      	cbz	r2, 8106e7a <_printf_common+0x26>
 8106e76:	3301      	adds	r3, #1
 8106e78:	6033      	str	r3, [r6, #0]
 8106e7a:	6823      	ldr	r3, [r4, #0]
 8106e7c:	0699      	lsls	r1, r3, #26
 8106e7e:	bf42      	ittt	mi
 8106e80:	6833      	ldrmi	r3, [r6, #0]
 8106e82:	3302      	addmi	r3, #2
 8106e84:	6033      	strmi	r3, [r6, #0]
 8106e86:	6825      	ldr	r5, [r4, #0]
 8106e88:	f015 0506 	ands.w	r5, r5, #6
 8106e8c:	d106      	bne.n	8106e9c <_printf_common+0x48>
 8106e8e:	f104 0a19 	add.w	sl, r4, #25
 8106e92:	68e3      	ldr	r3, [r4, #12]
 8106e94:	6832      	ldr	r2, [r6, #0]
 8106e96:	1a9b      	subs	r3, r3, r2
 8106e98:	42ab      	cmp	r3, r5
 8106e9a:	dc26      	bgt.n	8106eea <_printf_common+0x96>
 8106e9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8106ea0:	1e13      	subs	r3, r2, #0
 8106ea2:	6822      	ldr	r2, [r4, #0]
 8106ea4:	bf18      	it	ne
 8106ea6:	2301      	movne	r3, #1
 8106ea8:	0692      	lsls	r2, r2, #26
 8106eaa:	d42b      	bmi.n	8106f04 <_printf_common+0xb0>
 8106eac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8106eb0:	4649      	mov	r1, r9
 8106eb2:	4638      	mov	r0, r7
 8106eb4:	47c0      	blx	r8
 8106eb6:	3001      	adds	r0, #1
 8106eb8:	d01e      	beq.n	8106ef8 <_printf_common+0xa4>
 8106eba:	6823      	ldr	r3, [r4, #0]
 8106ebc:	6922      	ldr	r2, [r4, #16]
 8106ebe:	f003 0306 	and.w	r3, r3, #6
 8106ec2:	2b04      	cmp	r3, #4
 8106ec4:	bf02      	ittt	eq
 8106ec6:	68e5      	ldreq	r5, [r4, #12]
 8106ec8:	6833      	ldreq	r3, [r6, #0]
 8106eca:	1aed      	subeq	r5, r5, r3
 8106ecc:	68a3      	ldr	r3, [r4, #8]
 8106ece:	bf0c      	ite	eq
 8106ed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8106ed4:	2500      	movne	r5, #0
 8106ed6:	4293      	cmp	r3, r2
 8106ed8:	bfc4      	itt	gt
 8106eda:	1a9b      	subgt	r3, r3, r2
 8106edc:	18ed      	addgt	r5, r5, r3
 8106ede:	2600      	movs	r6, #0
 8106ee0:	341a      	adds	r4, #26
 8106ee2:	42b5      	cmp	r5, r6
 8106ee4:	d11a      	bne.n	8106f1c <_printf_common+0xc8>
 8106ee6:	2000      	movs	r0, #0
 8106ee8:	e008      	b.n	8106efc <_printf_common+0xa8>
 8106eea:	2301      	movs	r3, #1
 8106eec:	4652      	mov	r2, sl
 8106eee:	4649      	mov	r1, r9
 8106ef0:	4638      	mov	r0, r7
 8106ef2:	47c0      	blx	r8
 8106ef4:	3001      	adds	r0, #1
 8106ef6:	d103      	bne.n	8106f00 <_printf_common+0xac>
 8106ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8106efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8106f00:	3501      	adds	r5, #1
 8106f02:	e7c6      	b.n	8106e92 <_printf_common+0x3e>
 8106f04:	18e1      	adds	r1, r4, r3
 8106f06:	1c5a      	adds	r2, r3, #1
 8106f08:	2030      	movs	r0, #48	; 0x30
 8106f0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8106f0e:	4422      	add	r2, r4
 8106f10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8106f14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8106f18:	3302      	adds	r3, #2
 8106f1a:	e7c7      	b.n	8106eac <_printf_common+0x58>
 8106f1c:	2301      	movs	r3, #1
 8106f1e:	4622      	mov	r2, r4
 8106f20:	4649      	mov	r1, r9
 8106f22:	4638      	mov	r0, r7
 8106f24:	47c0      	blx	r8
 8106f26:	3001      	adds	r0, #1
 8106f28:	d0e6      	beq.n	8106ef8 <_printf_common+0xa4>
 8106f2a:	3601      	adds	r6, #1
 8106f2c:	e7d9      	b.n	8106ee2 <_printf_common+0x8e>
	...

08106f30 <_printf_i>:
 8106f30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8106f34:	7e0f      	ldrb	r7, [r1, #24]
 8106f36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8106f38:	2f78      	cmp	r7, #120	; 0x78
 8106f3a:	4691      	mov	r9, r2
 8106f3c:	4680      	mov	r8, r0
 8106f3e:	460c      	mov	r4, r1
 8106f40:	469a      	mov	sl, r3
 8106f42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8106f46:	d807      	bhi.n	8106f58 <_printf_i+0x28>
 8106f48:	2f62      	cmp	r7, #98	; 0x62
 8106f4a:	d80a      	bhi.n	8106f62 <_printf_i+0x32>
 8106f4c:	2f00      	cmp	r7, #0
 8106f4e:	f000 80d4 	beq.w	81070fa <_printf_i+0x1ca>
 8106f52:	2f58      	cmp	r7, #88	; 0x58
 8106f54:	f000 80c0 	beq.w	81070d8 <_printf_i+0x1a8>
 8106f58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8106f5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8106f60:	e03a      	b.n	8106fd8 <_printf_i+0xa8>
 8106f62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8106f66:	2b15      	cmp	r3, #21
 8106f68:	d8f6      	bhi.n	8106f58 <_printf_i+0x28>
 8106f6a:	a101      	add	r1, pc, #4	; (adr r1, 8106f70 <_printf_i+0x40>)
 8106f6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8106f70:	08106fc9 	.word	0x08106fc9
 8106f74:	08106fdd 	.word	0x08106fdd
 8106f78:	08106f59 	.word	0x08106f59
 8106f7c:	08106f59 	.word	0x08106f59
 8106f80:	08106f59 	.word	0x08106f59
 8106f84:	08106f59 	.word	0x08106f59
 8106f88:	08106fdd 	.word	0x08106fdd
 8106f8c:	08106f59 	.word	0x08106f59
 8106f90:	08106f59 	.word	0x08106f59
 8106f94:	08106f59 	.word	0x08106f59
 8106f98:	08106f59 	.word	0x08106f59
 8106f9c:	081070e1 	.word	0x081070e1
 8106fa0:	08107009 	.word	0x08107009
 8106fa4:	0810709b 	.word	0x0810709b
 8106fa8:	08106f59 	.word	0x08106f59
 8106fac:	08106f59 	.word	0x08106f59
 8106fb0:	08107103 	.word	0x08107103
 8106fb4:	08106f59 	.word	0x08106f59
 8106fb8:	08107009 	.word	0x08107009
 8106fbc:	08106f59 	.word	0x08106f59
 8106fc0:	08106f59 	.word	0x08106f59
 8106fc4:	081070a3 	.word	0x081070a3
 8106fc8:	682b      	ldr	r3, [r5, #0]
 8106fca:	1d1a      	adds	r2, r3, #4
 8106fcc:	681b      	ldr	r3, [r3, #0]
 8106fce:	602a      	str	r2, [r5, #0]
 8106fd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8106fd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8106fd8:	2301      	movs	r3, #1
 8106fda:	e09f      	b.n	810711c <_printf_i+0x1ec>
 8106fdc:	6820      	ldr	r0, [r4, #0]
 8106fde:	682b      	ldr	r3, [r5, #0]
 8106fe0:	0607      	lsls	r7, r0, #24
 8106fe2:	f103 0104 	add.w	r1, r3, #4
 8106fe6:	6029      	str	r1, [r5, #0]
 8106fe8:	d501      	bpl.n	8106fee <_printf_i+0xbe>
 8106fea:	681e      	ldr	r6, [r3, #0]
 8106fec:	e003      	b.n	8106ff6 <_printf_i+0xc6>
 8106fee:	0646      	lsls	r6, r0, #25
 8106ff0:	d5fb      	bpl.n	8106fea <_printf_i+0xba>
 8106ff2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8106ff6:	2e00      	cmp	r6, #0
 8106ff8:	da03      	bge.n	8107002 <_printf_i+0xd2>
 8106ffa:	232d      	movs	r3, #45	; 0x2d
 8106ffc:	4276      	negs	r6, r6
 8106ffe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8107002:	485a      	ldr	r0, [pc, #360]	; (810716c <_printf_i+0x23c>)
 8107004:	230a      	movs	r3, #10
 8107006:	e012      	b.n	810702e <_printf_i+0xfe>
 8107008:	682b      	ldr	r3, [r5, #0]
 810700a:	6820      	ldr	r0, [r4, #0]
 810700c:	1d19      	adds	r1, r3, #4
 810700e:	6029      	str	r1, [r5, #0]
 8107010:	0605      	lsls	r5, r0, #24
 8107012:	d501      	bpl.n	8107018 <_printf_i+0xe8>
 8107014:	681e      	ldr	r6, [r3, #0]
 8107016:	e002      	b.n	810701e <_printf_i+0xee>
 8107018:	0641      	lsls	r1, r0, #25
 810701a:	d5fb      	bpl.n	8107014 <_printf_i+0xe4>
 810701c:	881e      	ldrh	r6, [r3, #0]
 810701e:	4853      	ldr	r0, [pc, #332]	; (810716c <_printf_i+0x23c>)
 8107020:	2f6f      	cmp	r7, #111	; 0x6f
 8107022:	bf0c      	ite	eq
 8107024:	2308      	moveq	r3, #8
 8107026:	230a      	movne	r3, #10
 8107028:	2100      	movs	r1, #0
 810702a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 810702e:	6865      	ldr	r5, [r4, #4]
 8107030:	60a5      	str	r5, [r4, #8]
 8107032:	2d00      	cmp	r5, #0
 8107034:	bfa2      	ittt	ge
 8107036:	6821      	ldrge	r1, [r4, #0]
 8107038:	f021 0104 	bicge.w	r1, r1, #4
 810703c:	6021      	strge	r1, [r4, #0]
 810703e:	b90e      	cbnz	r6, 8107044 <_printf_i+0x114>
 8107040:	2d00      	cmp	r5, #0
 8107042:	d04b      	beq.n	81070dc <_printf_i+0x1ac>
 8107044:	4615      	mov	r5, r2
 8107046:	fbb6 f1f3 	udiv	r1, r6, r3
 810704a:	fb03 6711 	mls	r7, r3, r1, r6
 810704e:	5dc7      	ldrb	r7, [r0, r7]
 8107050:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8107054:	4637      	mov	r7, r6
 8107056:	42bb      	cmp	r3, r7
 8107058:	460e      	mov	r6, r1
 810705a:	d9f4      	bls.n	8107046 <_printf_i+0x116>
 810705c:	2b08      	cmp	r3, #8
 810705e:	d10b      	bne.n	8107078 <_printf_i+0x148>
 8107060:	6823      	ldr	r3, [r4, #0]
 8107062:	07de      	lsls	r6, r3, #31
 8107064:	d508      	bpl.n	8107078 <_printf_i+0x148>
 8107066:	6923      	ldr	r3, [r4, #16]
 8107068:	6861      	ldr	r1, [r4, #4]
 810706a:	4299      	cmp	r1, r3
 810706c:	bfde      	ittt	le
 810706e:	2330      	movle	r3, #48	; 0x30
 8107070:	f805 3c01 	strble.w	r3, [r5, #-1]
 8107074:	f105 35ff 	addle.w	r5, r5, #4294967295
 8107078:	1b52      	subs	r2, r2, r5
 810707a:	6122      	str	r2, [r4, #16]
 810707c:	f8cd a000 	str.w	sl, [sp]
 8107080:	464b      	mov	r3, r9
 8107082:	aa03      	add	r2, sp, #12
 8107084:	4621      	mov	r1, r4
 8107086:	4640      	mov	r0, r8
 8107088:	f7ff fee4 	bl	8106e54 <_printf_common>
 810708c:	3001      	adds	r0, #1
 810708e:	d14a      	bne.n	8107126 <_printf_i+0x1f6>
 8107090:	f04f 30ff 	mov.w	r0, #4294967295
 8107094:	b004      	add	sp, #16
 8107096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810709a:	6823      	ldr	r3, [r4, #0]
 810709c:	f043 0320 	orr.w	r3, r3, #32
 81070a0:	6023      	str	r3, [r4, #0]
 81070a2:	4833      	ldr	r0, [pc, #204]	; (8107170 <_printf_i+0x240>)
 81070a4:	2778      	movs	r7, #120	; 0x78
 81070a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 81070aa:	6823      	ldr	r3, [r4, #0]
 81070ac:	6829      	ldr	r1, [r5, #0]
 81070ae:	061f      	lsls	r7, r3, #24
 81070b0:	f851 6b04 	ldr.w	r6, [r1], #4
 81070b4:	d402      	bmi.n	81070bc <_printf_i+0x18c>
 81070b6:	065f      	lsls	r7, r3, #25
 81070b8:	bf48      	it	mi
 81070ba:	b2b6      	uxthmi	r6, r6
 81070bc:	07df      	lsls	r7, r3, #31
 81070be:	bf48      	it	mi
 81070c0:	f043 0320 	orrmi.w	r3, r3, #32
 81070c4:	6029      	str	r1, [r5, #0]
 81070c6:	bf48      	it	mi
 81070c8:	6023      	strmi	r3, [r4, #0]
 81070ca:	b91e      	cbnz	r6, 81070d4 <_printf_i+0x1a4>
 81070cc:	6823      	ldr	r3, [r4, #0]
 81070ce:	f023 0320 	bic.w	r3, r3, #32
 81070d2:	6023      	str	r3, [r4, #0]
 81070d4:	2310      	movs	r3, #16
 81070d6:	e7a7      	b.n	8107028 <_printf_i+0xf8>
 81070d8:	4824      	ldr	r0, [pc, #144]	; (810716c <_printf_i+0x23c>)
 81070da:	e7e4      	b.n	81070a6 <_printf_i+0x176>
 81070dc:	4615      	mov	r5, r2
 81070de:	e7bd      	b.n	810705c <_printf_i+0x12c>
 81070e0:	682b      	ldr	r3, [r5, #0]
 81070e2:	6826      	ldr	r6, [r4, #0]
 81070e4:	6961      	ldr	r1, [r4, #20]
 81070e6:	1d18      	adds	r0, r3, #4
 81070e8:	6028      	str	r0, [r5, #0]
 81070ea:	0635      	lsls	r5, r6, #24
 81070ec:	681b      	ldr	r3, [r3, #0]
 81070ee:	d501      	bpl.n	81070f4 <_printf_i+0x1c4>
 81070f0:	6019      	str	r1, [r3, #0]
 81070f2:	e002      	b.n	81070fa <_printf_i+0x1ca>
 81070f4:	0670      	lsls	r0, r6, #25
 81070f6:	d5fb      	bpl.n	81070f0 <_printf_i+0x1c0>
 81070f8:	8019      	strh	r1, [r3, #0]
 81070fa:	2300      	movs	r3, #0
 81070fc:	6123      	str	r3, [r4, #16]
 81070fe:	4615      	mov	r5, r2
 8107100:	e7bc      	b.n	810707c <_printf_i+0x14c>
 8107102:	682b      	ldr	r3, [r5, #0]
 8107104:	1d1a      	adds	r2, r3, #4
 8107106:	602a      	str	r2, [r5, #0]
 8107108:	681d      	ldr	r5, [r3, #0]
 810710a:	6862      	ldr	r2, [r4, #4]
 810710c:	2100      	movs	r1, #0
 810710e:	4628      	mov	r0, r5
 8107110:	f7f9 f8e6 	bl	81002e0 <memchr>
 8107114:	b108      	cbz	r0, 810711a <_printf_i+0x1ea>
 8107116:	1b40      	subs	r0, r0, r5
 8107118:	6060      	str	r0, [r4, #4]
 810711a:	6863      	ldr	r3, [r4, #4]
 810711c:	6123      	str	r3, [r4, #16]
 810711e:	2300      	movs	r3, #0
 8107120:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8107124:	e7aa      	b.n	810707c <_printf_i+0x14c>
 8107126:	6923      	ldr	r3, [r4, #16]
 8107128:	462a      	mov	r2, r5
 810712a:	4649      	mov	r1, r9
 810712c:	4640      	mov	r0, r8
 810712e:	47d0      	blx	sl
 8107130:	3001      	adds	r0, #1
 8107132:	d0ad      	beq.n	8107090 <_printf_i+0x160>
 8107134:	6823      	ldr	r3, [r4, #0]
 8107136:	079b      	lsls	r3, r3, #30
 8107138:	d413      	bmi.n	8107162 <_printf_i+0x232>
 810713a:	68e0      	ldr	r0, [r4, #12]
 810713c:	9b03      	ldr	r3, [sp, #12]
 810713e:	4298      	cmp	r0, r3
 8107140:	bfb8      	it	lt
 8107142:	4618      	movlt	r0, r3
 8107144:	e7a6      	b.n	8107094 <_printf_i+0x164>
 8107146:	2301      	movs	r3, #1
 8107148:	4632      	mov	r2, r6
 810714a:	4649      	mov	r1, r9
 810714c:	4640      	mov	r0, r8
 810714e:	47d0      	blx	sl
 8107150:	3001      	adds	r0, #1
 8107152:	d09d      	beq.n	8107090 <_printf_i+0x160>
 8107154:	3501      	adds	r5, #1
 8107156:	68e3      	ldr	r3, [r4, #12]
 8107158:	9903      	ldr	r1, [sp, #12]
 810715a:	1a5b      	subs	r3, r3, r1
 810715c:	42ab      	cmp	r3, r5
 810715e:	dcf2      	bgt.n	8107146 <_printf_i+0x216>
 8107160:	e7eb      	b.n	810713a <_printf_i+0x20a>
 8107162:	2500      	movs	r5, #0
 8107164:	f104 0619 	add.w	r6, r4, #25
 8107168:	e7f5      	b.n	8107156 <_printf_i+0x226>
 810716a:	bf00      	nop
 810716c:	0810b766 	.word	0x0810b766
 8107170:	0810b777 	.word	0x0810b777

08107174 <_scanf_float>:
 8107174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107178:	b087      	sub	sp, #28
 810717a:	4617      	mov	r7, r2
 810717c:	9303      	str	r3, [sp, #12]
 810717e:	688b      	ldr	r3, [r1, #8]
 8107180:	1e5a      	subs	r2, r3, #1
 8107182:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8107186:	bf83      	ittte	hi
 8107188:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 810718c:	195b      	addhi	r3, r3, r5
 810718e:	9302      	strhi	r3, [sp, #8]
 8107190:	2300      	movls	r3, #0
 8107192:	bf86      	itte	hi
 8107194:	f240 135d 	movwhi	r3, #349	; 0x15d
 8107198:	608b      	strhi	r3, [r1, #8]
 810719a:	9302      	strls	r3, [sp, #8]
 810719c:	680b      	ldr	r3, [r1, #0]
 810719e:	468b      	mov	fp, r1
 81071a0:	2500      	movs	r5, #0
 81071a2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 81071a6:	f84b 3b1c 	str.w	r3, [fp], #28
 81071aa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 81071ae:	4680      	mov	r8, r0
 81071b0:	460c      	mov	r4, r1
 81071b2:	465e      	mov	r6, fp
 81071b4:	46aa      	mov	sl, r5
 81071b6:	46a9      	mov	r9, r5
 81071b8:	9501      	str	r5, [sp, #4]
 81071ba:	68a2      	ldr	r2, [r4, #8]
 81071bc:	b152      	cbz	r2, 81071d4 <_scanf_float+0x60>
 81071be:	683b      	ldr	r3, [r7, #0]
 81071c0:	781b      	ldrb	r3, [r3, #0]
 81071c2:	2b4e      	cmp	r3, #78	; 0x4e
 81071c4:	d864      	bhi.n	8107290 <_scanf_float+0x11c>
 81071c6:	2b40      	cmp	r3, #64	; 0x40
 81071c8:	d83c      	bhi.n	8107244 <_scanf_float+0xd0>
 81071ca:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 81071ce:	b2c8      	uxtb	r0, r1
 81071d0:	280e      	cmp	r0, #14
 81071d2:	d93a      	bls.n	810724a <_scanf_float+0xd6>
 81071d4:	f1b9 0f00 	cmp.w	r9, #0
 81071d8:	d003      	beq.n	81071e2 <_scanf_float+0x6e>
 81071da:	6823      	ldr	r3, [r4, #0]
 81071dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81071e0:	6023      	str	r3, [r4, #0]
 81071e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 81071e6:	f1ba 0f01 	cmp.w	sl, #1
 81071ea:	f200 8113 	bhi.w	8107414 <_scanf_float+0x2a0>
 81071ee:	455e      	cmp	r6, fp
 81071f0:	f200 8105 	bhi.w	81073fe <_scanf_float+0x28a>
 81071f4:	2501      	movs	r5, #1
 81071f6:	4628      	mov	r0, r5
 81071f8:	b007      	add	sp, #28
 81071fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81071fe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8107202:	2a0d      	cmp	r2, #13
 8107204:	d8e6      	bhi.n	81071d4 <_scanf_float+0x60>
 8107206:	a101      	add	r1, pc, #4	; (adr r1, 810720c <_scanf_float+0x98>)
 8107208:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 810720c:	0810734b 	.word	0x0810734b
 8107210:	081071d5 	.word	0x081071d5
 8107214:	081071d5 	.word	0x081071d5
 8107218:	081071d5 	.word	0x081071d5
 810721c:	081073ab 	.word	0x081073ab
 8107220:	08107383 	.word	0x08107383
 8107224:	081071d5 	.word	0x081071d5
 8107228:	081071d5 	.word	0x081071d5
 810722c:	08107359 	.word	0x08107359
 8107230:	081071d5 	.word	0x081071d5
 8107234:	081071d5 	.word	0x081071d5
 8107238:	081071d5 	.word	0x081071d5
 810723c:	081071d5 	.word	0x081071d5
 8107240:	08107311 	.word	0x08107311
 8107244:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8107248:	e7db      	b.n	8107202 <_scanf_float+0x8e>
 810724a:	290e      	cmp	r1, #14
 810724c:	d8c2      	bhi.n	81071d4 <_scanf_float+0x60>
 810724e:	a001      	add	r0, pc, #4	; (adr r0, 8107254 <_scanf_float+0xe0>)
 8107250:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8107254:	08107303 	.word	0x08107303
 8107258:	081071d5 	.word	0x081071d5
 810725c:	08107303 	.word	0x08107303
 8107260:	08107397 	.word	0x08107397
 8107264:	081071d5 	.word	0x081071d5
 8107268:	081072b1 	.word	0x081072b1
 810726c:	081072ed 	.word	0x081072ed
 8107270:	081072ed 	.word	0x081072ed
 8107274:	081072ed 	.word	0x081072ed
 8107278:	081072ed 	.word	0x081072ed
 810727c:	081072ed 	.word	0x081072ed
 8107280:	081072ed 	.word	0x081072ed
 8107284:	081072ed 	.word	0x081072ed
 8107288:	081072ed 	.word	0x081072ed
 810728c:	081072ed 	.word	0x081072ed
 8107290:	2b6e      	cmp	r3, #110	; 0x6e
 8107292:	d809      	bhi.n	81072a8 <_scanf_float+0x134>
 8107294:	2b60      	cmp	r3, #96	; 0x60
 8107296:	d8b2      	bhi.n	81071fe <_scanf_float+0x8a>
 8107298:	2b54      	cmp	r3, #84	; 0x54
 810729a:	d077      	beq.n	810738c <_scanf_float+0x218>
 810729c:	2b59      	cmp	r3, #89	; 0x59
 810729e:	d199      	bne.n	81071d4 <_scanf_float+0x60>
 81072a0:	2d07      	cmp	r5, #7
 81072a2:	d197      	bne.n	81071d4 <_scanf_float+0x60>
 81072a4:	2508      	movs	r5, #8
 81072a6:	e029      	b.n	81072fc <_scanf_float+0x188>
 81072a8:	2b74      	cmp	r3, #116	; 0x74
 81072aa:	d06f      	beq.n	810738c <_scanf_float+0x218>
 81072ac:	2b79      	cmp	r3, #121	; 0x79
 81072ae:	e7f6      	b.n	810729e <_scanf_float+0x12a>
 81072b0:	6821      	ldr	r1, [r4, #0]
 81072b2:	05c8      	lsls	r0, r1, #23
 81072b4:	d51a      	bpl.n	81072ec <_scanf_float+0x178>
 81072b6:	9b02      	ldr	r3, [sp, #8]
 81072b8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 81072bc:	6021      	str	r1, [r4, #0]
 81072be:	f109 0901 	add.w	r9, r9, #1
 81072c2:	b11b      	cbz	r3, 81072cc <_scanf_float+0x158>
 81072c4:	3b01      	subs	r3, #1
 81072c6:	3201      	adds	r2, #1
 81072c8:	9302      	str	r3, [sp, #8]
 81072ca:	60a2      	str	r2, [r4, #8]
 81072cc:	68a3      	ldr	r3, [r4, #8]
 81072ce:	3b01      	subs	r3, #1
 81072d0:	60a3      	str	r3, [r4, #8]
 81072d2:	6923      	ldr	r3, [r4, #16]
 81072d4:	3301      	adds	r3, #1
 81072d6:	6123      	str	r3, [r4, #16]
 81072d8:	687b      	ldr	r3, [r7, #4]
 81072da:	3b01      	subs	r3, #1
 81072dc:	2b00      	cmp	r3, #0
 81072de:	607b      	str	r3, [r7, #4]
 81072e0:	f340 8084 	ble.w	81073ec <_scanf_float+0x278>
 81072e4:	683b      	ldr	r3, [r7, #0]
 81072e6:	3301      	adds	r3, #1
 81072e8:	603b      	str	r3, [r7, #0]
 81072ea:	e766      	b.n	81071ba <_scanf_float+0x46>
 81072ec:	eb1a 0f05 	cmn.w	sl, r5
 81072f0:	f47f af70 	bne.w	81071d4 <_scanf_float+0x60>
 81072f4:	6822      	ldr	r2, [r4, #0]
 81072f6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 81072fa:	6022      	str	r2, [r4, #0]
 81072fc:	f806 3b01 	strb.w	r3, [r6], #1
 8107300:	e7e4      	b.n	81072cc <_scanf_float+0x158>
 8107302:	6822      	ldr	r2, [r4, #0]
 8107304:	0610      	lsls	r0, r2, #24
 8107306:	f57f af65 	bpl.w	81071d4 <_scanf_float+0x60>
 810730a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810730e:	e7f4      	b.n	81072fa <_scanf_float+0x186>
 8107310:	f1ba 0f00 	cmp.w	sl, #0
 8107314:	d10e      	bne.n	8107334 <_scanf_float+0x1c0>
 8107316:	f1b9 0f00 	cmp.w	r9, #0
 810731a:	d10e      	bne.n	810733a <_scanf_float+0x1c6>
 810731c:	6822      	ldr	r2, [r4, #0]
 810731e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8107322:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8107326:	d108      	bne.n	810733a <_scanf_float+0x1c6>
 8107328:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810732c:	6022      	str	r2, [r4, #0]
 810732e:	f04f 0a01 	mov.w	sl, #1
 8107332:	e7e3      	b.n	81072fc <_scanf_float+0x188>
 8107334:	f1ba 0f02 	cmp.w	sl, #2
 8107338:	d055      	beq.n	81073e6 <_scanf_float+0x272>
 810733a:	2d01      	cmp	r5, #1
 810733c:	d002      	beq.n	8107344 <_scanf_float+0x1d0>
 810733e:	2d04      	cmp	r5, #4
 8107340:	f47f af48 	bne.w	81071d4 <_scanf_float+0x60>
 8107344:	3501      	adds	r5, #1
 8107346:	b2ed      	uxtb	r5, r5
 8107348:	e7d8      	b.n	81072fc <_scanf_float+0x188>
 810734a:	f1ba 0f01 	cmp.w	sl, #1
 810734e:	f47f af41 	bne.w	81071d4 <_scanf_float+0x60>
 8107352:	f04f 0a02 	mov.w	sl, #2
 8107356:	e7d1      	b.n	81072fc <_scanf_float+0x188>
 8107358:	b97d      	cbnz	r5, 810737a <_scanf_float+0x206>
 810735a:	f1b9 0f00 	cmp.w	r9, #0
 810735e:	f47f af3c 	bne.w	81071da <_scanf_float+0x66>
 8107362:	6822      	ldr	r2, [r4, #0]
 8107364:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8107368:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 810736c:	f47f af39 	bne.w	81071e2 <_scanf_float+0x6e>
 8107370:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8107374:	6022      	str	r2, [r4, #0]
 8107376:	2501      	movs	r5, #1
 8107378:	e7c0      	b.n	81072fc <_scanf_float+0x188>
 810737a:	2d03      	cmp	r5, #3
 810737c:	d0e2      	beq.n	8107344 <_scanf_float+0x1d0>
 810737e:	2d05      	cmp	r5, #5
 8107380:	e7de      	b.n	8107340 <_scanf_float+0x1cc>
 8107382:	2d02      	cmp	r5, #2
 8107384:	f47f af26 	bne.w	81071d4 <_scanf_float+0x60>
 8107388:	2503      	movs	r5, #3
 810738a:	e7b7      	b.n	81072fc <_scanf_float+0x188>
 810738c:	2d06      	cmp	r5, #6
 810738e:	f47f af21 	bne.w	81071d4 <_scanf_float+0x60>
 8107392:	2507      	movs	r5, #7
 8107394:	e7b2      	b.n	81072fc <_scanf_float+0x188>
 8107396:	6822      	ldr	r2, [r4, #0]
 8107398:	0591      	lsls	r1, r2, #22
 810739a:	f57f af1b 	bpl.w	81071d4 <_scanf_float+0x60>
 810739e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 81073a2:	6022      	str	r2, [r4, #0]
 81073a4:	f8cd 9004 	str.w	r9, [sp, #4]
 81073a8:	e7a8      	b.n	81072fc <_scanf_float+0x188>
 81073aa:	6822      	ldr	r2, [r4, #0]
 81073ac:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 81073b0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 81073b4:	d006      	beq.n	81073c4 <_scanf_float+0x250>
 81073b6:	0550      	lsls	r0, r2, #21
 81073b8:	f57f af0c 	bpl.w	81071d4 <_scanf_float+0x60>
 81073bc:	f1b9 0f00 	cmp.w	r9, #0
 81073c0:	f43f af0f 	beq.w	81071e2 <_scanf_float+0x6e>
 81073c4:	0591      	lsls	r1, r2, #22
 81073c6:	bf58      	it	pl
 81073c8:	9901      	ldrpl	r1, [sp, #4]
 81073ca:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 81073ce:	bf58      	it	pl
 81073d0:	eba9 0101 	subpl.w	r1, r9, r1
 81073d4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 81073d8:	bf58      	it	pl
 81073da:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 81073de:	6022      	str	r2, [r4, #0]
 81073e0:	f04f 0900 	mov.w	r9, #0
 81073e4:	e78a      	b.n	81072fc <_scanf_float+0x188>
 81073e6:	f04f 0a03 	mov.w	sl, #3
 81073ea:	e787      	b.n	81072fc <_scanf_float+0x188>
 81073ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 81073f0:	4639      	mov	r1, r7
 81073f2:	4640      	mov	r0, r8
 81073f4:	4798      	blx	r3
 81073f6:	2800      	cmp	r0, #0
 81073f8:	f43f aedf 	beq.w	81071ba <_scanf_float+0x46>
 81073fc:	e6ea      	b.n	81071d4 <_scanf_float+0x60>
 81073fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8107402:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8107406:	463a      	mov	r2, r7
 8107408:	4640      	mov	r0, r8
 810740a:	4798      	blx	r3
 810740c:	6923      	ldr	r3, [r4, #16]
 810740e:	3b01      	subs	r3, #1
 8107410:	6123      	str	r3, [r4, #16]
 8107412:	e6ec      	b.n	81071ee <_scanf_float+0x7a>
 8107414:	1e6b      	subs	r3, r5, #1
 8107416:	2b06      	cmp	r3, #6
 8107418:	d825      	bhi.n	8107466 <_scanf_float+0x2f2>
 810741a:	2d02      	cmp	r5, #2
 810741c:	d836      	bhi.n	810748c <_scanf_float+0x318>
 810741e:	455e      	cmp	r6, fp
 8107420:	f67f aee8 	bls.w	81071f4 <_scanf_float+0x80>
 8107424:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8107428:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810742c:	463a      	mov	r2, r7
 810742e:	4640      	mov	r0, r8
 8107430:	4798      	blx	r3
 8107432:	6923      	ldr	r3, [r4, #16]
 8107434:	3b01      	subs	r3, #1
 8107436:	6123      	str	r3, [r4, #16]
 8107438:	e7f1      	b.n	810741e <_scanf_float+0x2aa>
 810743a:	9802      	ldr	r0, [sp, #8]
 810743c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8107440:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8107444:	9002      	str	r0, [sp, #8]
 8107446:	463a      	mov	r2, r7
 8107448:	4640      	mov	r0, r8
 810744a:	4798      	blx	r3
 810744c:	6923      	ldr	r3, [r4, #16]
 810744e:	3b01      	subs	r3, #1
 8107450:	6123      	str	r3, [r4, #16]
 8107452:	f10a 3aff 	add.w	sl, sl, #4294967295
 8107456:	fa5f fa8a 	uxtb.w	sl, sl
 810745a:	f1ba 0f02 	cmp.w	sl, #2
 810745e:	d1ec      	bne.n	810743a <_scanf_float+0x2c6>
 8107460:	3d03      	subs	r5, #3
 8107462:	b2ed      	uxtb	r5, r5
 8107464:	1b76      	subs	r6, r6, r5
 8107466:	6823      	ldr	r3, [r4, #0]
 8107468:	05da      	lsls	r2, r3, #23
 810746a:	d52f      	bpl.n	81074cc <_scanf_float+0x358>
 810746c:	055b      	lsls	r3, r3, #21
 810746e:	d510      	bpl.n	8107492 <_scanf_float+0x31e>
 8107470:	455e      	cmp	r6, fp
 8107472:	f67f aebf 	bls.w	81071f4 <_scanf_float+0x80>
 8107476:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810747a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810747e:	463a      	mov	r2, r7
 8107480:	4640      	mov	r0, r8
 8107482:	4798      	blx	r3
 8107484:	6923      	ldr	r3, [r4, #16]
 8107486:	3b01      	subs	r3, #1
 8107488:	6123      	str	r3, [r4, #16]
 810748a:	e7f1      	b.n	8107470 <_scanf_float+0x2fc>
 810748c:	46aa      	mov	sl, r5
 810748e:	9602      	str	r6, [sp, #8]
 8107490:	e7df      	b.n	8107452 <_scanf_float+0x2de>
 8107492:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8107496:	6923      	ldr	r3, [r4, #16]
 8107498:	2965      	cmp	r1, #101	; 0x65
 810749a:	f103 33ff 	add.w	r3, r3, #4294967295
 810749e:	f106 35ff 	add.w	r5, r6, #4294967295
 81074a2:	6123      	str	r3, [r4, #16]
 81074a4:	d00c      	beq.n	81074c0 <_scanf_float+0x34c>
 81074a6:	2945      	cmp	r1, #69	; 0x45
 81074a8:	d00a      	beq.n	81074c0 <_scanf_float+0x34c>
 81074aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81074ae:	463a      	mov	r2, r7
 81074b0:	4640      	mov	r0, r8
 81074b2:	4798      	blx	r3
 81074b4:	6923      	ldr	r3, [r4, #16]
 81074b6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 81074ba:	3b01      	subs	r3, #1
 81074bc:	1eb5      	subs	r5, r6, #2
 81074be:	6123      	str	r3, [r4, #16]
 81074c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81074c4:	463a      	mov	r2, r7
 81074c6:	4640      	mov	r0, r8
 81074c8:	4798      	blx	r3
 81074ca:	462e      	mov	r6, r5
 81074cc:	6825      	ldr	r5, [r4, #0]
 81074ce:	f015 0510 	ands.w	r5, r5, #16
 81074d2:	d158      	bne.n	8107586 <_scanf_float+0x412>
 81074d4:	7035      	strb	r5, [r6, #0]
 81074d6:	6823      	ldr	r3, [r4, #0]
 81074d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 81074dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81074e0:	d11c      	bne.n	810751c <_scanf_float+0x3a8>
 81074e2:	9b01      	ldr	r3, [sp, #4]
 81074e4:	454b      	cmp	r3, r9
 81074e6:	eba3 0209 	sub.w	r2, r3, r9
 81074ea:	d124      	bne.n	8107536 <_scanf_float+0x3c2>
 81074ec:	2200      	movs	r2, #0
 81074ee:	4659      	mov	r1, fp
 81074f0:	4640      	mov	r0, r8
 81074f2:	f002 fd41 	bl	8109f78 <_strtod_r>
 81074f6:	9b03      	ldr	r3, [sp, #12]
 81074f8:	6821      	ldr	r1, [r4, #0]
 81074fa:	681b      	ldr	r3, [r3, #0]
 81074fc:	f011 0f02 	tst.w	r1, #2
 8107500:	ec57 6b10 	vmov	r6, r7, d0
 8107504:	f103 0204 	add.w	r2, r3, #4
 8107508:	d020      	beq.n	810754c <_scanf_float+0x3d8>
 810750a:	9903      	ldr	r1, [sp, #12]
 810750c:	600a      	str	r2, [r1, #0]
 810750e:	681b      	ldr	r3, [r3, #0]
 8107510:	e9c3 6700 	strd	r6, r7, [r3]
 8107514:	68e3      	ldr	r3, [r4, #12]
 8107516:	3301      	adds	r3, #1
 8107518:	60e3      	str	r3, [r4, #12]
 810751a:	e66c      	b.n	81071f6 <_scanf_float+0x82>
 810751c:	9b04      	ldr	r3, [sp, #16]
 810751e:	2b00      	cmp	r3, #0
 8107520:	d0e4      	beq.n	81074ec <_scanf_float+0x378>
 8107522:	9905      	ldr	r1, [sp, #20]
 8107524:	230a      	movs	r3, #10
 8107526:	462a      	mov	r2, r5
 8107528:	3101      	adds	r1, #1
 810752a:	4640      	mov	r0, r8
 810752c:	f002 fdac 	bl	810a088 <_strtol_r>
 8107530:	9b04      	ldr	r3, [sp, #16]
 8107532:	9e05      	ldr	r6, [sp, #20]
 8107534:	1ac2      	subs	r2, r0, r3
 8107536:	f204 136f 	addw	r3, r4, #367	; 0x16f
 810753a:	429e      	cmp	r6, r3
 810753c:	bf28      	it	cs
 810753e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8107542:	4912      	ldr	r1, [pc, #72]	; (810758c <_scanf_float+0x418>)
 8107544:	4630      	mov	r0, r6
 8107546:	f000 f955 	bl	81077f4 <siprintf>
 810754a:	e7cf      	b.n	81074ec <_scanf_float+0x378>
 810754c:	f011 0f04 	tst.w	r1, #4
 8107550:	9903      	ldr	r1, [sp, #12]
 8107552:	600a      	str	r2, [r1, #0]
 8107554:	d1db      	bne.n	810750e <_scanf_float+0x39a>
 8107556:	f8d3 8000 	ldr.w	r8, [r3]
 810755a:	ee10 2a10 	vmov	r2, s0
 810755e:	ee10 0a10 	vmov	r0, s0
 8107562:	463b      	mov	r3, r7
 8107564:	4639      	mov	r1, r7
 8107566:	f7f9 fb69 	bl	8100c3c <__aeabi_dcmpun>
 810756a:	b128      	cbz	r0, 8107578 <_scanf_float+0x404>
 810756c:	4808      	ldr	r0, [pc, #32]	; (8107590 <_scanf_float+0x41c>)
 810756e:	f000 fac7 	bl	8107b00 <nanf>
 8107572:	ed88 0a00 	vstr	s0, [r8]
 8107576:	e7cd      	b.n	8107514 <_scanf_float+0x3a0>
 8107578:	4630      	mov	r0, r6
 810757a:	4639      	mov	r1, r7
 810757c:	f7f9 fbbc 	bl	8100cf8 <__aeabi_d2f>
 8107580:	f8c8 0000 	str.w	r0, [r8]
 8107584:	e7c6      	b.n	8107514 <_scanf_float+0x3a0>
 8107586:	2500      	movs	r5, #0
 8107588:	e635      	b.n	81071f6 <_scanf_float+0x82>
 810758a:	bf00      	nop
 810758c:	0810b788 	.word	0x0810b788
 8107590:	0810bb1d 	.word	0x0810bb1d

08107594 <std>:
 8107594:	2300      	movs	r3, #0
 8107596:	b510      	push	{r4, lr}
 8107598:	4604      	mov	r4, r0
 810759a:	e9c0 3300 	strd	r3, r3, [r0]
 810759e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 81075a2:	6083      	str	r3, [r0, #8]
 81075a4:	8181      	strh	r1, [r0, #12]
 81075a6:	6643      	str	r3, [r0, #100]	; 0x64
 81075a8:	81c2      	strh	r2, [r0, #14]
 81075aa:	6183      	str	r3, [r0, #24]
 81075ac:	4619      	mov	r1, r3
 81075ae:	2208      	movs	r2, #8
 81075b0:	305c      	adds	r0, #92	; 0x5c
 81075b2:	f000 fa17 	bl	81079e4 <memset>
 81075b6:	4b0d      	ldr	r3, [pc, #52]	; (81075ec <std+0x58>)
 81075b8:	6263      	str	r3, [r4, #36]	; 0x24
 81075ba:	4b0d      	ldr	r3, [pc, #52]	; (81075f0 <std+0x5c>)
 81075bc:	62a3      	str	r3, [r4, #40]	; 0x28
 81075be:	4b0d      	ldr	r3, [pc, #52]	; (81075f4 <std+0x60>)
 81075c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 81075c2:	4b0d      	ldr	r3, [pc, #52]	; (81075f8 <std+0x64>)
 81075c4:	6323      	str	r3, [r4, #48]	; 0x30
 81075c6:	4b0d      	ldr	r3, [pc, #52]	; (81075fc <std+0x68>)
 81075c8:	6224      	str	r4, [r4, #32]
 81075ca:	429c      	cmp	r4, r3
 81075cc:	d006      	beq.n	81075dc <std+0x48>
 81075ce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 81075d2:	4294      	cmp	r4, r2
 81075d4:	d002      	beq.n	81075dc <std+0x48>
 81075d6:	33d0      	adds	r3, #208	; 0xd0
 81075d8:	429c      	cmp	r4, r3
 81075da:	d105      	bne.n	81075e8 <std+0x54>
 81075dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 81075e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81075e4:	f000 ba7a 	b.w	8107adc <__retarget_lock_init_recursive>
 81075e8:	bd10      	pop	{r4, pc}
 81075ea:	bf00      	nop
 81075ec:	08107835 	.word	0x08107835
 81075f0:	08107857 	.word	0x08107857
 81075f4:	0810788f 	.word	0x0810788f
 81075f8:	081078b3 	.word	0x081078b3
 81075fc:	100002f8 	.word	0x100002f8

08107600 <stdio_exit_handler>:
 8107600:	4a02      	ldr	r2, [pc, #8]	; (810760c <stdio_exit_handler+0xc>)
 8107602:	4903      	ldr	r1, [pc, #12]	; (8107610 <stdio_exit_handler+0x10>)
 8107604:	4803      	ldr	r0, [pc, #12]	; (8107614 <stdio_exit_handler+0x14>)
 8107606:	f000 b869 	b.w	81076dc <_fwalk_sglue>
 810760a:	bf00      	nop
 810760c:	10000020 	.word	0x10000020
 8107610:	0810a6d1 	.word	0x0810a6d1
 8107614:	1000002c 	.word	0x1000002c

08107618 <cleanup_stdio>:
 8107618:	6841      	ldr	r1, [r0, #4]
 810761a:	4b0c      	ldr	r3, [pc, #48]	; (810764c <cleanup_stdio+0x34>)
 810761c:	4299      	cmp	r1, r3
 810761e:	b510      	push	{r4, lr}
 8107620:	4604      	mov	r4, r0
 8107622:	d001      	beq.n	8107628 <cleanup_stdio+0x10>
 8107624:	f003 f854 	bl	810a6d0 <_fflush_r>
 8107628:	68a1      	ldr	r1, [r4, #8]
 810762a:	4b09      	ldr	r3, [pc, #36]	; (8107650 <cleanup_stdio+0x38>)
 810762c:	4299      	cmp	r1, r3
 810762e:	d002      	beq.n	8107636 <cleanup_stdio+0x1e>
 8107630:	4620      	mov	r0, r4
 8107632:	f003 f84d 	bl	810a6d0 <_fflush_r>
 8107636:	68e1      	ldr	r1, [r4, #12]
 8107638:	4b06      	ldr	r3, [pc, #24]	; (8107654 <cleanup_stdio+0x3c>)
 810763a:	4299      	cmp	r1, r3
 810763c:	d004      	beq.n	8107648 <cleanup_stdio+0x30>
 810763e:	4620      	mov	r0, r4
 8107640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8107644:	f003 b844 	b.w	810a6d0 <_fflush_r>
 8107648:	bd10      	pop	{r4, pc}
 810764a:	bf00      	nop
 810764c:	100002f8 	.word	0x100002f8
 8107650:	10000360 	.word	0x10000360
 8107654:	100003c8 	.word	0x100003c8

08107658 <global_stdio_init.part.0>:
 8107658:	b510      	push	{r4, lr}
 810765a:	4b0b      	ldr	r3, [pc, #44]	; (8107688 <global_stdio_init.part.0+0x30>)
 810765c:	4c0b      	ldr	r4, [pc, #44]	; (810768c <global_stdio_init.part.0+0x34>)
 810765e:	4a0c      	ldr	r2, [pc, #48]	; (8107690 <global_stdio_init.part.0+0x38>)
 8107660:	601a      	str	r2, [r3, #0]
 8107662:	4620      	mov	r0, r4
 8107664:	2200      	movs	r2, #0
 8107666:	2104      	movs	r1, #4
 8107668:	f7ff ff94 	bl	8107594 <std>
 810766c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8107670:	2201      	movs	r2, #1
 8107672:	2109      	movs	r1, #9
 8107674:	f7ff ff8e 	bl	8107594 <std>
 8107678:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 810767c:	2202      	movs	r2, #2
 810767e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8107682:	2112      	movs	r1, #18
 8107684:	f7ff bf86 	b.w	8107594 <std>
 8107688:	10000430 	.word	0x10000430
 810768c:	100002f8 	.word	0x100002f8
 8107690:	08107601 	.word	0x08107601

08107694 <__sfp_lock_acquire>:
 8107694:	4801      	ldr	r0, [pc, #4]	; (810769c <__sfp_lock_acquire+0x8>)
 8107696:	f000 ba22 	b.w	8107ade <__retarget_lock_acquire_recursive>
 810769a:	bf00      	nop
 810769c:	10000439 	.word	0x10000439

081076a0 <__sfp_lock_release>:
 81076a0:	4801      	ldr	r0, [pc, #4]	; (81076a8 <__sfp_lock_release+0x8>)
 81076a2:	f000 ba1d 	b.w	8107ae0 <__retarget_lock_release_recursive>
 81076a6:	bf00      	nop
 81076a8:	10000439 	.word	0x10000439

081076ac <__sinit>:
 81076ac:	b510      	push	{r4, lr}
 81076ae:	4604      	mov	r4, r0
 81076b0:	f7ff fff0 	bl	8107694 <__sfp_lock_acquire>
 81076b4:	6a23      	ldr	r3, [r4, #32]
 81076b6:	b11b      	cbz	r3, 81076c0 <__sinit+0x14>
 81076b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81076bc:	f7ff bff0 	b.w	81076a0 <__sfp_lock_release>
 81076c0:	4b04      	ldr	r3, [pc, #16]	; (81076d4 <__sinit+0x28>)
 81076c2:	6223      	str	r3, [r4, #32]
 81076c4:	4b04      	ldr	r3, [pc, #16]	; (81076d8 <__sinit+0x2c>)
 81076c6:	681b      	ldr	r3, [r3, #0]
 81076c8:	2b00      	cmp	r3, #0
 81076ca:	d1f5      	bne.n	81076b8 <__sinit+0xc>
 81076cc:	f7ff ffc4 	bl	8107658 <global_stdio_init.part.0>
 81076d0:	e7f2      	b.n	81076b8 <__sinit+0xc>
 81076d2:	bf00      	nop
 81076d4:	08107619 	.word	0x08107619
 81076d8:	10000430 	.word	0x10000430

081076dc <_fwalk_sglue>:
 81076dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81076e0:	4607      	mov	r7, r0
 81076e2:	4688      	mov	r8, r1
 81076e4:	4614      	mov	r4, r2
 81076e6:	2600      	movs	r6, #0
 81076e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 81076ec:	f1b9 0901 	subs.w	r9, r9, #1
 81076f0:	d505      	bpl.n	81076fe <_fwalk_sglue+0x22>
 81076f2:	6824      	ldr	r4, [r4, #0]
 81076f4:	2c00      	cmp	r4, #0
 81076f6:	d1f7      	bne.n	81076e8 <_fwalk_sglue+0xc>
 81076f8:	4630      	mov	r0, r6
 81076fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81076fe:	89ab      	ldrh	r3, [r5, #12]
 8107700:	2b01      	cmp	r3, #1
 8107702:	d907      	bls.n	8107714 <_fwalk_sglue+0x38>
 8107704:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8107708:	3301      	adds	r3, #1
 810770a:	d003      	beq.n	8107714 <_fwalk_sglue+0x38>
 810770c:	4629      	mov	r1, r5
 810770e:	4638      	mov	r0, r7
 8107710:	47c0      	blx	r8
 8107712:	4306      	orrs	r6, r0
 8107714:	3568      	adds	r5, #104	; 0x68
 8107716:	e7e9      	b.n	81076ec <_fwalk_sglue+0x10>

08107718 <iprintf>:
 8107718:	b40f      	push	{r0, r1, r2, r3}
 810771a:	b507      	push	{r0, r1, r2, lr}
 810771c:	4906      	ldr	r1, [pc, #24]	; (8107738 <iprintf+0x20>)
 810771e:	ab04      	add	r3, sp, #16
 8107720:	6808      	ldr	r0, [r1, #0]
 8107722:	f853 2b04 	ldr.w	r2, [r3], #4
 8107726:	6881      	ldr	r1, [r0, #8]
 8107728:	9301      	str	r3, [sp, #4]
 810772a:	f002 fe31 	bl	810a390 <_vfiprintf_r>
 810772e:	b003      	add	sp, #12
 8107730:	f85d eb04 	ldr.w	lr, [sp], #4
 8107734:	b004      	add	sp, #16
 8107736:	4770      	bx	lr
 8107738:	10000078 	.word	0x10000078

0810773c <_puts_r>:
 810773c:	6a03      	ldr	r3, [r0, #32]
 810773e:	b570      	push	{r4, r5, r6, lr}
 8107740:	6884      	ldr	r4, [r0, #8]
 8107742:	4605      	mov	r5, r0
 8107744:	460e      	mov	r6, r1
 8107746:	b90b      	cbnz	r3, 810774c <_puts_r+0x10>
 8107748:	f7ff ffb0 	bl	81076ac <__sinit>
 810774c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810774e:	07db      	lsls	r3, r3, #31
 8107750:	d405      	bmi.n	810775e <_puts_r+0x22>
 8107752:	89a3      	ldrh	r3, [r4, #12]
 8107754:	0598      	lsls	r0, r3, #22
 8107756:	d402      	bmi.n	810775e <_puts_r+0x22>
 8107758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810775a:	f000 f9c0 	bl	8107ade <__retarget_lock_acquire_recursive>
 810775e:	89a3      	ldrh	r3, [r4, #12]
 8107760:	0719      	lsls	r1, r3, #28
 8107762:	d513      	bpl.n	810778c <_puts_r+0x50>
 8107764:	6923      	ldr	r3, [r4, #16]
 8107766:	b18b      	cbz	r3, 810778c <_puts_r+0x50>
 8107768:	3e01      	subs	r6, #1
 810776a:	68a3      	ldr	r3, [r4, #8]
 810776c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8107770:	3b01      	subs	r3, #1
 8107772:	60a3      	str	r3, [r4, #8]
 8107774:	b9e9      	cbnz	r1, 81077b2 <_puts_r+0x76>
 8107776:	2b00      	cmp	r3, #0
 8107778:	da2e      	bge.n	81077d8 <_puts_r+0x9c>
 810777a:	4622      	mov	r2, r4
 810777c:	210a      	movs	r1, #10
 810777e:	4628      	mov	r0, r5
 8107780:	f000 f89b 	bl	81078ba <__swbuf_r>
 8107784:	3001      	adds	r0, #1
 8107786:	d007      	beq.n	8107798 <_puts_r+0x5c>
 8107788:	250a      	movs	r5, #10
 810778a:	e007      	b.n	810779c <_puts_r+0x60>
 810778c:	4621      	mov	r1, r4
 810778e:	4628      	mov	r0, r5
 8107790:	f000 f8d0 	bl	8107934 <__swsetup_r>
 8107794:	2800      	cmp	r0, #0
 8107796:	d0e7      	beq.n	8107768 <_puts_r+0x2c>
 8107798:	f04f 35ff 	mov.w	r5, #4294967295
 810779c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810779e:	07da      	lsls	r2, r3, #31
 81077a0:	d405      	bmi.n	81077ae <_puts_r+0x72>
 81077a2:	89a3      	ldrh	r3, [r4, #12]
 81077a4:	059b      	lsls	r3, r3, #22
 81077a6:	d402      	bmi.n	81077ae <_puts_r+0x72>
 81077a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 81077aa:	f000 f999 	bl	8107ae0 <__retarget_lock_release_recursive>
 81077ae:	4628      	mov	r0, r5
 81077b0:	bd70      	pop	{r4, r5, r6, pc}
 81077b2:	2b00      	cmp	r3, #0
 81077b4:	da04      	bge.n	81077c0 <_puts_r+0x84>
 81077b6:	69a2      	ldr	r2, [r4, #24]
 81077b8:	429a      	cmp	r2, r3
 81077ba:	dc06      	bgt.n	81077ca <_puts_r+0x8e>
 81077bc:	290a      	cmp	r1, #10
 81077be:	d004      	beq.n	81077ca <_puts_r+0x8e>
 81077c0:	6823      	ldr	r3, [r4, #0]
 81077c2:	1c5a      	adds	r2, r3, #1
 81077c4:	6022      	str	r2, [r4, #0]
 81077c6:	7019      	strb	r1, [r3, #0]
 81077c8:	e7cf      	b.n	810776a <_puts_r+0x2e>
 81077ca:	4622      	mov	r2, r4
 81077cc:	4628      	mov	r0, r5
 81077ce:	f000 f874 	bl	81078ba <__swbuf_r>
 81077d2:	3001      	adds	r0, #1
 81077d4:	d1c9      	bne.n	810776a <_puts_r+0x2e>
 81077d6:	e7df      	b.n	8107798 <_puts_r+0x5c>
 81077d8:	6823      	ldr	r3, [r4, #0]
 81077da:	250a      	movs	r5, #10
 81077dc:	1c5a      	adds	r2, r3, #1
 81077de:	6022      	str	r2, [r4, #0]
 81077e0:	701d      	strb	r5, [r3, #0]
 81077e2:	e7db      	b.n	810779c <_puts_r+0x60>

081077e4 <puts>:
 81077e4:	4b02      	ldr	r3, [pc, #8]	; (81077f0 <puts+0xc>)
 81077e6:	4601      	mov	r1, r0
 81077e8:	6818      	ldr	r0, [r3, #0]
 81077ea:	f7ff bfa7 	b.w	810773c <_puts_r>
 81077ee:	bf00      	nop
 81077f0:	10000078 	.word	0x10000078

081077f4 <siprintf>:
 81077f4:	b40e      	push	{r1, r2, r3}
 81077f6:	b500      	push	{lr}
 81077f8:	b09c      	sub	sp, #112	; 0x70
 81077fa:	ab1d      	add	r3, sp, #116	; 0x74
 81077fc:	9002      	str	r0, [sp, #8]
 81077fe:	9006      	str	r0, [sp, #24]
 8107800:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8107804:	4809      	ldr	r0, [pc, #36]	; (810782c <siprintf+0x38>)
 8107806:	9107      	str	r1, [sp, #28]
 8107808:	9104      	str	r1, [sp, #16]
 810780a:	4909      	ldr	r1, [pc, #36]	; (8107830 <siprintf+0x3c>)
 810780c:	f853 2b04 	ldr.w	r2, [r3], #4
 8107810:	9105      	str	r1, [sp, #20]
 8107812:	6800      	ldr	r0, [r0, #0]
 8107814:	9301      	str	r3, [sp, #4]
 8107816:	a902      	add	r1, sp, #8
 8107818:	f002 fc92 	bl	810a140 <_svfiprintf_r>
 810781c:	9b02      	ldr	r3, [sp, #8]
 810781e:	2200      	movs	r2, #0
 8107820:	701a      	strb	r2, [r3, #0]
 8107822:	b01c      	add	sp, #112	; 0x70
 8107824:	f85d eb04 	ldr.w	lr, [sp], #4
 8107828:	b003      	add	sp, #12
 810782a:	4770      	bx	lr
 810782c:	10000078 	.word	0x10000078
 8107830:	ffff0208 	.word	0xffff0208

08107834 <__sread>:
 8107834:	b510      	push	{r4, lr}
 8107836:	460c      	mov	r4, r1
 8107838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810783c:	f000 f900 	bl	8107a40 <_read_r>
 8107840:	2800      	cmp	r0, #0
 8107842:	bfab      	itete	ge
 8107844:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8107846:	89a3      	ldrhlt	r3, [r4, #12]
 8107848:	181b      	addge	r3, r3, r0
 810784a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810784e:	bfac      	ite	ge
 8107850:	6563      	strge	r3, [r4, #84]	; 0x54
 8107852:	81a3      	strhlt	r3, [r4, #12]
 8107854:	bd10      	pop	{r4, pc}

08107856 <__swrite>:
 8107856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810785a:	461f      	mov	r7, r3
 810785c:	898b      	ldrh	r3, [r1, #12]
 810785e:	05db      	lsls	r3, r3, #23
 8107860:	4605      	mov	r5, r0
 8107862:	460c      	mov	r4, r1
 8107864:	4616      	mov	r6, r2
 8107866:	d505      	bpl.n	8107874 <__swrite+0x1e>
 8107868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810786c:	2302      	movs	r3, #2
 810786e:	2200      	movs	r2, #0
 8107870:	f000 f8d4 	bl	8107a1c <_lseek_r>
 8107874:	89a3      	ldrh	r3, [r4, #12]
 8107876:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810787a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810787e:	81a3      	strh	r3, [r4, #12]
 8107880:	4632      	mov	r2, r6
 8107882:	463b      	mov	r3, r7
 8107884:	4628      	mov	r0, r5
 8107886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810788a:	f000 b8eb 	b.w	8107a64 <_write_r>

0810788e <__sseek>:
 810788e:	b510      	push	{r4, lr}
 8107890:	460c      	mov	r4, r1
 8107892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107896:	f000 f8c1 	bl	8107a1c <_lseek_r>
 810789a:	1c43      	adds	r3, r0, #1
 810789c:	89a3      	ldrh	r3, [r4, #12]
 810789e:	bf15      	itete	ne
 81078a0:	6560      	strne	r0, [r4, #84]	; 0x54
 81078a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 81078a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 81078aa:	81a3      	strheq	r3, [r4, #12]
 81078ac:	bf18      	it	ne
 81078ae:	81a3      	strhne	r3, [r4, #12]
 81078b0:	bd10      	pop	{r4, pc}

081078b2 <__sclose>:
 81078b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81078b6:	f000 b8a1 	b.w	81079fc <_close_r>

081078ba <__swbuf_r>:
 81078ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81078bc:	460e      	mov	r6, r1
 81078be:	4614      	mov	r4, r2
 81078c0:	4605      	mov	r5, r0
 81078c2:	b118      	cbz	r0, 81078cc <__swbuf_r+0x12>
 81078c4:	6a03      	ldr	r3, [r0, #32]
 81078c6:	b90b      	cbnz	r3, 81078cc <__swbuf_r+0x12>
 81078c8:	f7ff fef0 	bl	81076ac <__sinit>
 81078cc:	69a3      	ldr	r3, [r4, #24]
 81078ce:	60a3      	str	r3, [r4, #8]
 81078d0:	89a3      	ldrh	r3, [r4, #12]
 81078d2:	071a      	lsls	r2, r3, #28
 81078d4:	d525      	bpl.n	8107922 <__swbuf_r+0x68>
 81078d6:	6923      	ldr	r3, [r4, #16]
 81078d8:	b31b      	cbz	r3, 8107922 <__swbuf_r+0x68>
 81078da:	6823      	ldr	r3, [r4, #0]
 81078dc:	6922      	ldr	r2, [r4, #16]
 81078de:	1a98      	subs	r0, r3, r2
 81078e0:	6963      	ldr	r3, [r4, #20]
 81078e2:	b2f6      	uxtb	r6, r6
 81078e4:	4283      	cmp	r3, r0
 81078e6:	4637      	mov	r7, r6
 81078e8:	dc04      	bgt.n	81078f4 <__swbuf_r+0x3a>
 81078ea:	4621      	mov	r1, r4
 81078ec:	4628      	mov	r0, r5
 81078ee:	f002 feef 	bl	810a6d0 <_fflush_r>
 81078f2:	b9e0      	cbnz	r0, 810792e <__swbuf_r+0x74>
 81078f4:	68a3      	ldr	r3, [r4, #8]
 81078f6:	3b01      	subs	r3, #1
 81078f8:	60a3      	str	r3, [r4, #8]
 81078fa:	6823      	ldr	r3, [r4, #0]
 81078fc:	1c5a      	adds	r2, r3, #1
 81078fe:	6022      	str	r2, [r4, #0]
 8107900:	701e      	strb	r6, [r3, #0]
 8107902:	6962      	ldr	r2, [r4, #20]
 8107904:	1c43      	adds	r3, r0, #1
 8107906:	429a      	cmp	r2, r3
 8107908:	d004      	beq.n	8107914 <__swbuf_r+0x5a>
 810790a:	89a3      	ldrh	r3, [r4, #12]
 810790c:	07db      	lsls	r3, r3, #31
 810790e:	d506      	bpl.n	810791e <__swbuf_r+0x64>
 8107910:	2e0a      	cmp	r6, #10
 8107912:	d104      	bne.n	810791e <__swbuf_r+0x64>
 8107914:	4621      	mov	r1, r4
 8107916:	4628      	mov	r0, r5
 8107918:	f002 feda 	bl	810a6d0 <_fflush_r>
 810791c:	b938      	cbnz	r0, 810792e <__swbuf_r+0x74>
 810791e:	4638      	mov	r0, r7
 8107920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8107922:	4621      	mov	r1, r4
 8107924:	4628      	mov	r0, r5
 8107926:	f000 f805 	bl	8107934 <__swsetup_r>
 810792a:	2800      	cmp	r0, #0
 810792c:	d0d5      	beq.n	81078da <__swbuf_r+0x20>
 810792e:	f04f 37ff 	mov.w	r7, #4294967295
 8107932:	e7f4      	b.n	810791e <__swbuf_r+0x64>

08107934 <__swsetup_r>:
 8107934:	b538      	push	{r3, r4, r5, lr}
 8107936:	4b2a      	ldr	r3, [pc, #168]	; (81079e0 <__swsetup_r+0xac>)
 8107938:	4605      	mov	r5, r0
 810793a:	6818      	ldr	r0, [r3, #0]
 810793c:	460c      	mov	r4, r1
 810793e:	b118      	cbz	r0, 8107948 <__swsetup_r+0x14>
 8107940:	6a03      	ldr	r3, [r0, #32]
 8107942:	b90b      	cbnz	r3, 8107948 <__swsetup_r+0x14>
 8107944:	f7ff feb2 	bl	81076ac <__sinit>
 8107948:	89a3      	ldrh	r3, [r4, #12]
 810794a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810794e:	0718      	lsls	r0, r3, #28
 8107950:	d422      	bmi.n	8107998 <__swsetup_r+0x64>
 8107952:	06d9      	lsls	r1, r3, #27
 8107954:	d407      	bmi.n	8107966 <__swsetup_r+0x32>
 8107956:	2309      	movs	r3, #9
 8107958:	602b      	str	r3, [r5, #0]
 810795a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 810795e:	81a3      	strh	r3, [r4, #12]
 8107960:	f04f 30ff 	mov.w	r0, #4294967295
 8107964:	e034      	b.n	81079d0 <__swsetup_r+0x9c>
 8107966:	0758      	lsls	r0, r3, #29
 8107968:	d512      	bpl.n	8107990 <__swsetup_r+0x5c>
 810796a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810796c:	b141      	cbz	r1, 8107980 <__swsetup_r+0x4c>
 810796e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8107972:	4299      	cmp	r1, r3
 8107974:	d002      	beq.n	810797c <__swsetup_r+0x48>
 8107976:	4628      	mov	r0, r5
 8107978:	f000 ff44 	bl	8108804 <_free_r>
 810797c:	2300      	movs	r3, #0
 810797e:	6363      	str	r3, [r4, #52]	; 0x34
 8107980:	89a3      	ldrh	r3, [r4, #12]
 8107982:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8107986:	81a3      	strh	r3, [r4, #12]
 8107988:	2300      	movs	r3, #0
 810798a:	6063      	str	r3, [r4, #4]
 810798c:	6923      	ldr	r3, [r4, #16]
 810798e:	6023      	str	r3, [r4, #0]
 8107990:	89a3      	ldrh	r3, [r4, #12]
 8107992:	f043 0308 	orr.w	r3, r3, #8
 8107996:	81a3      	strh	r3, [r4, #12]
 8107998:	6923      	ldr	r3, [r4, #16]
 810799a:	b94b      	cbnz	r3, 81079b0 <__swsetup_r+0x7c>
 810799c:	89a3      	ldrh	r3, [r4, #12]
 810799e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 81079a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81079a6:	d003      	beq.n	81079b0 <__swsetup_r+0x7c>
 81079a8:	4621      	mov	r1, r4
 81079aa:	4628      	mov	r0, r5
 81079ac:	f002 fede 	bl	810a76c <__smakebuf_r>
 81079b0:	89a0      	ldrh	r0, [r4, #12]
 81079b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 81079b6:	f010 0301 	ands.w	r3, r0, #1
 81079ba:	d00a      	beq.n	81079d2 <__swsetup_r+0x9e>
 81079bc:	2300      	movs	r3, #0
 81079be:	60a3      	str	r3, [r4, #8]
 81079c0:	6963      	ldr	r3, [r4, #20]
 81079c2:	425b      	negs	r3, r3
 81079c4:	61a3      	str	r3, [r4, #24]
 81079c6:	6923      	ldr	r3, [r4, #16]
 81079c8:	b943      	cbnz	r3, 81079dc <__swsetup_r+0xa8>
 81079ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 81079ce:	d1c4      	bne.n	810795a <__swsetup_r+0x26>
 81079d0:	bd38      	pop	{r3, r4, r5, pc}
 81079d2:	0781      	lsls	r1, r0, #30
 81079d4:	bf58      	it	pl
 81079d6:	6963      	ldrpl	r3, [r4, #20]
 81079d8:	60a3      	str	r3, [r4, #8]
 81079da:	e7f4      	b.n	81079c6 <__swsetup_r+0x92>
 81079dc:	2000      	movs	r0, #0
 81079de:	e7f7      	b.n	81079d0 <__swsetup_r+0x9c>
 81079e0:	10000078 	.word	0x10000078

081079e4 <memset>:
 81079e4:	4402      	add	r2, r0
 81079e6:	4603      	mov	r3, r0
 81079e8:	4293      	cmp	r3, r2
 81079ea:	d100      	bne.n	81079ee <memset+0xa>
 81079ec:	4770      	bx	lr
 81079ee:	f803 1b01 	strb.w	r1, [r3], #1
 81079f2:	e7f9      	b.n	81079e8 <memset+0x4>

081079f4 <_localeconv_r>:
 81079f4:	4800      	ldr	r0, [pc, #0]	; (81079f8 <_localeconv_r+0x4>)
 81079f6:	4770      	bx	lr
 81079f8:	1000016c 	.word	0x1000016c

081079fc <_close_r>:
 81079fc:	b538      	push	{r3, r4, r5, lr}
 81079fe:	4d06      	ldr	r5, [pc, #24]	; (8107a18 <_close_r+0x1c>)
 8107a00:	2300      	movs	r3, #0
 8107a02:	4604      	mov	r4, r0
 8107a04:	4608      	mov	r0, r1
 8107a06:	602b      	str	r3, [r5, #0]
 8107a08:	f7fa fa6e 	bl	8101ee8 <_close>
 8107a0c:	1c43      	adds	r3, r0, #1
 8107a0e:	d102      	bne.n	8107a16 <_close_r+0x1a>
 8107a10:	682b      	ldr	r3, [r5, #0]
 8107a12:	b103      	cbz	r3, 8107a16 <_close_r+0x1a>
 8107a14:	6023      	str	r3, [r4, #0]
 8107a16:	bd38      	pop	{r3, r4, r5, pc}
 8107a18:	10000434 	.word	0x10000434

08107a1c <_lseek_r>:
 8107a1c:	b538      	push	{r3, r4, r5, lr}
 8107a1e:	4d07      	ldr	r5, [pc, #28]	; (8107a3c <_lseek_r+0x20>)
 8107a20:	4604      	mov	r4, r0
 8107a22:	4608      	mov	r0, r1
 8107a24:	4611      	mov	r1, r2
 8107a26:	2200      	movs	r2, #0
 8107a28:	602a      	str	r2, [r5, #0]
 8107a2a:	461a      	mov	r2, r3
 8107a2c:	f7fa fa83 	bl	8101f36 <_lseek>
 8107a30:	1c43      	adds	r3, r0, #1
 8107a32:	d102      	bne.n	8107a3a <_lseek_r+0x1e>
 8107a34:	682b      	ldr	r3, [r5, #0]
 8107a36:	b103      	cbz	r3, 8107a3a <_lseek_r+0x1e>
 8107a38:	6023      	str	r3, [r4, #0]
 8107a3a:	bd38      	pop	{r3, r4, r5, pc}
 8107a3c:	10000434 	.word	0x10000434

08107a40 <_read_r>:
 8107a40:	b538      	push	{r3, r4, r5, lr}
 8107a42:	4d07      	ldr	r5, [pc, #28]	; (8107a60 <_read_r+0x20>)
 8107a44:	4604      	mov	r4, r0
 8107a46:	4608      	mov	r0, r1
 8107a48:	4611      	mov	r1, r2
 8107a4a:	2200      	movs	r2, #0
 8107a4c:	602a      	str	r2, [r5, #0]
 8107a4e:	461a      	mov	r2, r3
 8107a50:	f7fa fa0f 	bl	8101e72 <_read>
 8107a54:	1c43      	adds	r3, r0, #1
 8107a56:	d102      	bne.n	8107a5e <_read_r+0x1e>
 8107a58:	682b      	ldr	r3, [r5, #0]
 8107a5a:	b103      	cbz	r3, 8107a5e <_read_r+0x1e>
 8107a5c:	6023      	str	r3, [r4, #0]
 8107a5e:	bd38      	pop	{r3, r4, r5, pc}
 8107a60:	10000434 	.word	0x10000434

08107a64 <_write_r>:
 8107a64:	b538      	push	{r3, r4, r5, lr}
 8107a66:	4d07      	ldr	r5, [pc, #28]	; (8107a84 <_write_r+0x20>)
 8107a68:	4604      	mov	r4, r0
 8107a6a:	4608      	mov	r0, r1
 8107a6c:	4611      	mov	r1, r2
 8107a6e:	2200      	movs	r2, #0
 8107a70:	602a      	str	r2, [r5, #0]
 8107a72:	461a      	mov	r2, r3
 8107a74:	f7fa fa1c 	bl	8101eb0 <_write>
 8107a78:	1c43      	adds	r3, r0, #1
 8107a7a:	d102      	bne.n	8107a82 <_write_r+0x1e>
 8107a7c:	682b      	ldr	r3, [r5, #0]
 8107a7e:	b103      	cbz	r3, 8107a82 <_write_r+0x1e>
 8107a80:	6023      	str	r3, [r4, #0]
 8107a82:	bd38      	pop	{r3, r4, r5, pc}
 8107a84:	10000434 	.word	0x10000434

08107a88 <__errno>:
 8107a88:	4b01      	ldr	r3, [pc, #4]	; (8107a90 <__errno+0x8>)
 8107a8a:	6818      	ldr	r0, [r3, #0]
 8107a8c:	4770      	bx	lr
 8107a8e:	bf00      	nop
 8107a90:	10000078 	.word	0x10000078

08107a94 <__libc_init_array>:
 8107a94:	b570      	push	{r4, r5, r6, lr}
 8107a96:	4d0d      	ldr	r5, [pc, #52]	; (8107acc <__libc_init_array+0x38>)
 8107a98:	4c0d      	ldr	r4, [pc, #52]	; (8107ad0 <__libc_init_array+0x3c>)
 8107a9a:	1b64      	subs	r4, r4, r5
 8107a9c:	10a4      	asrs	r4, r4, #2
 8107a9e:	2600      	movs	r6, #0
 8107aa0:	42a6      	cmp	r6, r4
 8107aa2:	d109      	bne.n	8107ab8 <__libc_init_array+0x24>
 8107aa4:	4d0b      	ldr	r5, [pc, #44]	; (8107ad4 <__libc_init_array+0x40>)
 8107aa6:	4c0c      	ldr	r4, [pc, #48]	; (8107ad8 <__libc_init_array+0x44>)
 8107aa8:	f003 fb42 	bl	810b130 <_init>
 8107aac:	1b64      	subs	r4, r4, r5
 8107aae:	10a4      	asrs	r4, r4, #2
 8107ab0:	2600      	movs	r6, #0
 8107ab2:	42a6      	cmp	r6, r4
 8107ab4:	d105      	bne.n	8107ac2 <__libc_init_array+0x2e>
 8107ab6:	bd70      	pop	{r4, r5, r6, pc}
 8107ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8107abc:	4798      	blx	r3
 8107abe:	3601      	adds	r6, #1
 8107ac0:	e7ee      	b.n	8107aa0 <__libc_init_array+0xc>
 8107ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8107ac6:	4798      	blx	r3
 8107ac8:	3601      	adds	r6, #1
 8107aca:	e7f2      	b.n	8107ab2 <__libc_init_array+0x1e>
 8107acc:	0810bb88 	.word	0x0810bb88
 8107ad0:	0810bb88 	.word	0x0810bb88
 8107ad4:	0810bb88 	.word	0x0810bb88
 8107ad8:	0810bb8c 	.word	0x0810bb8c

08107adc <__retarget_lock_init_recursive>:
 8107adc:	4770      	bx	lr

08107ade <__retarget_lock_acquire_recursive>:
 8107ade:	4770      	bx	lr

08107ae0 <__retarget_lock_release_recursive>:
 8107ae0:	4770      	bx	lr

08107ae2 <memcpy>:
 8107ae2:	440a      	add	r2, r1
 8107ae4:	4291      	cmp	r1, r2
 8107ae6:	f100 33ff 	add.w	r3, r0, #4294967295
 8107aea:	d100      	bne.n	8107aee <memcpy+0xc>
 8107aec:	4770      	bx	lr
 8107aee:	b510      	push	{r4, lr}
 8107af0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8107af4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8107af8:	4291      	cmp	r1, r2
 8107afa:	d1f9      	bne.n	8107af0 <memcpy+0xe>
 8107afc:	bd10      	pop	{r4, pc}
	...

08107b00 <nanf>:
 8107b00:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8107b08 <nanf+0x8>
 8107b04:	4770      	bx	lr
 8107b06:	bf00      	nop
 8107b08:	7fc00000 	.word	0x7fc00000

08107b0c <quorem>:
 8107b0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107b10:	6903      	ldr	r3, [r0, #16]
 8107b12:	690c      	ldr	r4, [r1, #16]
 8107b14:	42a3      	cmp	r3, r4
 8107b16:	4607      	mov	r7, r0
 8107b18:	db7e      	blt.n	8107c18 <quorem+0x10c>
 8107b1a:	3c01      	subs	r4, #1
 8107b1c:	f101 0814 	add.w	r8, r1, #20
 8107b20:	f100 0514 	add.w	r5, r0, #20
 8107b24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8107b28:	9301      	str	r3, [sp, #4]
 8107b2a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8107b2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8107b32:	3301      	adds	r3, #1
 8107b34:	429a      	cmp	r2, r3
 8107b36:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8107b3a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8107b3e:	fbb2 f6f3 	udiv	r6, r2, r3
 8107b42:	d331      	bcc.n	8107ba8 <quorem+0x9c>
 8107b44:	f04f 0e00 	mov.w	lr, #0
 8107b48:	4640      	mov	r0, r8
 8107b4a:	46ac      	mov	ip, r5
 8107b4c:	46f2      	mov	sl, lr
 8107b4e:	f850 2b04 	ldr.w	r2, [r0], #4
 8107b52:	b293      	uxth	r3, r2
 8107b54:	fb06 e303 	mla	r3, r6, r3, lr
 8107b58:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8107b5c:	0c1a      	lsrs	r2, r3, #16
 8107b5e:	b29b      	uxth	r3, r3
 8107b60:	ebaa 0303 	sub.w	r3, sl, r3
 8107b64:	f8dc a000 	ldr.w	sl, [ip]
 8107b68:	fa13 f38a 	uxtah	r3, r3, sl
 8107b6c:	fb06 220e 	mla	r2, r6, lr, r2
 8107b70:	9300      	str	r3, [sp, #0]
 8107b72:	9b00      	ldr	r3, [sp, #0]
 8107b74:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8107b78:	b292      	uxth	r2, r2
 8107b7a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8107b7e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8107b82:	f8bd 3000 	ldrh.w	r3, [sp]
 8107b86:	4581      	cmp	r9, r0
 8107b88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8107b8c:	f84c 3b04 	str.w	r3, [ip], #4
 8107b90:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8107b94:	d2db      	bcs.n	8107b4e <quorem+0x42>
 8107b96:	f855 300b 	ldr.w	r3, [r5, fp]
 8107b9a:	b92b      	cbnz	r3, 8107ba8 <quorem+0x9c>
 8107b9c:	9b01      	ldr	r3, [sp, #4]
 8107b9e:	3b04      	subs	r3, #4
 8107ba0:	429d      	cmp	r5, r3
 8107ba2:	461a      	mov	r2, r3
 8107ba4:	d32c      	bcc.n	8107c00 <quorem+0xf4>
 8107ba6:	613c      	str	r4, [r7, #16]
 8107ba8:	4638      	mov	r0, r7
 8107baa:	f001 f9f1 	bl	8108f90 <__mcmp>
 8107bae:	2800      	cmp	r0, #0
 8107bb0:	db22      	blt.n	8107bf8 <quorem+0xec>
 8107bb2:	3601      	adds	r6, #1
 8107bb4:	4629      	mov	r1, r5
 8107bb6:	2000      	movs	r0, #0
 8107bb8:	f858 2b04 	ldr.w	r2, [r8], #4
 8107bbc:	f8d1 c000 	ldr.w	ip, [r1]
 8107bc0:	b293      	uxth	r3, r2
 8107bc2:	1ac3      	subs	r3, r0, r3
 8107bc4:	0c12      	lsrs	r2, r2, #16
 8107bc6:	fa13 f38c 	uxtah	r3, r3, ip
 8107bca:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8107bce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8107bd2:	b29b      	uxth	r3, r3
 8107bd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8107bd8:	45c1      	cmp	r9, r8
 8107bda:	f841 3b04 	str.w	r3, [r1], #4
 8107bde:	ea4f 4022 	mov.w	r0, r2, asr #16
 8107be2:	d2e9      	bcs.n	8107bb8 <quorem+0xac>
 8107be4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8107be8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8107bec:	b922      	cbnz	r2, 8107bf8 <quorem+0xec>
 8107bee:	3b04      	subs	r3, #4
 8107bf0:	429d      	cmp	r5, r3
 8107bf2:	461a      	mov	r2, r3
 8107bf4:	d30a      	bcc.n	8107c0c <quorem+0x100>
 8107bf6:	613c      	str	r4, [r7, #16]
 8107bf8:	4630      	mov	r0, r6
 8107bfa:	b003      	add	sp, #12
 8107bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107c00:	6812      	ldr	r2, [r2, #0]
 8107c02:	3b04      	subs	r3, #4
 8107c04:	2a00      	cmp	r2, #0
 8107c06:	d1ce      	bne.n	8107ba6 <quorem+0x9a>
 8107c08:	3c01      	subs	r4, #1
 8107c0a:	e7c9      	b.n	8107ba0 <quorem+0x94>
 8107c0c:	6812      	ldr	r2, [r2, #0]
 8107c0e:	3b04      	subs	r3, #4
 8107c10:	2a00      	cmp	r2, #0
 8107c12:	d1f0      	bne.n	8107bf6 <quorem+0xea>
 8107c14:	3c01      	subs	r4, #1
 8107c16:	e7eb      	b.n	8107bf0 <quorem+0xe4>
 8107c18:	2000      	movs	r0, #0
 8107c1a:	e7ee      	b.n	8107bfa <quorem+0xee>
 8107c1c:	0000      	movs	r0, r0
	...

08107c20 <_dtoa_r>:
 8107c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107c24:	ed2d 8b04 	vpush	{d8-d9}
 8107c28:	69c5      	ldr	r5, [r0, #28]
 8107c2a:	b093      	sub	sp, #76	; 0x4c
 8107c2c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8107c30:	ec57 6b10 	vmov	r6, r7, d0
 8107c34:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8107c38:	9107      	str	r1, [sp, #28]
 8107c3a:	4604      	mov	r4, r0
 8107c3c:	920a      	str	r2, [sp, #40]	; 0x28
 8107c3e:	930d      	str	r3, [sp, #52]	; 0x34
 8107c40:	b975      	cbnz	r5, 8107c60 <_dtoa_r+0x40>
 8107c42:	2010      	movs	r0, #16
 8107c44:	f000 fe2a 	bl	810889c <malloc>
 8107c48:	4602      	mov	r2, r0
 8107c4a:	61e0      	str	r0, [r4, #28]
 8107c4c:	b920      	cbnz	r0, 8107c58 <_dtoa_r+0x38>
 8107c4e:	4bae      	ldr	r3, [pc, #696]	; (8107f08 <_dtoa_r+0x2e8>)
 8107c50:	21ef      	movs	r1, #239	; 0xef
 8107c52:	48ae      	ldr	r0, [pc, #696]	; (8107f0c <_dtoa_r+0x2ec>)
 8107c54:	f002 fe2c 	bl	810a8b0 <__assert_func>
 8107c58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8107c5c:	6005      	str	r5, [r0, #0]
 8107c5e:	60c5      	str	r5, [r0, #12]
 8107c60:	69e3      	ldr	r3, [r4, #28]
 8107c62:	6819      	ldr	r1, [r3, #0]
 8107c64:	b151      	cbz	r1, 8107c7c <_dtoa_r+0x5c>
 8107c66:	685a      	ldr	r2, [r3, #4]
 8107c68:	604a      	str	r2, [r1, #4]
 8107c6a:	2301      	movs	r3, #1
 8107c6c:	4093      	lsls	r3, r2
 8107c6e:	608b      	str	r3, [r1, #8]
 8107c70:	4620      	mov	r0, r4
 8107c72:	f000 ff07 	bl	8108a84 <_Bfree>
 8107c76:	69e3      	ldr	r3, [r4, #28]
 8107c78:	2200      	movs	r2, #0
 8107c7a:	601a      	str	r2, [r3, #0]
 8107c7c:	1e3b      	subs	r3, r7, #0
 8107c7e:	bfbb      	ittet	lt
 8107c80:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8107c84:	9303      	strlt	r3, [sp, #12]
 8107c86:	2300      	movge	r3, #0
 8107c88:	2201      	movlt	r2, #1
 8107c8a:	bfac      	ite	ge
 8107c8c:	f8c8 3000 	strge.w	r3, [r8]
 8107c90:	f8c8 2000 	strlt.w	r2, [r8]
 8107c94:	4b9e      	ldr	r3, [pc, #632]	; (8107f10 <_dtoa_r+0x2f0>)
 8107c96:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8107c9a:	ea33 0308 	bics.w	r3, r3, r8
 8107c9e:	d11b      	bne.n	8107cd8 <_dtoa_r+0xb8>
 8107ca0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8107ca2:	f242 730f 	movw	r3, #9999	; 0x270f
 8107ca6:	6013      	str	r3, [r2, #0]
 8107ca8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8107cac:	4333      	orrs	r3, r6
 8107cae:	f000 8593 	beq.w	81087d8 <_dtoa_r+0xbb8>
 8107cb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8107cb4:	b963      	cbnz	r3, 8107cd0 <_dtoa_r+0xb0>
 8107cb6:	4b97      	ldr	r3, [pc, #604]	; (8107f14 <_dtoa_r+0x2f4>)
 8107cb8:	e027      	b.n	8107d0a <_dtoa_r+0xea>
 8107cba:	4b97      	ldr	r3, [pc, #604]	; (8107f18 <_dtoa_r+0x2f8>)
 8107cbc:	9300      	str	r3, [sp, #0]
 8107cbe:	3308      	adds	r3, #8
 8107cc0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8107cc2:	6013      	str	r3, [r2, #0]
 8107cc4:	9800      	ldr	r0, [sp, #0]
 8107cc6:	b013      	add	sp, #76	; 0x4c
 8107cc8:	ecbd 8b04 	vpop	{d8-d9}
 8107ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107cd0:	4b90      	ldr	r3, [pc, #576]	; (8107f14 <_dtoa_r+0x2f4>)
 8107cd2:	9300      	str	r3, [sp, #0]
 8107cd4:	3303      	adds	r3, #3
 8107cd6:	e7f3      	b.n	8107cc0 <_dtoa_r+0xa0>
 8107cd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8107cdc:	2200      	movs	r2, #0
 8107cde:	ec51 0b17 	vmov	r0, r1, d7
 8107ce2:	eeb0 8a47 	vmov.f32	s16, s14
 8107ce6:	eef0 8a67 	vmov.f32	s17, s15
 8107cea:	2300      	movs	r3, #0
 8107cec:	f7f8 ff74 	bl	8100bd8 <__aeabi_dcmpeq>
 8107cf0:	4681      	mov	r9, r0
 8107cf2:	b160      	cbz	r0, 8107d0e <_dtoa_r+0xee>
 8107cf4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8107cf6:	2301      	movs	r3, #1
 8107cf8:	6013      	str	r3, [r2, #0]
 8107cfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8107cfc:	2b00      	cmp	r3, #0
 8107cfe:	f000 8568 	beq.w	81087d2 <_dtoa_r+0xbb2>
 8107d02:	4b86      	ldr	r3, [pc, #536]	; (8107f1c <_dtoa_r+0x2fc>)
 8107d04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8107d06:	6013      	str	r3, [r2, #0]
 8107d08:	3b01      	subs	r3, #1
 8107d0a:	9300      	str	r3, [sp, #0]
 8107d0c:	e7da      	b.n	8107cc4 <_dtoa_r+0xa4>
 8107d0e:	aa10      	add	r2, sp, #64	; 0x40
 8107d10:	a911      	add	r1, sp, #68	; 0x44
 8107d12:	4620      	mov	r0, r4
 8107d14:	eeb0 0a48 	vmov.f32	s0, s16
 8107d18:	eef0 0a68 	vmov.f32	s1, s17
 8107d1c:	f001 fa4e 	bl	81091bc <__d2b>
 8107d20:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8107d24:	4682      	mov	sl, r0
 8107d26:	2d00      	cmp	r5, #0
 8107d28:	d07f      	beq.n	8107e2a <_dtoa_r+0x20a>
 8107d2a:	ee18 3a90 	vmov	r3, s17
 8107d2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8107d32:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8107d36:	ec51 0b18 	vmov	r0, r1, d8
 8107d3a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8107d3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8107d42:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8107d46:	4619      	mov	r1, r3
 8107d48:	2200      	movs	r2, #0
 8107d4a:	4b75      	ldr	r3, [pc, #468]	; (8107f20 <_dtoa_r+0x300>)
 8107d4c:	f7f8 fb24 	bl	8100398 <__aeabi_dsub>
 8107d50:	a367      	add	r3, pc, #412	; (adr r3, 8107ef0 <_dtoa_r+0x2d0>)
 8107d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107d56:	f7f8 fcd7 	bl	8100708 <__aeabi_dmul>
 8107d5a:	a367      	add	r3, pc, #412	; (adr r3, 8107ef8 <_dtoa_r+0x2d8>)
 8107d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107d60:	f7f8 fb1c 	bl	810039c <__adddf3>
 8107d64:	4606      	mov	r6, r0
 8107d66:	4628      	mov	r0, r5
 8107d68:	460f      	mov	r7, r1
 8107d6a:	f7f8 fc63 	bl	8100634 <__aeabi_i2d>
 8107d6e:	a364      	add	r3, pc, #400	; (adr r3, 8107f00 <_dtoa_r+0x2e0>)
 8107d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107d74:	f7f8 fcc8 	bl	8100708 <__aeabi_dmul>
 8107d78:	4602      	mov	r2, r0
 8107d7a:	460b      	mov	r3, r1
 8107d7c:	4630      	mov	r0, r6
 8107d7e:	4639      	mov	r1, r7
 8107d80:	f7f8 fb0c 	bl	810039c <__adddf3>
 8107d84:	4606      	mov	r6, r0
 8107d86:	460f      	mov	r7, r1
 8107d88:	f7f8 ff6e 	bl	8100c68 <__aeabi_d2iz>
 8107d8c:	2200      	movs	r2, #0
 8107d8e:	4683      	mov	fp, r0
 8107d90:	2300      	movs	r3, #0
 8107d92:	4630      	mov	r0, r6
 8107d94:	4639      	mov	r1, r7
 8107d96:	f7f8 ff29 	bl	8100bec <__aeabi_dcmplt>
 8107d9a:	b148      	cbz	r0, 8107db0 <_dtoa_r+0x190>
 8107d9c:	4658      	mov	r0, fp
 8107d9e:	f7f8 fc49 	bl	8100634 <__aeabi_i2d>
 8107da2:	4632      	mov	r2, r6
 8107da4:	463b      	mov	r3, r7
 8107da6:	f7f8 ff17 	bl	8100bd8 <__aeabi_dcmpeq>
 8107daa:	b908      	cbnz	r0, 8107db0 <_dtoa_r+0x190>
 8107dac:	f10b 3bff 	add.w	fp, fp, #4294967295
 8107db0:	f1bb 0f16 	cmp.w	fp, #22
 8107db4:	d857      	bhi.n	8107e66 <_dtoa_r+0x246>
 8107db6:	4b5b      	ldr	r3, [pc, #364]	; (8107f24 <_dtoa_r+0x304>)
 8107db8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8107dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107dc0:	ec51 0b18 	vmov	r0, r1, d8
 8107dc4:	f7f8 ff12 	bl	8100bec <__aeabi_dcmplt>
 8107dc8:	2800      	cmp	r0, #0
 8107dca:	d04e      	beq.n	8107e6a <_dtoa_r+0x24a>
 8107dcc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8107dd0:	2300      	movs	r3, #0
 8107dd2:	930c      	str	r3, [sp, #48]	; 0x30
 8107dd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8107dd6:	1b5b      	subs	r3, r3, r5
 8107dd8:	1e5a      	subs	r2, r3, #1
 8107dda:	bf45      	ittet	mi
 8107ddc:	f1c3 0301 	rsbmi	r3, r3, #1
 8107de0:	9305      	strmi	r3, [sp, #20]
 8107de2:	2300      	movpl	r3, #0
 8107de4:	2300      	movmi	r3, #0
 8107de6:	9206      	str	r2, [sp, #24]
 8107de8:	bf54      	ite	pl
 8107dea:	9305      	strpl	r3, [sp, #20]
 8107dec:	9306      	strmi	r3, [sp, #24]
 8107dee:	f1bb 0f00 	cmp.w	fp, #0
 8107df2:	db3c      	blt.n	8107e6e <_dtoa_r+0x24e>
 8107df4:	9b06      	ldr	r3, [sp, #24]
 8107df6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8107dfa:	445b      	add	r3, fp
 8107dfc:	9306      	str	r3, [sp, #24]
 8107dfe:	2300      	movs	r3, #0
 8107e00:	9308      	str	r3, [sp, #32]
 8107e02:	9b07      	ldr	r3, [sp, #28]
 8107e04:	2b09      	cmp	r3, #9
 8107e06:	d868      	bhi.n	8107eda <_dtoa_r+0x2ba>
 8107e08:	2b05      	cmp	r3, #5
 8107e0a:	bfc4      	itt	gt
 8107e0c:	3b04      	subgt	r3, #4
 8107e0e:	9307      	strgt	r3, [sp, #28]
 8107e10:	9b07      	ldr	r3, [sp, #28]
 8107e12:	f1a3 0302 	sub.w	r3, r3, #2
 8107e16:	bfcc      	ite	gt
 8107e18:	2500      	movgt	r5, #0
 8107e1a:	2501      	movle	r5, #1
 8107e1c:	2b03      	cmp	r3, #3
 8107e1e:	f200 8085 	bhi.w	8107f2c <_dtoa_r+0x30c>
 8107e22:	e8df f003 	tbb	[pc, r3]
 8107e26:	3b2e      	.short	0x3b2e
 8107e28:	5839      	.short	0x5839
 8107e2a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8107e2e:	441d      	add	r5, r3
 8107e30:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8107e34:	2b20      	cmp	r3, #32
 8107e36:	bfc1      	itttt	gt
 8107e38:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8107e3c:	fa08 f803 	lslgt.w	r8, r8, r3
 8107e40:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8107e44:	fa26 f303 	lsrgt.w	r3, r6, r3
 8107e48:	bfd6      	itet	le
 8107e4a:	f1c3 0320 	rsble	r3, r3, #32
 8107e4e:	ea48 0003 	orrgt.w	r0, r8, r3
 8107e52:	fa06 f003 	lslle.w	r0, r6, r3
 8107e56:	f7f8 fbdd 	bl	8100614 <__aeabi_ui2d>
 8107e5a:	2201      	movs	r2, #1
 8107e5c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8107e60:	3d01      	subs	r5, #1
 8107e62:	920e      	str	r2, [sp, #56]	; 0x38
 8107e64:	e76f      	b.n	8107d46 <_dtoa_r+0x126>
 8107e66:	2301      	movs	r3, #1
 8107e68:	e7b3      	b.n	8107dd2 <_dtoa_r+0x1b2>
 8107e6a:	900c      	str	r0, [sp, #48]	; 0x30
 8107e6c:	e7b2      	b.n	8107dd4 <_dtoa_r+0x1b4>
 8107e6e:	9b05      	ldr	r3, [sp, #20]
 8107e70:	eba3 030b 	sub.w	r3, r3, fp
 8107e74:	9305      	str	r3, [sp, #20]
 8107e76:	f1cb 0300 	rsb	r3, fp, #0
 8107e7a:	9308      	str	r3, [sp, #32]
 8107e7c:	2300      	movs	r3, #0
 8107e7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8107e80:	e7bf      	b.n	8107e02 <_dtoa_r+0x1e2>
 8107e82:	2300      	movs	r3, #0
 8107e84:	9309      	str	r3, [sp, #36]	; 0x24
 8107e86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107e88:	2b00      	cmp	r3, #0
 8107e8a:	dc52      	bgt.n	8107f32 <_dtoa_r+0x312>
 8107e8c:	2301      	movs	r3, #1
 8107e8e:	9301      	str	r3, [sp, #4]
 8107e90:	9304      	str	r3, [sp, #16]
 8107e92:	461a      	mov	r2, r3
 8107e94:	920a      	str	r2, [sp, #40]	; 0x28
 8107e96:	e00b      	b.n	8107eb0 <_dtoa_r+0x290>
 8107e98:	2301      	movs	r3, #1
 8107e9a:	e7f3      	b.n	8107e84 <_dtoa_r+0x264>
 8107e9c:	2300      	movs	r3, #0
 8107e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8107ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107ea2:	445b      	add	r3, fp
 8107ea4:	9301      	str	r3, [sp, #4]
 8107ea6:	3301      	adds	r3, #1
 8107ea8:	2b01      	cmp	r3, #1
 8107eaa:	9304      	str	r3, [sp, #16]
 8107eac:	bfb8      	it	lt
 8107eae:	2301      	movlt	r3, #1
 8107eb0:	69e0      	ldr	r0, [r4, #28]
 8107eb2:	2100      	movs	r1, #0
 8107eb4:	2204      	movs	r2, #4
 8107eb6:	f102 0614 	add.w	r6, r2, #20
 8107eba:	429e      	cmp	r6, r3
 8107ebc:	d93d      	bls.n	8107f3a <_dtoa_r+0x31a>
 8107ebe:	6041      	str	r1, [r0, #4]
 8107ec0:	4620      	mov	r0, r4
 8107ec2:	f000 fd9f 	bl	8108a04 <_Balloc>
 8107ec6:	9000      	str	r0, [sp, #0]
 8107ec8:	2800      	cmp	r0, #0
 8107eca:	d139      	bne.n	8107f40 <_dtoa_r+0x320>
 8107ecc:	4b16      	ldr	r3, [pc, #88]	; (8107f28 <_dtoa_r+0x308>)
 8107ece:	4602      	mov	r2, r0
 8107ed0:	f240 11af 	movw	r1, #431	; 0x1af
 8107ed4:	e6bd      	b.n	8107c52 <_dtoa_r+0x32>
 8107ed6:	2301      	movs	r3, #1
 8107ed8:	e7e1      	b.n	8107e9e <_dtoa_r+0x27e>
 8107eda:	2501      	movs	r5, #1
 8107edc:	2300      	movs	r3, #0
 8107ede:	9307      	str	r3, [sp, #28]
 8107ee0:	9509      	str	r5, [sp, #36]	; 0x24
 8107ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8107ee6:	9301      	str	r3, [sp, #4]
 8107ee8:	9304      	str	r3, [sp, #16]
 8107eea:	2200      	movs	r2, #0
 8107eec:	2312      	movs	r3, #18
 8107eee:	e7d1      	b.n	8107e94 <_dtoa_r+0x274>
 8107ef0:	636f4361 	.word	0x636f4361
 8107ef4:	3fd287a7 	.word	0x3fd287a7
 8107ef8:	8b60c8b3 	.word	0x8b60c8b3
 8107efc:	3fc68a28 	.word	0x3fc68a28
 8107f00:	509f79fb 	.word	0x509f79fb
 8107f04:	3fd34413 	.word	0x3fd34413
 8107f08:	0810b79a 	.word	0x0810b79a
 8107f0c:	0810b7b1 	.word	0x0810b7b1
 8107f10:	7ff00000 	.word	0x7ff00000
 8107f14:	0810b796 	.word	0x0810b796
 8107f18:	0810b78d 	.word	0x0810b78d
 8107f1c:	0810b765 	.word	0x0810b765
 8107f20:	3ff80000 	.word	0x3ff80000
 8107f24:	0810b8a0 	.word	0x0810b8a0
 8107f28:	0810b809 	.word	0x0810b809
 8107f2c:	2301      	movs	r3, #1
 8107f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8107f30:	e7d7      	b.n	8107ee2 <_dtoa_r+0x2c2>
 8107f32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107f34:	9301      	str	r3, [sp, #4]
 8107f36:	9304      	str	r3, [sp, #16]
 8107f38:	e7ba      	b.n	8107eb0 <_dtoa_r+0x290>
 8107f3a:	3101      	adds	r1, #1
 8107f3c:	0052      	lsls	r2, r2, #1
 8107f3e:	e7ba      	b.n	8107eb6 <_dtoa_r+0x296>
 8107f40:	69e3      	ldr	r3, [r4, #28]
 8107f42:	9a00      	ldr	r2, [sp, #0]
 8107f44:	601a      	str	r2, [r3, #0]
 8107f46:	9b04      	ldr	r3, [sp, #16]
 8107f48:	2b0e      	cmp	r3, #14
 8107f4a:	f200 80a8 	bhi.w	810809e <_dtoa_r+0x47e>
 8107f4e:	2d00      	cmp	r5, #0
 8107f50:	f000 80a5 	beq.w	810809e <_dtoa_r+0x47e>
 8107f54:	f1bb 0f00 	cmp.w	fp, #0
 8107f58:	dd38      	ble.n	8107fcc <_dtoa_r+0x3ac>
 8107f5a:	4bc0      	ldr	r3, [pc, #768]	; (810825c <_dtoa_r+0x63c>)
 8107f5c:	f00b 020f 	and.w	r2, fp, #15
 8107f60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8107f64:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8107f68:	e9d3 6700 	ldrd	r6, r7, [r3]
 8107f6c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8107f70:	d019      	beq.n	8107fa6 <_dtoa_r+0x386>
 8107f72:	4bbb      	ldr	r3, [pc, #748]	; (8108260 <_dtoa_r+0x640>)
 8107f74:	ec51 0b18 	vmov	r0, r1, d8
 8107f78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8107f7c:	f7f8 fcee 	bl	810095c <__aeabi_ddiv>
 8107f80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8107f84:	f008 080f 	and.w	r8, r8, #15
 8107f88:	2503      	movs	r5, #3
 8107f8a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8108260 <_dtoa_r+0x640>
 8107f8e:	f1b8 0f00 	cmp.w	r8, #0
 8107f92:	d10a      	bne.n	8107faa <_dtoa_r+0x38a>
 8107f94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8107f98:	4632      	mov	r2, r6
 8107f9a:	463b      	mov	r3, r7
 8107f9c:	f7f8 fcde 	bl	810095c <__aeabi_ddiv>
 8107fa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8107fa4:	e02b      	b.n	8107ffe <_dtoa_r+0x3de>
 8107fa6:	2502      	movs	r5, #2
 8107fa8:	e7ef      	b.n	8107f8a <_dtoa_r+0x36a>
 8107faa:	f018 0f01 	tst.w	r8, #1
 8107fae:	d008      	beq.n	8107fc2 <_dtoa_r+0x3a2>
 8107fb0:	4630      	mov	r0, r6
 8107fb2:	4639      	mov	r1, r7
 8107fb4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8107fb8:	f7f8 fba6 	bl	8100708 <__aeabi_dmul>
 8107fbc:	3501      	adds	r5, #1
 8107fbe:	4606      	mov	r6, r0
 8107fc0:	460f      	mov	r7, r1
 8107fc2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8107fc6:	f109 0908 	add.w	r9, r9, #8
 8107fca:	e7e0      	b.n	8107f8e <_dtoa_r+0x36e>
 8107fcc:	f000 809f 	beq.w	810810e <_dtoa_r+0x4ee>
 8107fd0:	f1cb 0600 	rsb	r6, fp, #0
 8107fd4:	4ba1      	ldr	r3, [pc, #644]	; (810825c <_dtoa_r+0x63c>)
 8107fd6:	4fa2      	ldr	r7, [pc, #648]	; (8108260 <_dtoa_r+0x640>)
 8107fd8:	f006 020f 	and.w	r2, r6, #15
 8107fdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8107fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107fe4:	ec51 0b18 	vmov	r0, r1, d8
 8107fe8:	f7f8 fb8e 	bl	8100708 <__aeabi_dmul>
 8107fec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8107ff0:	1136      	asrs	r6, r6, #4
 8107ff2:	2300      	movs	r3, #0
 8107ff4:	2502      	movs	r5, #2
 8107ff6:	2e00      	cmp	r6, #0
 8107ff8:	d17e      	bne.n	81080f8 <_dtoa_r+0x4d8>
 8107ffa:	2b00      	cmp	r3, #0
 8107ffc:	d1d0      	bne.n	8107fa0 <_dtoa_r+0x380>
 8107ffe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8108000:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8108004:	2b00      	cmp	r3, #0
 8108006:	f000 8084 	beq.w	8108112 <_dtoa_r+0x4f2>
 810800a:	4b96      	ldr	r3, [pc, #600]	; (8108264 <_dtoa_r+0x644>)
 810800c:	2200      	movs	r2, #0
 810800e:	4640      	mov	r0, r8
 8108010:	4649      	mov	r1, r9
 8108012:	f7f8 fdeb 	bl	8100bec <__aeabi_dcmplt>
 8108016:	2800      	cmp	r0, #0
 8108018:	d07b      	beq.n	8108112 <_dtoa_r+0x4f2>
 810801a:	9b04      	ldr	r3, [sp, #16]
 810801c:	2b00      	cmp	r3, #0
 810801e:	d078      	beq.n	8108112 <_dtoa_r+0x4f2>
 8108020:	9b01      	ldr	r3, [sp, #4]
 8108022:	2b00      	cmp	r3, #0
 8108024:	dd39      	ble.n	810809a <_dtoa_r+0x47a>
 8108026:	4b90      	ldr	r3, [pc, #576]	; (8108268 <_dtoa_r+0x648>)
 8108028:	2200      	movs	r2, #0
 810802a:	4640      	mov	r0, r8
 810802c:	4649      	mov	r1, r9
 810802e:	f7f8 fb6b 	bl	8100708 <__aeabi_dmul>
 8108032:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8108036:	9e01      	ldr	r6, [sp, #4]
 8108038:	f10b 37ff 	add.w	r7, fp, #4294967295
 810803c:	3501      	adds	r5, #1
 810803e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8108042:	4628      	mov	r0, r5
 8108044:	f7f8 faf6 	bl	8100634 <__aeabi_i2d>
 8108048:	4642      	mov	r2, r8
 810804a:	464b      	mov	r3, r9
 810804c:	f7f8 fb5c 	bl	8100708 <__aeabi_dmul>
 8108050:	4b86      	ldr	r3, [pc, #536]	; (810826c <_dtoa_r+0x64c>)
 8108052:	2200      	movs	r2, #0
 8108054:	f7f8 f9a2 	bl	810039c <__adddf3>
 8108058:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 810805c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8108060:	9303      	str	r3, [sp, #12]
 8108062:	2e00      	cmp	r6, #0
 8108064:	d158      	bne.n	8108118 <_dtoa_r+0x4f8>
 8108066:	4b82      	ldr	r3, [pc, #520]	; (8108270 <_dtoa_r+0x650>)
 8108068:	2200      	movs	r2, #0
 810806a:	4640      	mov	r0, r8
 810806c:	4649      	mov	r1, r9
 810806e:	f7f8 f993 	bl	8100398 <__aeabi_dsub>
 8108072:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8108076:	4680      	mov	r8, r0
 8108078:	4689      	mov	r9, r1
 810807a:	f7f8 fdd5 	bl	8100c28 <__aeabi_dcmpgt>
 810807e:	2800      	cmp	r0, #0
 8108080:	f040 8296 	bne.w	81085b0 <_dtoa_r+0x990>
 8108084:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8108088:	4640      	mov	r0, r8
 810808a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810808e:	4649      	mov	r1, r9
 8108090:	f7f8 fdac 	bl	8100bec <__aeabi_dcmplt>
 8108094:	2800      	cmp	r0, #0
 8108096:	f040 8289 	bne.w	81085ac <_dtoa_r+0x98c>
 810809a:	ed8d 8b02 	vstr	d8, [sp, #8]
 810809e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 81080a0:	2b00      	cmp	r3, #0
 81080a2:	f2c0 814e 	blt.w	8108342 <_dtoa_r+0x722>
 81080a6:	f1bb 0f0e 	cmp.w	fp, #14
 81080aa:	f300 814a 	bgt.w	8108342 <_dtoa_r+0x722>
 81080ae:	4b6b      	ldr	r3, [pc, #428]	; (810825c <_dtoa_r+0x63c>)
 81080b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 81080b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 81080b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81080ba:	2b00      	cmp	r3, #0
 81080bc:	f280 80dc 	bge.w	8108278 <_dtoa_r+0x658>
 81080c0:	9b04      	ldr	r3, [sp, #16]
 81080c2:	2b00      	cmp	r3, #0
 81080c4:	f300 80d8 	bgt.w	8108278 <_dtoa_r+0x658>
 81080c8:	f040 826f 	bne.w	81085aa <_dtoa_r+0x98a>
 81080cc:	4b68      	ldr	r3, [pc, #416]	; (8108270 <_dtoa_r+0x650>)
 81080ce:	2200      	movs	r2, #0
 81080d0:	4640      	mov	r0, r8
 81080d2:	4649      	mov	r1, r9
 81080d4:	f7f8 fb18 	bl	8100708 <__aeabi_dmul>
 81080d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81080dc:	f7f8 fd9a 	bl	8100c14 <__aeabi_dcmpge>
 81080e0:	9e04      	ldr	r6, [sp, #16]
 81080e2:	4637      	mov	r7, r6
 81080e4:	2800      	cmp	r0, #0
 81080e6:	f040 8245 	bne.w	8108574 <_dtoa_r+0x954>
 81080ea:	9d00      	ldr	r5, [sp, #0]
 81080ec:	2331      	movs	r3, #49	; 0x31
 81080ee:	f805 3b01 	strb.w	r3, [r5], #1
 81080f2:	f10b 0b01 	add.w	fp, fp, #1
 81080f6:	e241      	b.n	810857c <_dtoa_r+0x95c>
 81080f8:	07f2      	lsls	r2, r6, #31
 81080fa:	d505      	bpl.n	8108108 <_dtoa_r+0x4e8>
 81080fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108100:	f7f8 fb02 	bl	8100708 <__aeabi_dmul>
 8108104:	3501      	adds	r5, #1
 8108106:	2301      	movs	r3, #1
 8108108:	1076      	asrs	r6, r6, #1
 810810a:	3708      	adds	r7, #8
 810810c:	e773      	b.n	8107ff6 <_dtoa_r+0x3d6>
 810810e:	2502      	movs	r5, #2
 8108110:	e775      	b.n	8107ffe <_dtoa_r+0x3de>
 8108112:	9e04      	ldr	r6, [sp, #16]
 8108114:	465f      	mov	r7, fp
 8108116:	e792      	b.n	810803e <_dtoa_r+0x41e>
 8108118:	9900      	ldr	r1, [sp, #0]
 810811a:	4b50      	ldr	r3, [pc, #320]	; (810825c <_dtoa_r+0x63c>)
 810811c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8108120:	4431      	add	r1, r6
 8108122:	9102      	str	r1, [sp, #8]
 8108124:	9909      	ldr	r1, [sp, #36]	; 0x24
 8108126:	eeb0 9a47 	vmov.f32	s18, s14
 810812a:	eef0 9a67 	vmov.f32	s19, s15
 810812e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8108132:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8108136:	2900      	cmp	r1, #0
 8108138:	d044      	beq.n	81081c4 <_dtoa_r+0x5a4>
 810813a:	494e      	ldr	r1, [pc, #312]	; (8108274 <_dtoa_r+0x654>)
 810813c:	2000      	movs	r0, #0
 810813e:	f7f8 fc0d 	bl	810095c <__aeabi_ddiv>
 8108142:	ec53 2b19 	vmov	r2, r3, d9
 8108146:	f7f8 f927 	bl	8100398 <__aeabi_dsub>
 810814a:	9d00      	ldr	r5, [sp, #0]
 810814c:	ec41 0b19 	vmov	d9, r0, r1
 8108150:	4649      	mov	r1, r9
 8108152:	4640      	mov	r0, r8
 8108154:	f7f8 fd88 	bl	8100c68 <__aeabi_d2iz>
 8108158:	4606      	mov	r6, r0
 810815a:	f7f8 fa6b 	bl	8100634 <__aeabi_i2d>
 810815e:	4602      	mov	r2, r0
 8108160:	460b      	mov	r3, r1
 8108162:	4640      	mov	r0, r8
 8108164:	4649      	mov	r1, r9
 8108166:	f7f8 f917 	bl	8100398 <__aeabi_dsub>
 810816a:	3630      	adds	r6, #48	; 0x30
 810816c:	f805 6b01 	strb.w	r6, [r5], #1
 8108170:	ec53 2b19 	vmov	r2, r3, d9
 8108174:	4680      	mov	r8, r0
 8108176:	4689      	mov	r9, r1
 8108178:	f7f8 fd38 	bl	8100bec <__aeabi_dcmplt>
 810817c:	2800      	cmp	r0, #0
 810817e:	d164      	bne.n	810824a <_dtoa_r+0x62a>
 8108180:	4642      	mov	r2, r8
 8108182:	464b      	mov	r3, r9
 8108184:	4937      	ldr	r1, [pc, #220]	; (8108264 <_dtoa_r+0x644>)
 8108186:	2000      	movs	r0, #0
 8108188:	f7f8 f906 	bl	8100398 <__aeabi_dsub>
 810818c:	ec53 2b19 	vmov	r2, r3, d9
 8108190:	f7f8 fd2c 	bl	8100bec <__aeabi_dcmplt>
 8108194:	2800      	cmp	r0, #0
 8108196:	f040 80b6 	bne.w	8108306 <_dtoa_r+0x6e6>
 810819a:	9b02      	ldr	r3, [sp, #8]
 810819c:	429d      	cmp	r5, r3
 810819e:	f43f af7c 	beq.w	810809a <_dtoa_r+0x47a>
 81081a2:	4b31      	ldr	r3, [pc, #196]	; (8108268 <_dtoa_r+0x648>)
 81081a4:	ec51 0b19 	vmov	r0, r1, d9
 81081a8:	2200      	movs	r2, #0
 81081aa:	f7f8 faad 	bl	8100708 <__aeabi_dmul>
 81081ae:	4b2e      	ldr	r3, [pc, #184]	; (8108268 <_dtoa_r+0x648>)
 81081b0:	ec41 0b19 	vmov	d9, r0, r1
 81081b4:	2200      	movs	r2, #0
 81081b6:	4640      	mov	r0, r8
 81081b8:	4649      	mov	r1, r9
 81081ba:	f7f8 faa5 	bl	8100708 <__aeabi_dmul>
 81081be:	4680      	mov	r8, r0
 81081c0:	4689      	mov	r9, r1
 81081c2:	e7c5      	b.n	8108150 <_dtoa_r+0x530>
 81081c4:	ec51 0b17 	vmov	r0, r1, d7
 81081c8:	f7f8 fa9e 	bl	8100708 <__aeabi_dmul>
 81081cc:	9b02      	ldr	r3, [sp, #8]
 81081ce:	9d00      	ldr	r5, [sp, #0]
 81081d0:	930f      	str	r3, [sp, #60]	; 0x3c
 81081d2:	ec41 0b19 	vmov	d9, r0, r1
 81081d6:	4649      	mov	r1, r9
 81081d8:	4640      	mov	r0, r8
 81081da:	f7f8 fd45 	bl	8100c68 <__aeabi_d2iz>
 81081de:	4606      	mov	r6, r0
 81081e0:	f7f8 fa28 	bl	8100634 <__aeabi_i2d>
 81081e4:	3630      	adds	r6, #48	; 0x30
 81081e6:	4602      	mov	r2, r0
 81081e8:	460b      	mov	r3, r1
 81081ea:	4640      	mov	r0, r8
 81081ec:	4649      	mov	r1, r9
 81081ee:	f7f8 f8d3 	bl	8100398 <__aeabi_dsub>
 81081f2:	f805 6b01 	strb.w	r6, [r5], #1
 81081f6:	9b02      	ldr	r3, [sp, #8]
 81081f8:	429d      	cmp	r5, r3
 81081fa:	4680      	mov	r8, r0
 81081fc:	4689      	mov	r9, r1
 81081fe:	f04f 0200 	mov.w	r2, #0
 8108202:	d124      	bne.n	810824e <_dtoa_r+0x62e>
 8108204:	4b1b      	ldr	r3, [pc, #108]	; (8108274 <_dtoa_r+0x654>)
 8108206:	ec51 0b19 	vmov	r0, r1, d9
 810820a:	f7f8 f8c7 	bl	810039c <__adddf3>
 810820e:	4602      	mov	r2, r0
 8108210:	460b      	mov	r3, r1
 8108212:	4640      	mov	r0, r8
 8108214:	4649      	mov	r1, r9
 8108216:	f7f8 fd07 	bl	8100c28 <__aeabi_dcmpgt>
 810821a:	2800      	cmp	r0, #0
 810821c:	d173      	bne.n	8108306 <_dtoa_r+0x6e6>
 810821e:	ec53 2b19 	vmov	r2, r3, d9
 8108222:	4914      	ldr	r1, [pc, #80]	; (8108274 <_dtoa_r+0x654>)
 8108224:	2000      	movs	r0, #0
 8108226:	f7f8 f8b7 	bl	8100398 <__aeabi_dsub>
 810822a:	4602      	mov	r2, r0
 810822c:	460b      	mov	r3, r1
 810822e:	4640      	mov	r0, r8
 8108230:	4649      	mov	r1, r9
 8108232:	f7f8 fcdb 	bl	8100bec <__aeabi_dcmplt>
 8108236:	2800      	cmp	r0, #0
 8108238:	f43f af2f 	beq.w	810809a <_dtoa_r+0x47a>
 810823c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 810823e:	1e6b      	subs	r3, r5, #1
 8108240:	930f      	str	r3, [sp, #60]	; 0x3c
 8108242:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8108246:	2b30      	cmp	r3, #48	; 0x30
 8108248:	d0f8      	beq.n	810823c <_dtoa_r+0x61c>
 810824a:	46bb      	mov	fp, r7
 810824c:	e04a      	b.n	81082e4 <_dtoa_r+0x6c4>
 810824e:	4b06      	ldr	r3, [pc, #24]	; (8108268 <_dtoa_r+0x648>)
 8108250:	f7f8 fa5a 	bl	8100708 <__aeabi_dmul>
 8108254:	4680      	mov	r8, r0
 8108256:	4689      	mov	r9, r1
 8108258:	e7bd      	b.n	81081d6 <_dtoa_r+0x5b6>
 810825a:	bf00      	nop
 810825c:	0810b8a0 	.word	0x0810b8a0
 8108260:	0810b878 	.word	0x0810b878
 8108264:	3ff00000 	.word	0x3ff00000
 8108268:	40240000 	.word	0x40240000
 810826c:	401c0000 	.word	0x401c0000
 8108270:	40140000 	.word	0x40140000
 8108274:	3fe00000 	.word	0x3fe00000
 8108278:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 810827c:	9d00      	ldr	r5, [sp, #0]
 810827e:	4642      	mov	r2, r8
 8108280:	464b      	mov	r3, r9
 8108282:	4630      	mov	r0, r6
 8108284:	4639      	mov	r1, r7
 8108286:	f7f8 fb69 	bl	810095c <__aeabi_ddiv>
 810828a:	f7f8 fced 	bl	8100c68 <__aeabi_d2iz>
 810828e:	9001      	str	r0, [sp, #4]
 8108290:	f7f8 f9d0 	bl	8100634 <__aeabi_i2d>
 8108294:	4642      	mov	r2, r8
 8108296:	464b      	mov	r3, r9
 8108298:	f7f8 fa36 	bl	8100708 <__aeabi_dmul>
 810829c:	4602      	mov	r2, r0
 810829e:	460b      	mov	r3, r1
 81082a0:	4630      	mov	r0, r6
 81082a2:	4639      	mov	r1, r7
 81082a4:	f7f8 f878 	bl	8100398 <__aeabi_dsub>
 81082a8:	9e01      	ldr	r6, [sp, #4]
 81082aa:	9f04      	ldr	r7, [sp, #16]
 81082ac:	3630      	adds	r6, #48	; 0x30
 81082ae:	f805 6b01 	strb.w	r6, [r5], #1
 81082b2:	9e00      	ldr	r6, [sp, #0]
 81082b4:	1bae      	subs	r6, r5, r6
 81082b6:	42b7      	cmp	r7, r6
 81082b8:	4602      	mov	r2, r0
 81082ba:	460b      	mov	r3, r1
 81082bc:	d134      	bne.n	8108328 <_dtoa_r+0x708>
 81082be:	f7f8 f86d 	bl	810039c <__adddf3>
 81082c2:	4642      	mov	r2, r8
 81082c4:	464b      	mov	r3, r9
 81082c6:	4606      	mov	r6, r0
 81082c8:	460f      	mov	r7, r1
 81082ca:	f7f8 fcad 	bl	8100c28 <__aeabi_dcmpgt>
 81082ce:	b9c8      	cbnz	r0, 8108304 <_dtoa_r+0x6e4>
 81082d0:	4642      	mov	r2, r8
 81082d2:	464b      	mov	r3, r9
 81082d4:	4630      	mov	r0, r6
 81082d6:	4639      	mov	r1, r7
 81082d8:	f7f8 fc7e 	bl	8100bd8 <__aeabi_dcmpeq>
 81082dc:	b110      	cbz	r0, 81082e4 <_dtoa_r+0x6c4>
 81082de:	9b01      	ldr	r3, [sp, #4]
 81082e0:	07db      	lsls	r3, r3, #31
 81082e2:	d40f      	bmi.n	8108304 <_dtoa_r+0x6e4>
 81082e4:	4651      	mov	r1, sl
 81082e6:	4620      	mov	r0, r4
 81082e8:	f000 fbcc 	bl	8108a84 <_Bfree>
 81082ec:	2300      	movs	r3, #0
 81082ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 81082f0:	702b      	strb	r3, [r5, #0]
 81082f2:	f10b 0301 	add.w	r3, fp, #1
 81082f6:	6013      	str	r3, [r2, #0]
 81082f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 81082fa:	2b00      	cmp	r3, #0
 81082fc:	f43f ace2 	beq.w	8107cc4 <_dtoa_r+0xa4>
 8108300:	601d      	str	r5, [r3, #0]
 8108302:	e4df      	b.n	8107cc4 <_dtoa_r+0xa4>
 8108304:	465f      	mov	r7, fp
 8108306:	462b      	mov	r3, r5
 8108308:	461d      	mov	r5, r3
 810830a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810830e:	2a39      	cmp	r2, #57	; 0x39
 8108310:	d106      	bne.n	8108320 <_dtoa_r+0x700>
 8108312:	9a00      	ldr	r2, [sp, #0]
 8108314:	429a      	cmp	r2, r3
 8108316:	d1f7      	bne.n	8108308 <_dtoa_r+0x6e8>
 8108318:	9900      	ldr	r1, [sp, #0]
 810831a:	2230      	movs	r2, #48	; 0x30
 810831c:	3701      	adds	r7, #1
 810831e:	700a      	strb	r2, [r1, #0]
 8108320:	781a      	ldrb	r2, [r3, #0]
 8108322:	3201      	adds	r2, #1
 8108324:	701a      	strb	r2, [r3, #0]
 8108326:	e790      	b.n	810824a <_dtoa_r+0x62a>
 8108328:	4ba3      	ldr	r3, [pc, #652]	; (81085b8 <_dtoa_r+0x998>)
 810832a:	2200      	movs	r2, #0
 810832c:	f7f8 f9ec 	bl	8100708 <__aeabi_dmul>
 8108330:	2200      	movs	r2, #0
 8108332:	2300      	movs	r3, #0
 8108334:	4606      	mov	r6, r0
 8108336:	460f      	mov	r7, r1
 8108338:	f7f8 fc4e 	bl	8100bd8 <__aeabi_dcmpeq>
 810833c:	2800      	cmp	r0, #0
 810833e:	d09e      	beq.n	810827e <_dtoa_r+0x65e>
 8108340:	e7d0      	b.n	81082e4 <_dtoa_r+0x6c4>
 8108342:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8108344:	2a00      	cmp	r2, #0
 8108346:	f000 80ca 	beq.w	81084de <_dtoa_r+0x8be>
 810834a:	9a07      	ldr	r2, [sp, #28]
 810834c:	2a01      	cmp	r2, #1
 810834e:	f300 80ad 	bgt.w	81084ac <_dtoa_r+0x88c>
 8108352:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8108354:	2a00      	cmp	r2, #0
 8108356:	f000 80a5 	beq.w	81084a4 <_dtoa_r+0x884>
 810835a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 810835e:	9e08      	ldr	r6, [sp, #32]
 8108360:	9d05      	ldr	r5, [sp, #20]
 8108362:	9a05      	ldr	r2, [sp, #20]
 8108364:	441a      	add	r2, r3
 8108366:	9205      	str	r2, [sp, #20]
 8108368:	9a06      	ldr	r2, [sp, #24]
 810836a:	2101      	movs	r1, #1
 810836c:	441a      	add	r2, r3
 810836e:	4620      	mov	r0, r4
 8108370:	9206      	str	r2, [sp, #24]
 8108372:	f000 fc87 	bl	8108c84 <__i2b>
 8108376:	4607      	mov	r7, r0
 8108378:	b165      	cbz	r5, 8108394 <_dtoa_r+0x774>
 810837a:	9b06      	ldr	r3, [sp, #24]
 810837c:	2b00      	cmp	r3, #0
 810837e:	dd09      	ble.n	8108394 <_dtoa_r+0x774>
 8108380:	42ab      	cmp	r3, r5
 8108382:	9a05      	ldr	r2, [sp, #20]
 8108384:	bfa8      	it	ge
 8108386:	462b      	movge	r3, r5
 8108388:	1ad2      	subs	r2, r2, r3
 810838a:	9205      	str	r2, [sp, #20]
 810838c:	9a06      	ldr	r2, [sp, #24]
 810838e:	1aed      	subs	r5, r5, r3
 8108390:	1ad3      	subs	r3, r2, r3
 8108392:	9306      	str	r3, [sp, #24]
 8108394:	9b08      	ldr	r3, [sp, #32]
 8108396:	b1f3      	cbz	r3, 81083d6 <_dtoa_r+0x7b6>
 8108398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810839a:	2b00      	cmp	r3, #0
 810839c:	f000 80a3 	beq.w	81084e6 <_dtoa_r+0x8c6>
 81083a0:	2e00      	cmp	r6, #0
 81083a2:	dd10      	ble.n	81083c6 <_dtoa_r+0x7a6>
 81083a4:	4639      	mov	r1, r7
 81083a6:	4632      	mov	r2, r6
 81083a8:	4620      	mov	r0, r4
 81083aa:	f000 fd2b 	bl	8108e04 <__pow5mult>
 81083ae:	4652      	mov	r2, sl
 81083b0:	4601      	mov	r1, r0
 81083b2:	4607      	mov	r7, r0
 81083b4:	4620      	mov	r0, r4
 81083b6:	f000 fc7b 	bl	8108cb0 <__multiply>
 81083ba:	4651      	mov	r1, sl
 81083bc:	4680      	mov	r8, r0
 81083be:	4620      	mov	r0, r4
 81083c0:	f000 fb60 	bl	8108a84 <_Bfree>
 81083c4:	46c2      	mov	sl, r8
 81083c6:	9b08      	ldr	r3, [sp, #32]
 81083c8:	1b9a      	subs	r2, r3, r6
 81083ca:	d004      	beq.n	81083d6 <_dtoa_r+0x7b6>
 81083cc:	4651      	mov	r1, sl
 81083ce:	4620      	mov	r0, r4
 81083d0:	f000 fd18 	bl	8108e04 <__pow5mult>
 81083d4:	4682      	mov	sl, r0
 81083d6:	2101      	movs	r1, #1
 81083d8:	4620      	mov	r0, r4
 81083da:	f000 fc53 	bl	8108c84 <__i2b>
 81083de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81083e0:	2b00      	cmp	r3, #0
 81083e2:	4606      	mov	r6, r0
 81083e4:	f340 8081 	ble.w	81084ea <_dtoa_r+0x8ca>
 81083e8:	461a      	mov	r2, r3
 81083ea:	4601      	mov	r1, r0
 81083ec:	4620      	mov	r0, r4
 81083ee:	f000 fd09 	bl	8108e04 <__pow5mult>
 81083f2:	9b07      	ldr	r3, [sp, #28]
 81083f4:	2b01      	cmp	r3, #1
 81083f6:	4606      	mov	r6, r0
 81083f8:	dd7a      	ble.n	81084f0 <_dtoa_r+0x8d0>
 81083fa:	f04f 0800 	mov.w	r8, #0
 81083fe:	6933      	ldr	r3, [r6, #16]
 8108400:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8108404:	6918      	ldr	r0, [r3, #16]
 8108406:	f000 fbef 	bl	8108be8 <__hi0bits>
 810840a:	f1c0 0020 	rsb	r0, r0, #32
 810840e:	9b06      	ldr	r3, [sp, #24]
 8108410:	4418      	add	r0, r3
 8108412:	f010 001f 	ands.w	r0, r0, #31
 8108416:	f000 8094 	beq.w	8108542 <_dtoa_r+0x922>
 810841a:	f1c0 0320 	rsb	r3, r0, #32
 810841e:	2b04      	cmp	r3, #4
 8108420:	f340 8085 	ble.w	810852e <_dtoa_r+0x90e>
 8108424:	9b05      	ldr	r3, [sp, #20]
 8108426:	f1c0 001c 	rsb	r0, r0, #28
 810842a:	4403      	add	r3, r0
 810842c:	9305      	str	r3, [sp, #20]
 810842e:	9b06      	ldr	r3, [sp, #24]
 8108430:	4403      	add	r3, r0
 8108432:	4405      	add	r5, r0
 8108434:	9306      	str	r3, [sp, #24]
 8108436:	9b05      	ldr	r3, [sp, #20]
 8108438:	2b00      	cmp	r3, #0
 810843a:	dd05      	ble.n	8108448 <_dtoa_r+0x828>
 810843c:	4651      	mov	r1, sl
 810843e:	461a      	mov	r2, r3
 8108440:	4620      	mov	r0, r4
 8108442:	f000 fd39 	bl	8108eb8 <__lshift>
 8108446:	4682      	mov	sl, r0
 8108448:	9b06      	ldr	r3, [sp, #24]
 810844a:	2b00      	cmp	r3, #0
 810844c:	dd05      	ble.n	810845a <_dtoa_r+0x83a>
 810844e:	4631      	mov	r1, r6
 8108450:	461a      	mov	r2, r3
 8108452:	4620      	mov	r0, r4
 8108454:	f000 fd30 	bl	8108eb8 <__lshift>
 8108458:	4606      	mov	r6, r0
 810845a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810845c:	2b00      	cmp	r3, #0
 810845e:	d072      	beq.n	8108546 <_dtoa_r+0x926>
 8108460:	4631      	mov	r1, r6
 8108462:	4650      	mov	r0, sl
 8108464:	f000 fd94 	bl	8108f90 <__mcmp>
 8108468:	2800      	cmp	r0, #0
 810846a:	da6c      	bge.n	8108546 <_dtoa_r+0x926>
 810846c:	2300      	movs	r3, #0
 810846e:	4651      	mov	r1, sl
 8108470:	220a      	movs	r2, #10
 8108472:	4620      	mov	r0, r4
 8108474:	f000 fb28 	bl	8108ac8 <__multadd>
 8108478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810847a:	f10b 3bff 	add.w	fp, fp, #4294967295
 810847e:	4682      	mov	sl, r0
 8108480:	2b00      	cmp	r3, #0
 8108482:	f000 81b0 	beq.w	81087e6 <_dtoa_r+0xbc6>
 8108486:	2300      	movs	r3, #0
 8108488:	4639      	mov	r1, r7
 810848a:	220a      	movs	r2, #10
 810848c:	4620      	mov	r0, r4
 810848e:	f000 fb1b 	bl	8108ac8 <__multadd>
 8108492:	9b01      	ldr	r3, [sp, #4]
 8108494:	2b00      	cmp	r3, #0
 8108496:	4607      	mov	r7, r0
 8108498:	f300 8096 	bgt.w	81085c8 <_dtoa_r+0x9a8>
 810849c:	9b07      	ldr	r3, [sp, #28]
 810849e:	2b02      	cmp	r3, #2
 81084a0:	dc59      	bgt.n	8108556 <_dtoa_r+0x936>
 81084a2:	e091      	b.n	81085c8 <_dtoa_r+0x9a8>
 81084a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 81084a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 81084aa:	e758      	b.n	810835e <_dtoa_r+0x73e>
 81084ac:	9b04      	ldr	r3, [sp, #16]
 81084ae:	1e5e      	subs	r6, r3, #1
 81084b0:	9b08      	ldr	r3, [sp, #32]
 81084b2:	42b3      	cmp	r3, r6
 81084b4:	bfbf      	itttt	lt
 81084b6:	9b08      	ldrlt	r3, [sp, #32]
 81084b8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 81084ba:	9608      	strlt	r6, [sp, #32]
 81084bc:	1af3      	sublt	r3, r6, r3
 81084be:	bfb4      	ite	lt
 81084c0:	18d2      	addlt	r2, r2, r3
 81084c2:	1b9e      	subge	r6, r3, r6
 81084c4:	9b04      	ldr	r3, [sp, #16]
 81084c6:	bfbc      	itt	lt
 81084c8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 81084ca:	2600      	movlt	r6, #0
 81084cc:	2b00      	cmp	r3, #0
 81084ce:	bfb7      	itett	lt
 81084d0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 81084d4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 81084d8:	1a9d      	sublt	r5, r3, r2
 81084da:	2300      	movlt	r3, #0
 81084dc:	e741      	b.n	8108362 <_dtoa_r+0x742>
 81084de:	9e08      	ldr	r6, [sp, #32]
 81084e0:	9d05      	ldr	r5, [sp, #20]
 81084e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 81084e4:	e748      	b.n	8108378 <_dtoa_r+0x758>
 81084e6:	9a08      	ldr	r2, [sp, #32]
 81084e8:	e770      	b.n	81083cc <_dtoa_r+0x7ac>
 81084ea:	9b07      	ldr	r3, [sp, #28]
 81084ec:	2b01      	cmp	r3, #1
 81084ee:	dc19      	bgt.n	8108524 <_dtoa_r+0x904>
 81084f0:	9b02      	ldr	r3, [sp, #8]
 81084f2:	b9bb      	cbnz	r3, 8108524 <_dtoa_r+0x904>
 81084f4:	9b03      	ldr	r3, [sp, #12]
 81084f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81084fa:	b99b      	cbnz	r3, 8108524 <_dtoa_r+0x904>
 81084fc:	9b03      	ldr	r3, [sp, #12]
 81084fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8108502:	0d1b      	lsrs	r3, r3, #20
 8108504:	051b      	lsls	r3, r3, #20
 8108506:	b183      	cbz	r3, 810852a <_dtoa_r+0x90a>
 8108508:	9b05      	ldr	r3, [sp, #20]
 810850a:	3301      	adds	r3, #1
 810850c:	9305      	str	r3, [sp, #20]
 810850e:	9b06      	ldr	r3, [sp, #24]
 8108510:	3301      	adds	r3, #1
 8108512:	9306      	str	r3, [sp, #24]
 8108514:	f04f 0801 	mov.w	r8, #1
 8108518:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810851a:	2b00      	cmp	r3, #0
 810851c:	f47f af6f 	bne.w	81083fe <_dtoa_r+0x7de>
 8108520:	2001      	movs	r0, #1
 8108522:	e774      	b.n	810840e <_dtoa_r+0x7ee>
 8108524:	f04f 0800 	mov.w	r8, #0
 8108528:	e7f6      	b.n	8108518 <_dtoa_r+0x8f8>
 810852a:	4698      	mov	r8, r3
 810852c:	e7f4      	b.n	8108518 <_dtoa_r+0x8f8>
 810852e:	d082      	beq.n	8108436 <_dtoa_r+0x816>
 8108530:	9a05      	ldr	r2, [sp, #20]
 8108532:	331c      	adds	r3, #28
 8108534:	441a      	add	r2, r3
 8108536:	9205      	str	r2, [sp, #20]
 8108538:	9a06      	ldr	r2, [sp, #24]
 810853a:	441a      	add	r2, r3
 810853c:	441d      	add	r5, r3
 810853e:	9206      	str	r2, [sp, #24]
 8108540:	e779      	b.n	8108436 <_dtoa_r+0x816>
 8108542:	4603      	mov	r3, r0
 8108544:	e7f4      	b.n	8108530 <_dtoa_r+0x910>
 8108546:	9b04      	ldr	r3, [sp, #16]
 8108548:	2b00      	cmp	r3, #0
 810854a:	dc37      	bgt.n	81085bc <_dtoa_r+0x99c>
 810854c:	9b07      	ldr	r3, [sp, #28]
 810854e:	2b02      	cmp	r3, #2
 8108550:	dd34      	ble.n	81085bc <_dtoa_r+0x99c>
 8108552:	9b04      	ldr	r3, [sp, #16]
 8108554:	9301      	str	r3, [sp, #4]
 8108556:	9b01      	ldr	r3, [sp, #4]
 8108558:	b963      	cbnz	r3, 8108574 <_dtoa_r+0x954>
 810855a:	4631      	mov	r1, r6
 810855c:	2205      	movs	r2, #5
 810855e:	4620      	mov	r0, r4
 8108560:	f000 fab2 	bl	8108ac8 <__multadd>
 8108564:	4601      	mov	r1, r0
 8108566:	4606      	mov	r6, r0
 8108568:	4650      	mov	r0, sl
 810856a:	f000 fd11 	bl	8108f90 <__mcmp>
 810856e:	2800      	cmp	r0, #0
 8108570:	f73f adbb 	bgt.w	81080ea <_dtoa_r+0x4ca>
 8108574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108576:	9d00      	ldr	r5, [sp, #0]
 8108578:	ea6f 0b03 	mvn.w	fp, r3
 810857c:	f04f 0800 	mov.w	r8, #0
 8108580:	4631      	mov	r1, r6
 8108582:	4620      	mov	r0, r4
 8108584:	f000 fa7e 	bl	8108a84 <_Bfree>
 8108588:	2f00      	cmp	r7, #0
 810858a:	f43f aeab 	beq.w	81082e4 <_dtoa_r+0x6c4>
 810858e:	f1b8 0f00 	cmp.w	r8, #0
 8108592:	d005      	beq.n	81085a0 <_dtoa_r+0x980>
 8108594:	45b8      	cmp	r8, r7
 8108596:	d003      	beq.n	81085a0 <_dtoa_r+0x980>
 8108598:	4641      	mov	r1, r8
 810859a:	4620      	mov	r0, r4
 810859c:	f000 fa72 	bl	8108a84 <_Bfree>
 81085a0:	4639      	mov	r1, r7
 81085a2:	4620      	mov	r0, r4
 81085a4:	f000 fa6e 	bl	8108a84 <_Bfree>
 81085a8:	e69c      	b.n	81082e4 <_dtoa_r+0x6c4>
 81085aa:	2600      	movs	r6, #0
 81085ac:	4637      	mov	r7, r6
 81085ae:	e7e1      	b.n	8108574 <_dtoa_r+0x954>
 81085b0:	46bb      	mov	fp, r7
 81085b2:	4637      	mov	r7, r6
 81085b4:	e599      	b.n	81080ea <_dtoa_r+0x4ca>
 81085b6:	bf00      	nop
 81085b8:	40240000 	.word	0x40240000
 81085bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81085be:	2b00      	cmp	r3, #0
 81085c0:	f000 80c8 	beq.w	8108754 <_dtoa_r+0xb34>
 81085c4:	9b04      	ldr	r3, [sp, #16]
 81085c6:	9301      	str	r3, [sp, #4]
 81085c8:	2d00      	cmp	r5, #0
 81085ca:	dd05      	ble.n	81085d8 <_dtoa_r+0x9b8>
 81085cc:	4639      	mov	r1, r7
 81085ce:	462a      	mov	r2, r5
 81085d0:	4620      	mov	r0, r4
 81085d2:	f000 fc71 	bl	8108eb8 <__lshift>
 81085d6:	4607      	mov	r7, r0
 81085d8:	f1b8 0f00 	cmp.w	r8, #0
 81085dc:	d05b      	beq.n	8108696 <_dtoa_r+0xa76>
 81085de:	6879      	ldr	r1, [r7, #4]
 81085e0:	4620      	mov	r0, r4
 81085e2:	f000 fa0f 	bl	8108a04 <_Balloc>
 81085e6:	4605      	mov	r5, r0
 81085e8:	b928      	cbnz	r0, 81085f6 <_dtoa_r+0x9d6>
 81085ea:	4b83      	ldr	r3, [pc, #524]	; (81087f8 <_dtoa_r+0xbd8>)
 81085ec:	4602      	mov	r2, r0
 81085ee:	f240 21ef 	movw	r1, #751	; 0x2ef
 81085f2:	f7ff bb2e 	b.w	8107c52 <_dtoa_r+0x32>
 81085f6:	693a      	ldr	r2, [r7, #16]
 81085f8:	3202      	adds	r2, #2
 81085fa:	0092      	lsls	r2, r2, #2
 81085fc:	f107 010c 	add.w	r1, r7, #12
 8108600:	300c      	adds	r0, #12
 8108602:	f7ff fa6e 	bl	8107ae2 <memcpy>
 8108606:	2201      	movs	r2, #1
 8108608:	4629      	mov	r1, r5
 810860a:	4620      	mov	r0, r4
 810860c:	f000 fc54 	bl	8108eb8 <__lshift>
 8108610:	9b00      	ldr	r3, [sp, #0]
 8108612:	3301      	adds	r3, #1
 8108614:	9304      	str	r3, [sp, #16]
 8108616:	e9dd 2300 	ldrd	r2, r3, [sp]
 810861a:	4413      	add	r3, r2
 810861c:	9308      	str	r3, [sp, #32]
 810861e:	9b02      	ldr	r3, [sp, #8]
 8108620:	f003 0301 	and.w	r3, r3, #1
 8108624:	46b8      	mov	r8, r7
 8108626:	9306      	str	r3, [sp, #24]
 8108628:	4607      	mov	r7, r0
 810862a:	9b04      	ldr	r3, [sp, #16]
 810862c:	4631      	mov	r1, r6
 810862e:	3b01      	subs	r3, #1
 8108630:	4650      	mov	r0, sl
 8108632:	9301      	str	r3, [sp, #4]
 8108634:	f7ff fa6a 	bl	8107b0c <quorem>
 8108638:	4641      	mov	r1, r8
 810863a:	9002      	str	r0, [sp, #8]
 810863c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8108640:	4650      	mov	r0, sl
 8108642:	f000 fca5 	bl	8108f90 <__mcmp>
 8108646:	463a      	mov	r2, r7
 8108648:	9005      	str	r0, [sp, #20]
 810864a:	4631      	mov	r1, r6
 810864c:	4620      	mov	r0, r4
 810864e:	f000 fcbb 	bl	8108fc8 <__mdiff>
 8108652:	68c2      	ldr	r2, [r0, #12]
 8108654:	4605      	mov	r5, r0
 8108656:	bb02      	cbnz	r2, 810869a <_dtoa_r+0xa7a>
 8108658:	4601      	mov	r1, r0
 810865a:	4650      	mov	r0, sl
 810865c:	f000 fc98 	bl	8108f90 <__mcmp>
 8108660:	4602      	mov	r2, r0
 8108662:	4629      	mov	r1, r5
 8108664:	4620      	mov	r0, r4
 8108666:	9209      	str	r2, [sp, #36]	; 0x24
 8108668:	f000 fa0c 	bl	8108a84 <_Bfree>
 810866c:	9b07      	ldr	r3, [sp, #28]
 810866e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8108670:	9d04      	ldr	r5, [sp, #16]
 8108672:	ea43 0102 	orr.w	r1, r3, r2
 8108676:	9b06      	ldr	r3, [sp, #24]
 8108678:	4319      	orrs	r1, r3
 810867a:	d110      	bne.n	810869e <_dtoa_r+0xa7e>
 810867c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8108680:	d029      	beq.n	81086d6 <_dtoa_r+0xab6>
 8108682:	9b05      	ldr	r3, [sp, #20]
 8108684:	2b00      	cmp	r3, #0
 8108686:	dd02      	ble.n	810868e <_dtoa_r+0xa6e>
 8108688:	9b02      	ldr	r3, [sp, #8]
 810868a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 810868e:	9b01      	ldr	r3, [sp, #4]
 8108690:	f883 9000 	strb.w	r9, [r3]
 8108694:	e774      	b.n	8108580 <_dtoa_r+0x960>
 8108696:	4638      	mov	r0, r7
 8108698:	e7ba      	b.n	8108610 <_dtoa_r+0x9f0>
 810869a:	2201      	movs	r2, #1
 810869c:	e7e1      	b.n	8108662 <_dtoa_r+0xa42>
 810869e:	9b05      	ldr	r3, [sp, #20]
 81086a0:	2b00      	cmp	r3, #0
 81086a2:	db04      	blt.n	81086ae <_dtoa_r+0xa8e>
 81086a4:	9907      	ldr	r1, [sp, #28]
 81086a6:	430b      	orrs	r3, r1
 81086a8:	9906      	ldr	r1, [sp, #24]
 81086aa:	430b      	orrs	r3, r1
 81086ac:	d120      	bne.n	81086f0 <_dtoa_r+0xad0>
 81086ae:	2a00      	cmp	r2, #0
 81086b0:	dded      	ble.n	810868e <_dtoa_r+0xa6e>
 81086b2:	4651      	mov	r1, sl
 81086b4:	2201      	movs	r2, #1
 81086b6:	4620      	mov	r0, r4
 81086b8:	f000 fbfe 	bl	8108eb8 <__lshift>
 81086bc:	4631      	mov	r1, r6
 81086be:	4682      	mov	sl, r0
 81086c0:	f000 fc66 	bl	8108f90 <__mcmp>
 81086c4:	2800      	cmp	r0, #0
 81086c6:	dc03      	bgt.n	81086d0 <_dtoa_r+0xab0>
 81086c8:	d1e1      	bne.n	810868e <_dtoa_r+0xa6e>
 81086ca:	f019 0f01 	tst.w	r9, #1
 81086ce:	d0de      	beq.n	810868e <_dtoa_r+0xa6e>
 81086d0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 81086d4:	d1d8      	bne.n	8108688 <_dtoa_r+0xa68>
 81086d6:	9a01      	ldr	r2, [sp, #4]
 81086d8:	2339      	movs	r3, #57	; 0x39
 81086da:	7013      	strb	r3, [r2, #0]
 81086dc:	462b      	mov	r3, r5
 81086de:	461d      	mov	r5, r3
 81086e0:	3b01      	subs	r3, #1
 81086e2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 81086e6:	2a39      	cmp	r2, #57	; 0x39
 81086e8:	d06c      	beq.n	81087c4 <_dtoa_r+0xba4>
 81086ea:	3201      	adds	r2, #1
 81086ec:	701a      	strb	r2, [r3, #0]
 81086ee:	e747      	b.n	8108580 <_dtoa_r+0x960>
 81086f0:	2a00      	cmp	r2, #0
 81086f2:	dd07      	ble.n	8108704 <_dtoa_r+0xae4>
 81086f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 81086f8:	d0ed      	beq.n	81086d6 <_dtoa_r+0xab6>
 81086fa:	9a01      	ldr	r2, [sp, #4]
 81086fc:	f109 0301 	add.w	r3, r9, #1
 8108700:	7013      	strb	r3, [r2, #0]
 8108702:	e73d      	b.n	8108580 <_dtoa_r+0x960>
 8108704:	9b04      	ldr	r3, [sp, #16]
 8108706:	9a08      	ldr	r2, [sp, #32]
 8108708:	f803 9c01 	strb.w	r9, [r3, #-1]
 810870c:	4293      	cmp	r3, r2
 810870e:	d043      	beq.n	8108798 <_dtoa_r+0xb78>
 8108710:	4651      	mov	r1, sl
 8108712:	2300      	movs	r3, #0
 8108714:	220a      	movs	r2, #10
 8108716:	4620      	mov	r0, r4
 8108718:	f000 f9d6 	bl	8108ac8 <__multadd>
 810871c:	45b8      	cmp	r8, r7
 810871e:	4682      	mov	sl, r0
 8108720:	f04f 0300 	mov.w	r3, #0
 8108724:	f04f 020a 	mov.w	r2, #10
 8108728:	4641      	mov	r1, r8
 810872a:	4620      	mov	r0, r4
 810872c:	d107      	bne.n	810873e <_dtoa_r+0xb1e>
 810872e:	f000 f9cb 	bl	8108ac8 <__multadd>
 8108732:	4680      	mov	r8, r0
 8108734:	4607      	mov	r7, r0
 8108736:	9b04      	ldr	r3, [sp, #16]
 8108738:	3301      	adds	r3, #1
 810873a:	9304      	str	r3, [sp, #16]
 810873c:	e775      	b.n	810862a <_dtoa_r+0xa0a>
 810873e:	f000 f9c3 	bl	8108ac8 <__multadd>
 8108742:	4639      	mov	r1, r7
 8108744:	4680      	mov	r8, r0
 8108746:	2300      	movs	r3, #0
 8108748:	220a      	movs	r2, #10
 810874a:	4620      	mov	r0, r4
 810874c:	f000 f9bc 	bl	8108ac8 <__multadd>
 8108750:	4607      	mov	r7, r0
 8108752:	e7f0      	b.n	8108736 <_dtoa_r+0xb16>
 8108754:	9b04      	ldr	r3, [sp, #16]
 8108756:	9301      	str	r3, [sp, #4]
 8108758:	9d00      	ldr	r5, [sp, #0]
 810875a:	4631      	mov	r1, r6
 810875c:	4650      	mov	r0, sl
 810875e:	f7ff f9d5 	bl	8107b0c <quorem>
 8108762:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8108766:	9b00      	ldr	r3, [sp, #0]
 8108768:	f805 9b01 	strb.w	r9, [r5], #1
 810876c:	1aea      	subs	r2, r5, r3
 810876e:	9b01      	ldr	r3, [sp, #4]
 8108770:	4293      	cmp	r3, r2
 8108772:	dd07      	ble.n	8108784 <_dtoa_r+0xb64>
 8108774:	4651      	mov	r1, sl
 8108776:	2300      	movs	r3, #0
 8108778:	220a      	movs	r2, #10
 810877a:	4620      	mov	r0, r4
 810877c:	f000 f9a4 	bl	8108ac8 <__multadd>
 8108780:	4682      	mov	sl, r0
 8108782:	e7ea      	b.n	810875a <_dtoa_r+0xb3a>
 8108784:	9b01      	ldr	r3, [sp, #4]
 8108786:	2b00      	cmp	r3, #0
 8108788:	bfc8      	it	gt
 810878a:	461d      	movgt	r5, r3
 810878c:	9b00      	ldr	r3, [sp, #0]
 810878e:	bfd8      	it	le
 8108790:	2501      	movle	r5, #1
 8108792:	441d      	add	r5, r3
 8108794:	f04f 0800 	mov.w	r8, #0
 8108798:	4651      	mov	r1, sl
 810879a:	2201      	movs	r2, #1
 810879c:	4620      	mov	r0, r4
 810879e:	f000 fb8b 	bl	8108eb8 <__lshift>
 81087a2:	4631      	mov	r1, r6
 81087a4:	4682      	mov	sl, r0
 81087a6:	f000 fbf3 	bl	8108f90 <__mcmp>
 81087aa:	2800      	cmp	r0, #0
 81087ac:	dc96      	bgt.n	81086dc <_dtoa_r+0xabc>
 81087ae:	d102      	bne.n	81087b6 <_dtoa_r+0xb96>
 81087b0:	f019 0f01 	tst.w	r9, #1
 81087b4:	d192      	bne.n	81086dc <_dtoa_r+0xabc>
 81087b6:	462b      	mov	r3, r5
 81087b8:	461d      	mov	r5, r3
 81087ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 81087be:	2a30      	cmp	r2, #48	; 0x30
 81087c0:	d0fa      	beq.n	81087b8 <_dtoa_r+0xb98>
 81087c2:	e6dd      	b.n	8108580 <_dtoa_r+0x960>
 81087c4:	9a00      	ldr	r2, [sp, #0]
 81087c6:	429a      	cmp	r2, r3
 81087c8:	d189      	bne.n	81086de <_dtoa_r+0xabe>
 81087ca:	f10b 0b01 	add.w	fp, fp, #1
 81087ce:	2331      	movs	r3, #49	; 0x31
 81087d0:	e796      	b.n	8108700 <_dtoa_r+0xae0>
 81087d2:	4b0a      	ldr	r3, [pc, #40]	; (81087fc <_dtoa_r+0xbdc>)
 81087d4:	f7ff ba99 	b.w	8107d0a <_dtoa_r+0xea>
 81087d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 81087da:	2b00      	cmp	r3, #0
 81087dc:	f47f aa6d 	bne.w	8107cba <_dtoa_r+0x9a>
 81087e0:	4b07      	ldr	r3, [pc, #28]	; (8108800 <_dtoa_r+0xbe0>)
 81087e2:	f7ff ba92 	b.w	8107d0a <_dtoa_r+0xea>
 81087e6:	9b01      	ldr	r3, [sp, #4]
 81087e8:	2b00      	cmp	r3, #0
 81087ea:	dcb5      	bgt.n	8108758 <_dtoa_r+0xb38>
 81087ec:	9b07      	ldr	r3, [sp, #28]
 81087ee:	2b02      	cmp	r3, #2
 81087f0:	f73f aeb1 	bgt.w	8108556 <_dtoa_r+0x936>
 81087f4:	e7b0      	b.n	8108758 <_dtoa_r+0xb38>
 81087f6:	bf00      	nop
 81087f8:	0810b809 	.word	0x0810b809
 81087fc:	0810b764 	.word	0x0810b764
 8108800:	0810b78d 	.word	0x0810b78d

08108804 <_free_r>:
 8108804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8108806:	2900      	cmp	r1, #0
 8108808:	d044      	beq.n	8108894 <_free_r+0x90>
 810880a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810880e:	9001      	str	r0, [sp, #4]
 8108810:	2b00      	cmp	r3, #0
 8108812:	f1a1 0404 	sub.w	r4, r1, #4
 8108816:	bfb8      	it	lt
 8108818:	18e4      	addlt	r4, r4, r3
 810881a:	f000 f8e7 	bl	81089ec <__malloc_lock>
 810881e:	4a1e      	ldr	r2, [pc, #120]	; (8108898 <_free_r+0x94>)
 8108820:	9801      	ldr	r0, [sp, #4]
 8108822:	6813      	ldr	r3, [r2, #0]
 8108824:	b933      	cbnz	r3, 8108834 <_free_r+0x30>
 8108826:	6063      	str	r3, [r4, #4]
 8108828:	6014      	str	r4, [r2, #0]
 810882a:	b003      	add	sp, #12
 810882c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8108830:	f000 b8e2 	b.w	81089f8 <__malloc_unlock>
 8108834:	42a3      	cmp	r3, r4
 8108836:	d908      	bls.n	810884a <_free_r+0x46>
 8108838:	6825      	ldr	r5, [r4, #0]
 810883a:	1961      	adds	r1, r4, r5
 810883c:	428b      	cmp	r3, r1
 810883e:	bf01      	itttt	eq
 8108840:	6819      	ldreq	r1, [r3, #0]
 8108842:	685b      	ldreq	r3, [r3, #4]
 8108844:	1949      	addeq	r1, r1, r5
 8108846:	6021      	streq	r1, [r4, #0]
 8108848:	e7ed      	b.n	8108826 <_free_r+0x22>
 810884a:	461a      	mov	r2, r3
 810884c:	685b      	ldr	r3, [r3, #4]
 810884e:	b10b      	cbz	r3, 8108854 <_free_r+0x50>
 8108850:	42a3      	cmp	r3, r4
 8108852:	d9fa      	bls.n	810884a <_free_r+0x46>
 8108854:	6811      	ldr	r1, [r2, #0]
 8108856:	1855      	adds	r5, r2, r1
 8108858:	42a5      	cmp	r5, r4
 810885a:	d10b      	bne.n	8108874 <_free_r+0x70>
 810885c:	6824      	ldr	r4, [r4, #0]
 810885e:	4421      	add	r1, r4
 8108860:	1854      	adds	r4, r2, r1
 8108862:	42a3      	cmp	r3, r4
 8108864:	6011      	str	r1, [r2, #0]
 8108866:	d1e0      	bne.n	810882a <_free_r+0x26>
 8108868:	681c      	ldr	r4, [r3, #0]
 810886a:	685b      	ldr	r3, [r3, #4]
 810886c:	6053      	str	r3, [r2, #4]
 810886e:	440c      	add	r4, r1
 8108870:	6014      	str	r4, [r2, #0]
 8108872:	e7da      	b.n	810882a <_free_r+0x26>
 8108874:	d902      	bls.n	810887c <_free_r+0x78>
 8108876:	230c      	movs	r3, #12
 8108878:	6003      	str	r3, [r0, #0]
 810887a:	e7d6      	b.n	810882a <_free_r+0x26>
 810887c:	6825      	ldr	r5, [r4, #0]
 810887e:	1961      	adds	r1, r4, r5
 8108880:	428b      	cmp	r3, r1
 8108882:	bf04      	itt	eq
 8108884:	6819      	ldreq	r1, [r3, #0]
 8108886:	685b      	ldreq	r3, [r3, #4]
 8108888:	6063      	str	r3, [r4, #4]
 810888a:	bf04      	itt	eq
 810888c:	1949      	addeq	r1, r1, r5
 810888e:	6021      	streq	r1, [r4, #0]
 8108890:	6054      	str	r4, [r2, #4]
 8108892:	e7ca      	b.n	810882a <_free_r+0x26>
 8108894:	b003      	add	sp, #12
 8108896:	bd30      	pop	{r4, r5, pc}
 8108898:	1000043c 	.word	0x1000043c

0810889c <malloc>:
 810889c:	4b02      	ldr	r3, [pc, #8]	; (81088a8 <malloc+0xc>)
 810889e:	4601      	mov	r1, r0
 81088a0:	6818      	ldr	r0, [r3, #0]
 81088a2:	f000 b823 	b.w	81088ec <_malloc_r>
 81088a6:	bf00      	nop
 81088a8:	10000078 	.word	0x10000078

081088ac <sbrk_aligned>:
 81088ac:	b570      	push	{r4, r5, r6, lr}
 81088ae:	4e0e      	ldr	r6, [pc, #56]	; (81088e8 <sbrk_aligned+0x3c>)
 81088b0:	460c      	mov	r4, r1
 81088b2:	6831      	ldr	r1, [r6, #0]
 81088b4:	4605      	mov	r5, r0
 81088b6:	b911      	cbnz	r1, 81088be <sbrk_aligned+0x12>
 81088b8:	f001 ffe2 	bl	810a880 <_sbrk_r>
 81088bc:	6030      	str	r0, [r6, #0]
 81088be:	4621      	mov	r1, r4
 81088c0:	4628      	mov	r0, r5
 81088c2:	f001 ffdd 	bl	810a880 <_sbrk_r>
 81088c6:	1c43      	adds	r3, r0, #1
 81088c8:	d00a      	beq.n	81088e0 <sbrk_aligned+0x34>
 81088ca:	1cc4      	adds	r4, r0, #3
 81088cc:	f024 0403 	bic.w	r4, r4, #3
 81088d0:	42a0      	cmp	r0, r4
 81088d2:	d007      	beq.n	81088e4 <sbrk_aligned+0x38>
 81088d4:	1a21      	subs	r1, r4, r0
 81088d6:	4628      	mov	r0, r5
 81088d8:	f001 ffd2 	bl	810a880 <_sbrk_r>
 81088dc:	3001      	adds	r0, #1
 81088de:	d101      	bne.n	81088e4 <sbrk_aligned+0x38>
 81088e0:	f04f 34ff 	mov.w	r4, #4294967295
 81088e4:	4620      	mov	r0, r4
 81088e6:	bd70      	pop	{r4, r5, r6, pc}
 81088e8:	10000440 	.word	0x10000440

081088ec <_malloc_r>:
 81088ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81088f0:	1ccd      	adds	r5, r1, #3
 81088f2:	f025 0503 	bic.w	r5, r5, #3
 81088f6:	3508      	adds	r5, #8
 81088f8:	2d0c      	cmp	r5, #12
 81088fa:	bf38      	it	cc
 81088fc:	250c      	movcc	r5, #12
 81088fe:	2d00      	cmp	r5, #0
 8108900:	4607      	mov	r7, r0
 8108902:	db01      	blt.n	8108908 <_malloc_r+0x1c>
 8108904:	42a9      	cmp	r1, r5
 8108906:	d905      	bls.n	8108914 <_malloc_r+0x28>
 8108908:	230c      	movs	r3, #12
 810890a:	603b      	str	r3, [r7, #0]
 810890c:	2600      	movs	r6, #0
 810890e:	4630      	mov	r0, r6
 8108910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8108914:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 81089e8 <_malloc_r+0xfc>
 8108918:	f000 f868 	bl	81089ec <__malloc_lock>
 810891c:	f8d8 3000 	ldr.w	r3, [r8]
 8108920:	461c      	mov	r4, r3
 8108922:	bb5c      	cbnz	r4, 810897c <_malloc_r+0x90>
 8108924:	4629      	mov	r1, r5
 8108926:	4638      	mov	r0, r7
 8108928:	f7ff ffc0 	bl	81088ac <sbrk_aligned>
 810892c:	1c43      	adds	r3, r0, #1
 810892e:	4604      	mov	r4, r0
 8108930:	d155      	bne.n	81089de <_malloc_r+0xf2>
 8108932:	f8d8 4000 	ldr.w	r4, [r8]
 8108936:	4626      	mov	r6, r4
 8108938:	2e00      	cmp	r6, #0
 810893a:	d145      	bne.n	81089c8 <_malloc_r+0xdc>
 810893c:	2c00      	cmp	r4, #0
 810893e:	d048      	beq.n	81089d2 <_malloc_r+0xe6>
 8108940:	6823      	ldr	r3, [r4, #0]
 8108942:	4631      	mov	r1, r6
 8108944:	4638      	mov	r0, r7
 8108946:	eb04 0903 	add.w	r9, r4, r3
 810894a:	f001 ff99 	bl	810a880 <_sbrk_r>
 810894e:	4581      	cmp	r9, r0
 8108950:	d13f      	bne.n	81089d2 <_malloc_r+0xe6>
 8108952:	6821      	ldr	r1, [r4, #0]
 8108954:	1a6d      	subs	r5, r5, r1
 8108956:	4629      	mov	r1, r5
 8108958:	4638      	mov	r0, r7
 810895a:	f7ff ffa7 	bl	81088ac <sbrk_aligned>
 810895e:	3001      	adds	r0, #1
 8108960:	d037      	beq.n	81089d2 <_malloc_r+0xe6>
 8108962:	6823      	ldr	r3, [r4, #0]
 8108964:	442b      	add	r3, r5
 8108966:	6023      	str	r3, [r4, #0]
 8108968:	f8d8 3000 	ldr.w	r3, [r8]
 810896c:	2b00      	cmp	r3, #0
 810896e:	d038      	beq.n	81089e2 <_malloc_r+0xf6>
 8108970:	685a      	ldr	r2, [r3, #4]
 8108972:	42a2      	cmp	r2, r4
 8108974:	d12b      	bne.n	81089ce <_malloc_r+0xe2>
 8108976:	2200      	movs	r2, #0
 8108978:	605a      	str	r2, [r3, #4]
 810897a:	e00f      	b.n	810899c <_malloc_r+0xb0>
 810897c:	6822      	ldr	r2, [r4, #0]
 810897e:	1b52      	subs	r2, r2, r5
 8108980:	d41f      	bmi.n	81089c2 <_malloc_r+0xd6>
 8108982:	2a0b      	cmp	r2, #11
 8108984:	d917      	bls.n	81089b6 <_malloc_r+0xca>
 8108986:	1961      	adds	r1, r4, r5
 8108988:	42a3      	cmp	r3, r4
 810898a:	6025      	str	r5, [r4, #0]
 810898c:	bf18      	it	ne
 810898e:	6059      	strne	r1, [r3, #4]
 8108990:	6863      	ldr	r3, [r4, #4]
 8108992:	bf08      	it	eq
 8108994:	f8c8 1000 	streq.w	r1, [r8]
 8108998:	5162      	str	r2, [r4, r5]
 810899a:	604b      	str	r3, [r1, #4]
 810899c:	4638      	mov	r0, r7
 810899e:	f104 060b 	add.w	r6, r4, #11
 81089a2:	f000 f829 	bl	81089f8 <__malloc_unlock>
 81089a6:	f026 0607 	bic.w	r6, r6, #7
 81089aa:	1d23      	adds	r3, r4, #4
 81089ac:	1af2      	subs	r2, r6, r3
 81089ae:	d0ae      	beq.n	810890e <_malloc_r+0x22>
 81089b0:	1b9b      	subs	r3, r3, r6
 81089b2:	50a3      	str	r3, [r4, r2]
 81089b4:	e7ab      	b.n	810890e <_malloc_r+0x22>
 81089b6:	42a3      	cmp	r3, r4
 81089b8:	6862      	ldr	r2, [r4, #4]
 81089ba:	d1dd      	bne.n	8108978 <_malloc_r+0x8c>
 81089bc:	f8c8 2000 	str.w	r2, [r8]
 81089c0:	e7ec      	b.n	810899c <_malloc_r+0xb0>
 81089c2:	4623      	mov	r3, r4
 81089c4:	6864      	ldr	r4, [r4, #4]
 81089c6:	e7ac      	b.n	8108922 <_malloc_r+0x36>
 81089c8:	4634      	mov	r4, r6
 81089ca:	6876      	ldr	r6, [r6, #4]
 81089cc:	e7b4      	b.n	8108938 <_malloc_r+0x4c>
 81089ce:	4613      	mov	r3, r2
 81089d0:	e7cc      	b.n	810896c <_malloc_r+0x80>
 81089d2:	230c      	movs	r3, #12
 81089d4:	603b      	str	r3, [r7, #0]
 81089d6:	4638      	mov	r0, r7
 81089d8:	f000 f80e 	bl	81089f8 <__malloc_unlock>
 81089dc:	e797      	b.n	810890e <_malloc_r+0x22>
 81089de:	6025      	str	r5, [r4, #0]
 81089e0:	e7dc      	b.n	810899c <_malloc_r+0xb0>
 81089e2:	605b      	str	r3, [r3, #4]
 81089e4:	deff      	udf	#255	; 0xff
 81089e6:	bf00      	nop
 81089e8:	1000043c 	.word	0x1000043c

081089ec <__malloc_lock>:
 81089ec:	4801      	ldr	r0, [pc, #4]	; (81089f4 <__malloc_lock+0x8>)
 81089ee:	f7ff b876 	b.w	8107ade <__retarget_lock_acquire_recursive>
 81089f2:	bf00      	nop
 81089f4:	10000438 	.word	0x10000438

081089f8 <__malloc_unlock>:
 81089f8:	4801      	ldr	r0, [pc, #4]	; (8108a00 <__malloc_unlock+0x8>)
 81089fa:	f7ff b871 	b.w	8107ae0 <__retarget_lock_release_recursive>
 81089fe:	bf00      	nop
 8108a00:	10000438 	.word	0x10000438

08108a04 <_Balloc>:
 8108a04:	b570      	push	{r4, r5, r6, lr}
 8108a06:	69c6      	ldr	r6, [r0, #28]
 8108a08:	4604      	mov	r4, r0
 8108a0a:	460d      	mov	r5, r1
 8108a0c:	b976      	cbnz	r6, 8108a2c <_Balloc+0x28>
 8108a0e:	2010      	movs	r0, #16
 8108a10:	f7ff ff44 	bl	810889c <malloc>
 8108a14:	4602      	mov	r2, r0
 8108a16:	61e0      	str	r0, [r4, #28]
 8108a18:	b920      	cbnz	r0, 8108a24 <_Balloc+0x20>
 8108a1a:	4b18      	ldr	r3, [pc, #96]	; (8108a7c <_Balloc+0x78>)
 8108a1c:	4818      	ldr	r0, [pc, #96]	; (8108a80 <_Balloc+0x7c>)
 8108a1e:	216b      	movs	r1, #107	; 0x6b
 8108a20:	f001 ff46 	bl	810a8b0 <__assert_func>
 8108a24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8108a28:	6006      	str	r6, [r0, #0]
 8108a2a:	60c6      	str	r6, [r0, #12]
 8108a2c:	69e6      	ldr	r6, [r4, #28]
 8108a2e:	68f3      	ldr	r3, [r6, #12]
 8108a30:	b183      	cbz	r3, 8108a54 <_Balloc+0x50>
 8108a32:	69e3      	ldr	r3, [r4, #28]
 8108a34:	68db      	ldr	r3, [r3, #12]
 8108a36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8108a3a:	b9b8      	cbnz	r0, 8108a6c <_Balloc+0x68>
 8108a3c:	2101      	movs	r1, #1
 8108a3e:	fa01 f605 	lsl.w	r6, r1, r5
 8108a42:	1d72      	adds	r2, r6, #5
 8108a44:	0092      	lsls	r2, r2, #2
 8108a46:	4620      	mov	r0, r4
 8108a48:	f001 ff50 	bl	810a8ec <_calloc_r>
 8108a4c:	b160      	cbz	r0, 8108a68 <_Balloc+0x64>
 8108a4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8108a52:	e00e      	b.n	8108a72 <_Balloc+0x6e>
 8108a54:	2221      	movs	r2, #33	; 0x21
 8108a56:	2104      	movs	r1, #4
 8108a58:	4620      	mov	r0, r4
 8108a5a:	f001 ff47 	bl	810a8ec <_calloc_r>
 8108a5e:	69e3      	ldr	r3, [r4, #28]
 8108a60:	60f0      	str	r0, [r6, #12]
 8108a62:	68db      	ldr	r3, [r3, #12]
 8108a64:	2b00      	cmp	r3, #0
 8108a66:	d1e4      	bne.n	8108a32 <_Balloc+0x2e>
 8108a68:	2000      	movs	r0, #0
 8108a6a:	bd70      	pop	{r4, r5, r6, pc}
 8108a6c:	6802      	ldr	r2, [r0, #0]
 8108a6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8108a72:	2300      	movs	r3, #0
 8108a74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8108a78:	e7f7      	b.n	8108a6a <_Balloc+0x66>
 8108a7a:	bf00      	nop
 8108a7c:	0810b79a 	.word	0x0810b79a
 8108a80:	0810b81a 	.word	0x0810b81a

08108a84 <_Bfree>:
 8108a84:	b570      	push	{r4, r5, r6, lr}
 8108a86:	69c6      	ldr	r6, [r0, #28]
 8108a88:	4605      	mov	r5, r0
 8108a8a:	460c      	mov	r4, r1
 8108a8c:	b976      	cbnz	r6, 8108aac <_Bfree+0x28>
 8108a8e:	2010      	movs	r0, #16
 8108a90:	f7ff ff04 	bl	810889c <malloc>
 8108a94:	4602      	mov	r2, r0
 8108a96:	61e8      	str	r0, [r5, #28]
 8108a98:	b920      	cbnz	r0, 8108aa4 <_Bfree+0x20>
 8108a9a:	4b09      	ldr	r3, [pc, #36]	; (8108ac0 <_Bfree+0x3c>)
 8108a9c:	4809      	ldr	r0, [pc, #36]	; (8108ac4 <_Bfree+0x40>)
 8108a9e:	218f      	movs	r1, #143	; 0x8f
 8108aa0:	f001 ff06 	bl	810a8b0 <__assert_func>
 8108aa4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8108aa8:	6006      	str	r6, [r0, #0]
 8108aaa:	60c6      	str	r6, [r0, #12]
 8108aac:	b13c      	cbz	r4, 8108abe <_Bfree+0x3a>
 8108aae:	69eb      	ldr	r3, [r5, #28]
 8108ab0:	6862      	ldr	r2, [r4, #4]
 8108ab2:	68db      	ldr	r3, [r3, #12]
 8108ab4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8108ab8:	6021      	str	r1, [r4, #0]
 8108aba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8108abe:	bd70      	pop	{r4, r5, r6, pc}
 8108ac0:	0810b79a 	.word	0x0810b79a
 8108ac4:	0810b81a 	.word	0x0810b81a

08108ac8 <__multadd>:
 8108ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8108acc:	690d      	ldr	r5, [r1, #16]
 8108ace:	4607      	mov	r7, r0
 8108ad0:	460c      	mov	r4, r1
 8108ad2:	461e      	mov	r6, r3
 8108ad4:	f101 0c14 	add.w	ip, r1, #20
 8108ad8:	2000      	movs	r0, #0
 8108ada:	f8dc 3000 	ldr.w	r3, [ip]
 8108ade:	b299      	uxth	r1, r3
 8108ae0:	fb02 6101 	mla	r1, r2, r1, r6
 8108ae4:	0c1e      	lsrs	r6, r3, #16
 8108ae6:	0c0b      	lsrs	r3, r1, #16
 8108ae8:	fb02 3306 	mla	r3, r2, r6, r3
 8108aec:	b289      	uxth	r1, r1
 8108aee:	3001      	adds	r0, #1
 8108af0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8108af4:	4285      	cmp	r5, r0
 8108af6:	f84c 1b04 	str.w	r1, [ip], #4
 8108afa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8108afe:	dcec      	bgt.n	8108ada <__multadd+0x12>
 8108b00:	b30e      	cbz	r6, 8108b46 <__multadd+0x7e>
 8108b02:	68a3      	ldr	r3, [r4, #8]
 8108b04:	42ab      	cmp	r3, r5
 8108b06:	dc19      	bgt.n	8108b3c <__multadd+0x74>
 8108b08:	6861      	ldr	r1, [r4, #4]
 8108b0a:	4638      	mov	r0, r7
 8108b0c:	3101      	adds	r1, #1
 8108b0e:	f7ff ff79 	bl	8108a04 <_Balloc>
 8108b12:	4680      	mov	r8, r0
 8108b14:	b928      	cbnz	r0, 8108b22 <__multadd+0x5a>
 8108b16:	4602      	mov	r2, r0
 8108b18:	4b0c      	ldr	r3, [pc, #48]	; (8108b4c <__multadd+0x84>)
 8108b1a:	480d      	ldr	r0, [pc, #52]	; (8108b50 <__multadd+0x88>)
 8108b1c:	21ba      	movs	r1, #186	; 0xba
 8108b1e:	f001 fec7 	bl	810a8b0 <__assert_func>
 8108b22:	6922      	ldr	r2, [r4, #16]
 8108b24:	3202      	adds	r2, #2
 8108b26:	f104 010c 	add.w	r1, r4, #12
 8108b2a:	0092      	lsls	r2, r2, #2
 8108b2c:	300c      	adds	r0, #12
 8108b2e:	f7fe ffd8 	bl	8107ae2 <memcpy>
 8108b32:	4621      	mov	r1, r4
 8108b34:	4638      	mov	r0, r7
 8108b36:	f7ff ffa5 	bl	8108a84 <_Bfree>
 8108b3a:	4644      	mov	r4, r8
 8108b3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8108b40:	3501      	adds	r5, #1
 8108b42:	615e      	str	r6, [r3, #20]
 8108b44:	6125      	str	r5, [r4, #16]
 8108b46:	4620      	mov	r0, r4
 8108b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8108b4c:	0810b809 	.word	0x0810b809
 8108b50:	0810b81a 	.word	0x0810b81a

08108b54 <__s2b>:
 8108b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8108b58:	460c      	mov	r4, r1
 8108b5a:	4615      	mov	r5, r2
 8108b5c:	461f      	mov	r7, r3
 8108b5e:	2209      	movs	r2, #9
 8108b60:	3308      	adds	r3, #8
 8108b62:	4606      	mov	r6, r0
 8108b64:	fb93 f3f2 	sdiv	r3, r3, r2
 8108b68:	2100      	movs	r1, #0
 8108b6a:	2201      	movs	r2, #1
 8108b6c:	429a      	cmp	r2, r3
 8108b6e:	db09      	blt.n	8108b84 <__s2b+0x30>
 8108b70:	4630      	mov	r0, r6
 8108b72:	f7ff ff47 	bl	8108a04 <_Balloc>
 8108b76:	b940      	cbnz	r0, 8108b8a <__s2b+0x36>
 8108b78:	4602      	mov	r2, r0
 8108b7a:	4b19      	ldr	r3, [pc, #100]	; (8108be0 <__s2b+0x8c>)
 8108b7c:	4819      	ldr	r0, [pc, #100]	; (8108be4 <__s2b+0x90>)
 8108b7e:	21d3      	movs	r1, #211	; 0xd3
 8108b80:	f001 fe96 	bl	810a8b0 <__assert_func>
 8108b84:	0052      	lsls	r2, r2, #1
 8108b86:	3101      	adds	r1, #1
 8108b88:	e7f0      	b.n	8108b6c <__s2b+0x18>
 8108b8a:	9b08      	ldr	r3, [sp, #32]
 8108b8c:	6143      	str	r3, [r0, #20]
 8108b8e:	2d09      	cmp	r5, #9
 8108b90:	f04f 0301 	mov.w	r3, #1
 8108b94:	6103      	str	r3, [r0, #16]
 8108b96:	dd16      	ble.n	8108bc6 <__s2b+0x72>
 8108b98:	f104 0909 	add.w	r9, r4, #9
 8108b9c:	46c8      	mov	r8, r9
 8108b9e:	442c      	add	r4, r5
 8108ba0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8108ba4:	4601      	mov	r1, r0
 8108ba6:	3b30      	subs	r3, #48	; 0x30
 8108ba8:	220a      	movs	r2, #10
 8108baa:	4630      	mov	r0, r6
 8108bac:	f7ff ff8c 	bl	8108ac8 <__multadd>
 8108bb0:	45a0      	cmp	r8, r4
 8108bb2:	d1f5      	bne.n	8108ba0 <__s2b+0x4c>
 8108bb4:	f1a5 0408 	sub.w	r4, r5, #8
 8108bb8:	444c      	add	r4, r9
 8108bba:	1b2d      	subs	r5, r5, r4
 8108bbc:	1963      	adds	r3, r4, r5
 8108bbe:	42bb      	cmp	r3, r7
 8108bc0:	db04      	blt.n	8108bcc <__s2b+0x78>
 8108bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8108bc6:	340a      	adds	r4, #10
 8108bc8:	2509      	movs	r5, #9
 8108bca:	e7f6      	b.n	8108bba <__s2b+0x66>
 8108bcc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8108bd0:	4601      	mov	r1, r0
 8108bd2:	3b30      	subs	r3, #48	; 0x30
 8108bd4:	220a      	movs	r2, #10
 8108bd6:	4630      	mov	r0, r6
 8108bd8:	f7ff ff76 	bl	8108ac8 <__multadd>
 8108bdc:	e7ee      	b.n	8108bbc <__s2b+0x68>
 8108bde:	bf00      	nop
 8108be0:	0810b809 	.word	0x0810b809
 8108be4:	0810b81a 	.word	0x0810b81a

08108be8 <__hi0bits>:
 8108be8:	0c03      	lsrs	r3, r0, #16
 8108bea:	041b      	lsls	r3, r3, #16
 8108bec:	b9d3      	cbnz	r3, 8108c24 <__hi0bits+0x3c>
 8108bee:	0400      	lsls	r0, r0, #16
 8108bf0:	2310      	movs	r3, #16
 8108bf2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8108bf6:	bf04      	itt	eq
 8108bf8:	0200      	lsleq	r0, r0, #8
 8108bfa:	3308      	addeq	r3, #8
 8108bfc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8108c00:	bf04      	itt	eq
 8108c02:	0100      	lsleq	r0, r0, #4
 8108c04:	3304      	addeq	r3, #4
 8108c06:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8108c0a:	bf04      	itt	eq
 8108c0c:	0080      	lsleq	r0, r0, #2
 8108c0e:	3302      	addeq	r3, #2
 8108c10:	2800      	cmp	r0, #0
 8108c12:	db05      	blt.n	8108c20 <__hi0bits+0x38>
 8108c14:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8108c18:	f103 0301 	add.w	r3, r3, #1
 8108c1c:	bf08      	it	eq
 8108c1e:	2320      	moveq	r3, #32
 8108c20:	4618      	mov	r0, r3
 8108c22:	4770      	bx	lr
 8108c24:	2300      	movs	r3, #0
 8108c26:	e7e4      	b.n	8108bf2 <__hi0bits+0xa>

08108c28 <__lo0bits>:
 8108c28:	6803      	ldr	r3, [r0, #0]
 8108c2a:	f013 0207 	ands.w	r2, r3, #7
 8108c2e:	d00c      	beq.n	8108c4a <__lo0bits+0x22>
 8108c30:	07d9      	lsls	r1, r3, #31
 8108c32:	d422      	bmi.n	8108c7a <__lo0bits+0x52>
 8108c34:	079a      	lsls	r2, r3, #30
 8108c36:	bf49      	itett	mi
 8108c38:	085b      	lsrmi	r3, r3, #1
 8108c3a:	089b      	lsrpl	r3, r3, #2
 8108c3c:	6003      	strmi	r3, [r0, #0]
 8108c3e:	2201      	movmi	r2, #1
 8108c40:	bf5c      	itt	pl
 8108c42:	6003      	strpl	r3, [r0, #0]
 8108c44:	2202      	movpl	r2, #2
 8108c46:	4610      	mov	r0, r2
 8108c48:	4770      	bx	lr
 8108c4a:	b299      	uxth	r1, r3
 8108c4c:	b909      	cbnz	r1, 8108c52 <__lo0bits+0x2a>
 8108c4e:	0c1b      	lsrs	r3, r3, #16
 8108c50:	2210      	movs	r2, #16
 8108c52:	b2d9      	uxtb	r1, r3
 8108c54:	b909      	cbnz	r1, 8108c5a <__lo0bits+0x32>
 8108c56:	3208      	adds	r2, #8
 8108c58:	0a1b      	lsrs	r3, r3, #8
 8108c5a:	0719      	lsls	r1, r3, #28
 8108c5c:	bf04      	itt	eq
 8108c5e:	091b      	lsreq	r3, r3, #4
 8108c60:	3204      	addeq	r2, #4
 8108c62:	0799      	lsls	r1, r3, #30
 8108c64:	bf04      	itt	eq
 8108c66:	089b      	lsreq	r3, r3, #2
 8108c68:	3202      	addeq	r2, #2
 8108c6a:	07d9      	lsls	r1, r3, #31
 8108c6c:	d403      	bmi.n	8108c76 <__lo0bits+0x4e>
 8108c6e:	085b      	lsrs	r3, r3, #1
 8108c70:	f102 0201 	add.w	r2, r2, #1
 8108c74:	d003      	beq.n	8108c7e <__lo0bits+0x56>
 8108c76:	6003      	str	r3, [r0, #0]
 8108c78:	e7e5      	b.n	8108c46 <__lo0bits+0x1e>
 8108c7a:	2200      	movs	r2, #0
 8108c7c:	e7e3      	b.n	8108c46 <__lo0bits+0x1e>
 8108c7e:	2220      	movs	r2, #32
 8108c80:	e7e1      	b.n	8108c46 <__lo0bits+0x1e>
	...

08108c84 <__i2b>:
 8108c84:	b510      	push	{r4, lr}
 8108c86:	460c      	mov	r4, r1
 8108c88:	2101      	movs	r1, #1
 8108c8a:	f7ff febb 	bl	8108a04 <_Balloc>
 8108c8e:	4602      	mov	r2, r0
 8108c90:	b928      	cbnz	r0, 8108c9e <__i2b+0x1a>
 8108c92:	4b05      	ldr	r3, [pc, #20]	; (8108ca8 <__i2b+0x24>)
 8108c94:	4805      	ldr	r0, [pc, #20]	; (8108cac <__i2b+0x28>)
 8108c96:	f240 1145 	movw	r1, #325	; 0x145
 8108c9a:	f001 fe09 	bl	810a8b0 <__assert_func>
 8108c9e:	2301      	movs	r3, #1
 8108ca0:	6144      	str	r4, [r0, #20]
 8108ca2:	6103      	str	r3, [r0, #16]
 8108ca4:	bd10      	pop	{r4, pc}
 8108ca6:	bf00      	nop
 8108ca8:	0810b809 	.word	0x0810b809
 8108cac:	0810b81a 	.word	0x0810b81a

08108cb0 <__multiply>:
 8108cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108cb4:	4691      	mov	r9, r2
 8108cb6:	690a      	ldr	r2, [r1, #16]
 8108cb8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8108cbc:	429a      	cmp	r2, r3
 8108cbe:	bfb8      	it	lt
 8108cc0:	460b      	movlt	r3, r1
 8108cc2:	460c      	mov	r4, r1
 8108cc4:	bfbc      	itt	lt
 8108cc6:	464c      	movlt	r4, r9
 8108cc8:	4699      	movlt	r9, r3
 8108cca:	6927      	ldr	r7, [r4, #16]
 8108ccc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8108cd0:	68a3      	ldr	r3, [r4, #8]
 8108cd2:	6861      	ldr	r1, [r4, #4]
 8108cd4:	eb07 060a 	add.w	r6, r7, sl
 8108cd8:	42b3      	cmp	r3, r6
 8108cda:	b085      	sub	sp, #20
 8108cdc:	bfb8      	it	lt
 8108cde:	3101      	addlt	r1, #1
 8108ce0:	f7ff fe90 	bl	8108a04 <_Balloc>
 8108ce4:	b930      	cbnz	r0, 8108cf4 <__multiply+0x44>
 8108ce6:	4602      	mov	r2, r0
 8108ce8:	4b44      	ldr	r3, [pc, #272]	; (8108dfc <__multiply+0x14c>)
 8108cea:	4845      	ldr	r0, [pc, #276]	; (8108e00 <__multiply+0x150>)
 8108cec:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8108cf0:	f001 fdde 	bl	810a8b0 <__assert_func>
 8108cf4:	f100 0514 	add.w	r5, r0, #20
 8108cf8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8108cfc:	462b      	mov	r3, r5
 8108cfe:	2200      	movs	r2, #0
 8108d00:	4543      	cmp	r3, r8
 8108d02:	d321      	bcc.n	8108d48 <__multiply+0x98>
 8108d04:	f104 0314 	add.w	r3, r4, #20
 8108d08:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8108d0c:	f109 0314 	add.w	r3, r9, #20
 8108d10:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8108d14:	9202      	str	r2, [sp, #8]
 8108d16:	1b3a      	subs	r2, r7, r4
 8108d18:	3a15      	subs	r2, #21
 8108d1a:	f022 0203 	bic.w	r2, r2, #3
 8108d1e:	3204      	adds	r2, #4
 8108d20:	f104 0115 	add.w	r1, r4, #21
 8108d24:	428f      	cmp	r7, r1
 8108d26:	bf38      	it	cc
 8108d28:	2204      	movcc	r2, #4
 8108d2a:	9201      	str	r2, [sp, #4]
 8108d2c:	9a02      	ldr	r2, [sp, #8]
 8108d2e:	9303      	str	r3, [sp, #12]
 8108d30:	429a      	cmp	r2, r3
 8108d32:	d80c      	bhi.n	8108d4e <__multiply+0x9e>
 8108d34:	2e00      	cmp	r6, #0
 8108d36:	dd03      	ble.n	8108d40 <__multiply+0x90>
 8108d38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8108d3c:	2b00      	cmp	r3, #0
 8108d3e:	d05b      	beq.n	8108df8 <__multiply+0x148>
 8108d40:	6106      	str	r6, [r0, #16]
 8108d42:	b005      	add	sp, #20
 8108d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108d48:	f843 2b04 	str.w	r2, [r3], #4
 8108d4c:	e7d8      	b.n	8108d00 <__multiply+0x50>
 8108d4e:	f8b3 a000 	ldrh.w	sl, [r3]
 8108d52:	f1ba 0f00 	cmp.w	sl, #0
 8108d56:	d024      	beq.n	8108da2 <__multiply+0xf2>
 8108d58:	f104 0e14 	add.w	lr, r4, #20
 8108d5c:	46a9      	mov	r9, r5
 8108d5e:	f04f 0c00 	mov.w	ip, #0
 8108d62:	f85e 2b04 	ldr.w	r2, [lr], #4
 8108d66:	f8d9 1000 	ldr.w	r1, [r9]
 8108d6a:	fa1f fb82 	uxth.w	fp, r2
 8108d6e:	b289      	uxth	r1, r1
 8108d70:	fb0a 110b 	mla	r1, sl, fp, r1
 8108d74:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8108d78:	f8d9 2000 	ldr.w	r2, [r9]
 8108d7c:	4461      	add	r1, ip
 8108d7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8108d82:	fb0a c20b 	mla	r2, sl, fp, ip
 8108d86:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8108d8a:	b289      	uxth	r1, r1
 8108d8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8108d90:	4577      	cmp	r7, lr
 8108d92:	f849 1b04 	str.w	r1, [r9], #4
 8108d96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8108d9a:	d8e2      	bhi.n	8108d62 <__multiply+0xb2>
 8108d9c:	9a01      	ldr	r2, [sp, #4]
 8108d9e:	f845 c002 	str.w	ip, [r5, r2]
 8108da2:	9a03      	ldr	r2, [sp, #12]
 8108da4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8108da8:	3304      	adds	r3, #4
 8108daa:	f1b9 0f00 	cmp.w	r9, #0
 8108dae:	d021      	beq.n	8108df4 <__multiply+0x144>
 8108db0:	6829      	ldr	r1, [r5, #0]
 8108db2:	f104 0c14 	add.w	ip, r4, #20
 8108db6:	46ae      	mov	lr, r5
 8108db8:	f04f 0a00 	mov.w	sl, #0
 8108dbc:	f8bc b000 	ldrh.w	fp, [ip]
 8108dc0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8108dc4:	fb09 220b 	mla	r2, r9, fp, r2
 8108dc8:	4452      	add	r2, sl
 8108dca:	b289      	uxth	r1, r1
 8108dcc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8108dd0:	f84e 1b04 	str.w	r1, [lr], #4
 8108dd4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8108dd8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8108ddc:	f8be 1000 	ldrh.w	r1, [lr]
 8108de0:	fb09 110a 	mla	r1, r9, sl, r1
 8108de4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8108de8:	4567      	cmp	r7, ip
 8108dea:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8108dee:	d8e5      	bhi.n	8108dbc <__multiply+0x10c>
 8108df0:	9a01      	ldr	r2, [sp, #4]
 8108df2:	50a9      	str	r1, [r5, r2]
 8108df4:	3504      	adds	r5, #4
 8108df6:	e799      	b.n	8108d2c <__multiply+0x7c>
 8108df8:	3e01      	subs	r6, #1
 8108dfa:	e79b      	b.n	8108d34 <__multiply+0x84>
 8108dfc:	0810b809 	.word	0x0810b809
 8108e00:	0810b81a 	.word	0x0810b81a

08108e04 <__pow5mult>:
 8108e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8108e08:	4615      	mov	r5, r2
 8108e0a:	f012 0203 	ands.w	r2, r2, #3
 8108e0e:	4606      	mov	r6, r0
 8108e10:	460f      	mov	r7, r1
 8108e12:	d007      	beq.n	8108e24 <__pow5mult+0x20>
 8108e14:	4c25      	ldr	r4, [pc, #148]	; (8108eac <__pow5mult+0xa8>)
 8108e16:	3a01      	subs	r2, #1
 8108e18:	2300      	movs	r3, #0
 8108e1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8108e1e:	f7ff fe53 	bl	8108ac8 <__multadd>
 8108e22:	4607      	mov	r7, r0
 8108e24:	10ad      	asrs	r5, r5, #2
 8108e26:	d03d      	beq.n	8108ea4 <__pow5mult+0xa0>
 8108e28:	69f4      	ldr	r4, [r6, #28]
 8108e2a:	b97c      	cbnz	r4, 8108e4c <__pow5mult+0x48>
 8108e2c:	2010      	movs	r0, #16
 8108e2e:	f7ff fd35 	bl	810889c <malloc>
 8108e32:	4602      	mov	r2, r0
 8108e34:	61f0      	str	r0, [r6, #28]
 8108e36:	b928      	cbnz	r0, 8108e44 <__pow5mult+0x40>
 8108e38:	4b1d      	ldr	r3, [pc, #116]	; (8108eb0 <__pow5mult+0xac>)
 8108e3a:	481e      	ldr	r0, [pc, #120]	; (8108eb4 <__pow5mult+0xb0>)
 8108e3c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8108e40:	f001 fd36 	bl	810a8b0 <__assert_func>
 8108e44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8108e48:	6004      	str	r4, [r0, #0]
 8108e4a:	60c4      	str	r4, [r0, #12]
 8108e4c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8108e50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8108e54:	b94c      	cbnz	r4, 8108e6a <__pow5mult+0x66>
 8108e56:	f240 2171 	movw	r1, #625	; 0x271
 8108e5a:	4630      	mov	r0, r6
 8108e5c:	f7ff ff12 	bl	8108c84 <__i2b>
 8108e60:	2300      	movs	r3, #0
 8108e62:	f8c8 0008 	str.w	r0, [r8, #8]
 8108e66:	4604      	mov	r4, r0
 8108e68:	6003      	str	r3, [r0, #0]
 8108e6a:	f04f 0900 	mov.w	r9, #0
 8108e6e:	07eb      	lsls	r3, r5, #31
 8108e70:	d50a      	bpl.n	8108e88 <__pow5mult+0x84>
 8108e72:	4639      	mov	r1, r7
 8108e74:	4622      	mov	r2, r4
 8108e76:	4630      	mov	r0, r6
 8108e78:	f7ff ff1a 	bl	8108cb0 <__multiply>
 8108e7c:	4639      	mov	r1, r7
 8108e7e:	4680      	mov	r8, r0
 8108e80:	4630      	mov	r0, r6
 8108e82:	f7ff fdff 	bl	8108a84 <_Bfree>
 8108e86:	4647      	mov	r7, r8
 8108e88:	106d      	asrs	r5, r5, #1
 8108e8a:	d00b      	beq.n	8108ea4 <__pow5mult+0xa0>
 8108e8c:	6820      	ldr	r0, [r4, #0]
 8108e8e:	b938      	cbnz	r0, 8108ea0 <__pow5mult+0x9c>
 8108e90:	4622      	mov	r2, r4
 8108e92:	4621      	mov	r1, r4
 8108e94:	4630      	mov	r0, r6
 8108e96:	f7ff ff0b 	bl	8108cb0 <__multiply>
 8108e9a:	6020      	str	r0, [r4, #0]
 8108e9c:	f8c0 9000 	str.w	r9, [r0]
 8108ea0:	4604      	mov	r4, r0
 8108ea2:	e7e4      	b.n	8108e6e <__pow5mult+0x6a>
 8108ea4:	4638      	mov	r0, r7
 8108ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8108eaa:	bf00      	nop
 8108eac:	0810b968 	.word	0x0810b968
 8108eb0:	0810b79a 	.word	0x0810b79a
 8108eb4:	0810b81a 	.word	0x0810b81a

08108eb8 <__lshift>:
 8108eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8108ebc:	460c      	mov	r4, r1
 8108ebe:	6849      	ldr	r1, [r1, #4]
 8108ec0:	6923      	ldr	r3, [r4, #16]
 8108ec2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8108ec6:	68a3      	ldr	r3, [r4, #8]
 8108ec8:	4607      	mov	r7, r0
 8108eca:	4691      	mov	r9, r2
 8108ecc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8108ed0:	f108 0601 	add.w	r6, r8, #1
 8108ed4:	42b3      	cmp	r3, r6
 8108ed6:	db0b      	blt.n	8108ef0 <__lshift+0x38>
 8108ed8:	4638      	mov	r0, r7
 8108eda:	f7ff fd93 	bl	8108a04 <_Balloc>
 8108ede:	4605      	mov	r5, r0
 8108ee0:	b948      	cbnz	r0, 8108ef6 <__lshift+0x3e>
 8108ee2:	4602      	mov	r2, r0
 8108ee4:	4b28      	ldr	r3, [pc, #160]	; (8108f88 <__lshift+0xd0>)
 8108ee6:	4829      	ldr	r0, [pc, #164]	; (8108f8c <__lshift+0xd4>)
 8108ee8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8108eec:	f001 fce0 	bl	810a8b0 <__assert_func>
 8108ef0:	3101      	adds	r1, #1
 8108ef2:	005b      	lsls	r3, r3, #1
 8108ef4:	e7ee      	b.n	8108ed4 <__lshift+0x1c>
 8108ef6:	2300      	movs	r3, #0
 8108ef8:	f100 0114 	add.w	r1, r0, #20
 8108efc:	f100 0210 	add.w	r2, r0, #16
 8108f00:	4618      	mov	r0, r3
 8108f02:	4553      	cmp	r3, sl
 8108f04:	db33      	blt.n	8108f6e <__lshift+0xb6>
 8108f06:	6920      	ldr	r0, [r4, #16]
 8108f08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8108f0c:	f104 0314 	add.w	r3, r4, #20
 8108f10:	f019 091f 	ands.w	r9, r9, #31
 8108f14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8108f18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8108f1c:	d02b      	beq.n	8108f76 <__lshift+0xbe>
 8108f1e:	f1c9 0e20 	rsb	lr, r9, #32
 8108f22:	468a      	mov	sl, r1
 8108f24:	2200      	movs	r2, #0
 8108f26:	6818      	ldr	r0, [r3, #0]
 8108f28:	fa00 f009 	lsl.w	r0, r0, r9
 8108f2c:	4310      	orrs	r0, r2
 8108f2e:	f84a 0b04 	str.w	r0, [sl], #4
 8108f32:	f853 2b04 	ldr.w	r2, [r3], #4
 8108f36:	459c      	cmp	ip, r3
 8108f38:	fa22 f20e 	lsr.w	r2, r2, lr
 8108f3c:	d8f3      	bhi.n	8108f26 <__lshift+0x6e>
 8108f3e:	ebac 0304 	sub.w	r3, ip, r4
 8108f42:	3b15      	subs	r3, #21
 8108f44:	f023 0303 	bic.w	r3, r3, #3
 8108f48:	3304      	adds	r3, #4
 8108f4a:	f104 0015 	add.w	r0, r4, #21
 8108f4e:	4584      	cmp	ip, r0
 8108f50:	bf38      	it	cc
 8108f52:	2304      	movcc	r3, #4
 8108f54:	50ca      	str	r2, [r1, r3]
 8108f56:	b10a      	cbz	r2, 8108f5c <__lshift+0xa4>
 8108f58:	f108 0602 	add.w	r6, r8, #2
 8108f5c:	3e01      	subs	r6, #1
 8108f5e:	4638      	mov	r0, r7
 8108f60:	612e      	str	r6, [r5, #16]
 8108f62:	4621      	mov	r1, r4
 8108f64:	f7ff fd8e 	bl	8108a84 <_Bfree>
 8108f68:	4628      	mov	r0, r5
 8108f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8108f6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8108f72:	3301      	adds	r3, #1
 8108f74:	e7c5      	b.n	8108f02 <__lshift+0x4a>
 8108f76:	3904      	subs	r1, #4
 8108f78:	f853 2b04 	ldr.w	r2, [r3], #4
 8108f7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8108f80:	459c      	cmp	ip, r3
 8108f82:	d8f9      	bhi.n	8108f78 <__lshift+0xc0>
 8108f84:	e7ea      	b.n	8108f5c <__lshift+0xa4>
 8108f86:	bf00      	nop
 8108f88:	0810b809 	.word	0x0810b809
 8108f8c:	0810b81a 	.word	0x0810b81a

08108f90 <__mcmp>:
 8108f90:	b530      	push	{r4, r5, lr}
 8108f92:	6902      	ldr	r2, [r0, #16]
 8108f94:	690c      	ldr	r4, [r1, #16]
 8108f96:	1b12      	subs	r2, r2, r4
 8108f98:	d10e      	bne.n	8108fb8 <__mcmp+0x28>
 8108f9a:	f100 0314 	add.w	r3, r0, #20
 8108f9e:	3114      	adds	r1, #20
 8108fa0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8108fa4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8108fa8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8108fac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8108fb0:	42a5      	cmp	r5, r4
 8108fb2:	d003      	beq.n	8108fbc <__mcmp+0x2c>
 8108fb4:	d305      	bcc.n	8108fc2 <__mcmp+0x32>
 8108fb6:	2201      	movs	r2, #1
 8108fb8:	4610      	mov	r0, r2
 8108fba:	bd30      	pop	{r4, r5, pc}
 8108fbc:	4283      	cmp	r3, r0
 8108fbe:	d3f3      	bcc.n	8108fa8 <__mcmp+0x18>
 8108fc0:	e7fa      	b.n	8108fb8 <__mcmp+0x28>
 8108fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8108fc6:	e7f7      	b.n	8108fb8 <__mcmp+0x28>

08108fc8 <__mdiff>:
 8108fc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108fcc:	460c      	mov	r4, r1
 8108fce:	4606      	mov	r6, r0
 8108fd0:	4611      	mov	r1, r2
 8108fd2:	4620      	mov	r0, r4
 8108fd4:	4690      	mov	r8, r2
 8108fd6:	f7ff ffdb 	bl	8108f90 <__mcmp>
 8108fda:	1e05      	subs	r5, r0, #0
 8108fdc:	d110      	bne.n	8109000 <__mdiff+0x38>
 8108fde:	4629      	mov	r1, r5
 8108fe0:	4630      	mov	r0, r6
 8108fe2:	f7ff fd0f 	bl	8108a04 <_Balloc>
 8108fe6:	b930      	cbnz	r0, 8108ff6 <__mdiff+0x2e>
 8108fe8:	4b3a      	ldr	r3, [pc, #232]	; (81090d4 <__mdiff+0x10c>)
 8108fea:	4602      	mov	r2, r0
 8108fec:	f240 2137 	movw	r1, #567	; 0x237
 8108ff0:	4839      	ldr	r0, [pc, #228]	; (81090d8 <__mdiff+0x110>)
 8108ff2:	f001 fc5d 	bl	810a8b0 <__assert_func>
 8108ff6:	2301      	movs	r3, #1
 8108ff8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8108ffc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109000:	bfa4      	itt	ge
 8109002:	4643      	movge	r3, r8
 8109004:	46a0      	movge	r8, r4
 8109006:	4630      	mov	r0, r6
 8109008:	f8d8 1004 	ldr.w	r1, [r8, #4]
 810900c:	bfa6      	itte	ge
 810900e:	461c      	movge	r4, r3
 8109010:	2500      	movge	r5, #0
 8109012:	2501      	movlt	r5, #1
 8109014:	f7ff fcf6 	bl	8108a04 <_Balloc>
 8109018:	b920      	cbnz	r0, 8109024 <__mdiff+0x5c>
 810901a:	4b2e      	ldr	r3, [pc, #184]	; (81090d4 <__mdiff+0x10c>)
 810901c:	4602      	mov	r2, r0
 810901e:	f240 2145 	movw	r1, #581	; 0x245
 8109022:	e7e5      	b.n	8108ff0 <__mdiff+0x28>
 8109024:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8109028:	6926      	ldr	r6, [r4, #16]
 810902a:	60c5      	str	r5, [r0, #12]
 810902c:	f104 0914 	add.w	r9, r4, #20
 8109030:	f108 0514 	add.w	r5, r8, #20
 8109034:	f100 0e14 	add.w	lr, r0, #20
 8109038:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 810903c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8109040:	f108 0210 	add.w	r2, r8, #16
 8109044:	46f2      	mov	sl, lr
 8109046:	2100      	movs	r1, #0
 8109048:	f859 3b04 	ldr.w	r3, [r9], #4
 810904c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8109050:	fa11 f88b 	uxtah	r8, r1, fp
 8109054:	b299      	uxth	r1, r3
 8109056:	0c1b      	lsrs	r3, r3, #16
 8109058:	eba8 0801 	sub.w	r8, r8, r1
 810905c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8109060:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8109064:	fa1f f888 	uxth.w	r8, r8
 8109068:	1419      	asrs	r1, r3, #16
 810906a:	454e      	cmp	r6, r9
 810906c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8109070:	f84a 3b04 	str.w	r3, [sl], #4
 8109074:	d8e8      	bhi.n	8109048 <__mdiff+0x80>
 8109076:	1b33      	subs	r3, r6, r4
 8109078:	3b15      	subs	r3, #21
 810907a:	f023 0303 	bic.w	r3, r3, #3
 810907e:	3304      	adds	r3, #4
 8109080:	3415      	adds	r4, #21
 8109082:	42a6      	cmp	r6, r4
 8109084:	bf38      	it	cc
 8109086:	2304      	movcc	r3, #4
 8109088:	441d      	add	r5, r3
 810908a:	4473      	add	r3, lr
 810908c:	469e      	mov	lr, r3
 810908e:	462e      	mov	r6, r5
 8109090:	4566      	cmp	r6, ip
 8109092:	d30e      	bcc.n	81090b2 <__mdiff+0xea>
 8109094:	f10c 0203 	add.w	r2, ip, #3
 8109098:	1b52      	subs	r2, r2, r5
 810909a:	f022 0203 	bic.w	r2, r2, #3
 810909e:	3d03      	subs	r5, #3
 81090a0:	45ac      	cmp	ip, r5
 81090a2:	bf38      	it	cc
 81090a4:	2200      	movcc	r2, #0
 81090a6:	4413      	add	r3, r2
 81090a8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 81090ac:	b17a      	cbz	r2, 81090ce <__mdiff+0x106>
 81090ae:	6107      	str	r7, [r0, #16]
 81090b0:	e7a4      	b.n	8108ffc <__mdiff+0x34>
 81090b2:	f856 8b04 	ldr.w	r8, [r6], #4
 81090b6:	fa11 f288 	uxtah	r2, r1, r8
 81090ba:	1414      	asrs	r4, r2, #16
 81090bc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 81090c0:	b292      	uxth	r2, r2
 81090c2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 81090c6:	f84e 2b04 	str.w	r2, [lr], #4
 81090ca:	1421      	asrs	r1, r4, #16
 81090cc:	e7e0      	b.n	8109090 <__mdiff+0xc8>
 81090ce:	3f01      	subs	r7, #1
 81090d0:	e7ea      	b.n	81090a8 <__mdiff+0xe0>
 81090d2:	bf00      	nop
 81090d4:	0810b809 	.word	0x0810b809
 81090d8:	0810b81a 	.word	0x0810b81a

081090dc <__ulp>:
 81090dc:	b082      	sub	sp, #8
 81090de:	ed8d 0b00 	vstr	d0, [sp]
 81090e2:	9a01      	ldr	r2, [sp, #4]
 81090e4:	4b0f      	ldr	r3, [pc, #60]	; (8109124 <__ulp+0x48>)
 81090e6:	4013      	ands	r3, r2
 81090e8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 81090ec:	2b00      	cmp	r3, #0
 81090ee:	dc08      	bgt.n	8109102 <__ulp+0x26>
 81090f0:	425b      	negs	r3, r3
 81090f2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 81090f6:	ea4f 5223 	mov.w	r2, r3, asr #20
 81090fa:	da04      	bge.n	8109106 <__ulp+0x2a>
 81090fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8109100:	4113      	asrs	r3, r2
 8109102:	2200      	movs	r2, #0
 8109104:	e008      	b.n	8109118 <__ulp+0x3c>
 8109106:	f1a2 0314 	sub.w	r3, r2, #20
 810910a:	2b1e      	cmp	r3, #30
 810910c:	bfda      	itte	le
 810910e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8109112:	40da      	lsrle	r2, r3
 8109114:	2201      	movgt	r2, #1
 8109116:	2300      	movs	r3, #0
 8109118:	4619      	mov	r1, r3
 810911a:	4610      	mov	r0, r2
 810911c:	ec41 0b10 	vmov	d0, r0, r1
 8109120:	b002      	add	sp, #8
 8109122:	4770      	bx	lr
 8109124:	7ff00000 	.word	0x7ff00000

08109128 <__b2d>:
 8109128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810912c:	6906      	ldr	r6, [r0, #16]
 810912e:	f100 0814 	add.w	r8, r0, #20
 8109132:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8109136:	1f37      	subs	r7, r6, #4
 8109138:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810913c:	4610      	mov	r0, r2
 810913e:	f7ff fd53 	bl	8108be8 <__hi0bits>
 8109142:	f1c0 0320 	rsb	r3, r0, #32
 8109146:	280a      	cmp	r0, #10
 8109148:	600b      	str	r3, [r1, #0]
 810914a:	491b      	ldr	r1, [pc, #108]	; (81091b8 <__b2d+0x90>)
 810914c:	dc15      	bgt.n	810917a <__b2d+0x52>
 810914e:	f1c0 0c0b 	rsb	ip, r0, #11
 8109152:	fa22 f30c 	lsr.w	r3, r2, ip
 8109156:	45b8      	cmp	r8, r7
 8109158:	ea43 0501 	orr.w	r5, r3, r1
 810915c:	bf34      	ite	cc
 810915e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8109162:	2300      	movcs	r3, #0
 8109164:	3015      	adds	r0, #21
 8109166:	fa02 f000 	lsl.w	r0, r2, r0
 810916a:	fa23 f30c 	lsr.w	r3, r3, ip
 810916e:	4303      	orrs	r3, r0
 8109170:	461c      	mov	r4, r3
 8109172:	ec45 4b10 	vmov	d0, r4, r5
 8109176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810917a:	45b8      	cmp	r8, r7
 810917c:	bf3a      	itte	cc
 810917e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8109182:	f1a6 0708 	subcc.w	r7, r6, #8
 8109186:	2300      	movcs	r3, #0
 8109188:	380b      	subs	r0, #11
 810918a:	d012      	beq.n	81091b2 <__b2d+0x8a>
 810918c:	f1c0 0120 	rsb	r1, r0, #32
 8109190:	fa23 f401 	lsr.w	r4, r3, r1
 8109194:	4082      	lsls	r2, r0
 8109196:	4322      	orrs	r2, r4
 8109198:	4547      	cmp	r7, r8
 810919a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 810919e:	bf8c      	ite	hi
 81091a0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 81091a4:	2200      	movls	r2, #0
 81091a6:	4083      	lsls	r3, r0
 81091a8:	40ca      	lsrs	r2, r1
 81091aa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 81091ae:	4313      	orrs	r3, r2
 81091b0:	e7de      	b.n	8109170 <__b2d+0x48>
 81091b2:	ea42 0501 	orr.w	r5, r2, r1
 81091b6:	e7db      	b.n	8109170 <__b2d+0x48>
 81091b8:	3ff00000 	.word	0x3ff00000

081091bc <__d2b>:
 81091bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 81091c0:	460f      	mov	r7, r1
 81091c2:	2101      	movs	r1, #1
 81091c4:	ec59 8b10 	vmov	r8, r9, d0
 81091c8:	4616      	mov	r6, r2
 81091ca:	f7ff fc1b 	bl	8108a04 <_Balloc>
 81091ce:	4604      	mov	r4, r0
 81091d0:	b930      	cbnz	r0, 81091e0 <__d2b+0x24>
 81091d2:	4602      	mov	r2, r0
 81091d4:	4b24      	ldr	r3, [pc, #144]	; (8109268 <__d2b+0xac>)
 81091d6:	4825      	ldr	r0, [pc, #148]	; (810926c <__d2b+0xb0>)
 81091d8:	f240 310f 	movw	r1, #783	; 0x30f
 81091dc:	f001 fb68 	bl	810a8b0 <__assert_func>
 81091e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 81091e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 81091e8:	bb2d      	cbnz	r5, 8109236 <__d2b+0x7a>
 81091ea:	9301      	str	r3, [sp, #4]
 81091ec:	f1b8 0300 	subs.w	r3, r8, #0
 81091f0:	d026      	beq.n	8109240 <__d2b+0x84>
 81091f2:	4668      	mov	r0, sp
 81091f4:	9300      	str	r3, [sp, #0]
 81091f6:	f7ff fd17 	bl	8108c28 <__lo0bits>
 81091fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 81091fe:	b1e8      	cbz	r0, 810923c <__d2b+0x80>
 8109200:	f1c0 0320 	rsb	r3, r0, #32
 8109204:	fa02 f303 	lsl.w	r3, r2, r3
 8109208:	430b      	orrs	r3, r1
 810920a:	40c2      	lsrs	r2, r0
 810920c:	6163      	str	r3, [r4, #20]
 810920e:	9201      	str	r2, [sp, #4]
 8109210:	9b01      	ldr	r3, [sp, #4]
 8109212:	61a3      	str	r3, [r4, #24]
 8109214:	2b00      	cmp	r3, #0
 8109216:	bf14      	ite	ne
 8109218:	2202      	movne	r2, #2
 810921a:	2201      	moveq	r2, #1
 810921c:	6122      	str	r2, [r4, #16]
 810921e:	b1bd      	cbz	r5, 8109250 <__d2b+0x94>
 8109220:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8109224:	4405      	add	r5, r0
 8109226:	603d      	str	r5, [r7, #0]
 8109228:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810922c:	6030      	str	r0, [r6, #0]
 810922e:	4620      	mov	r0, r4
 8109230:	b003      	add	sp, #12
 8109232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8109236:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810923a:	e7d6      	b.n	81091ea <__d2b+0x2e>
 810923c:	6161      	str	r1, [r4, #20]
 810923e:	e7e7      	b.n	8109210 <__d2b+0x54>
 8109240:	a801      	add	r0, sp, #4
 8109242:	f7ff fcf1 	bl	8108c28 <__lo0bits>
 8109246:	9b01      	ldr	r3, [sp, #4]
 8109248:	6163      	str	r3, [r4, #20]
 810924a:	3020      	adds	r0, #32
 810924c:	2201      	movs	r2, #1
 810924e:	e7e5      	b.n	810921c <__d2b+0x60>
 8109250:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8109254:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8109258:	6038      	str	r0, [r7, #0]
 810925a:	6918      	ldr	r0, [r3, #16]
 810925c:	f7ff fcc4 	bl	8108be8 <__hi0bits>
 8109260:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8109264:	e7e2      	b.n	810922c <__d2b+0x70>
 8109266:	bf00      	nop
 8109268:	0810b809 	.word	0x0810b809
 810926c:	0810b81a 	.word	0x0810b81a

08109270 <__ratio>:
 8109270:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109274:	4688      	mov	r8, r1
 8109276:	4669      	mov	r1, sp
 8109278:	4681      	mov	r9, r0
 810927a:	f7ff ff55 	bl	8109128 <__b2d>
 810927e:	a901      	add	r1, sp, #4
 8109280:	4640      	mov	r0, r8
 8109282:	ec55 4b10 	vmov	r4, r5, d0
 8109286:	f7ff ff4f 	bl	8109128 <__b2d>
 810928a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810928e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8109292:	eba3 0c02 	sub.w	ip, r3, r2
 8109296:	e9dd 3200 	ldrd	r3, r2, [sp]
 810929a:	1a9b      	subs	r3, r3, r2
 810929c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 81092a0:	ec51 0b10 	vmov	r0, r1, d0
 81092a4:	2b00      	cmp	r3, #0
 81092a6:	bfd6      	itet	le
 81092a8:	460a      	movle	r2, r1
 81092aa:	462a      	movgt	r2, r5
 81092ac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 81092b0:	468b      	mov	fp, r1
 81092b2:	462f      	mov	r7, r5
 81092b4:	bfd4      	ite	le
 81092b6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 81092ba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 81092be:	4620      	mov	r0, r4
 81092c0:	ee10 2a10 	vmov	r2, s0
 81092c4:	465b      	mov	r3, fp
 81092c6:	4639      	mov	r1, r7
 81092c8:	f7f7 fb48 	bl	810095c <__aeabi_ddiv>
 81092cc:	ec41 0b10 	vmov	d0, r0, r1
 81092d0:	b003      	add	sp, #12
 81092d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

081092d6 <__copybits>:
 81092d6:	3901      	subs	r1, #1
 81092d8:	b570      	push	{r4, r5, r6, lr}
 81092da:	1149      	asrs	r1, r1, #5
 81092dc:	6914      	ldr	r4, [r2, #16]
 81092de:	3101      	adds	r1, #1
 81092e0:	f102 0314 	add.w	r3, r2, #20
 81092e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 81092e8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 81092ec:	1f05      	subs	r5, r0, #4
 81092ee:	42a3      	cmp	r3, r4
 81092f0:	d30c      	bcc.n	810930c <__copybits+0x36>
 81092f2:	1aa3      	subs	r3, r4, r2
 81092f4:	3b11      	subs	r3, #17
 81092f6:	f023 0303 	bic.w	r3, r3, #3
 81092fa:	3211      	adds	r2, #17
 81092fc:	42a2      	cmp	r2, r4
 81092fe:	bf88      	it	hi
 8109300:	2300      	movhi	r3, #0
 8109302:	4418      	add	r0, r3
 8109304:	2300      	movs	r3, #0
 8109306:	4288      	cmp	r0, r1
 8109308:	d305      	bcc.n	8109316 <__copybits+0x40>
 810930a:	bd70      	pop	{r4, r5, r6, pc}
 810930c:	f853 6b04 	ldr.w	r6, [r3], #4
 8109310:	f845 6f04 	str.w	r6, [r5, #4]!
 8109314:	e7eb      	b.n	81092ee <__copybits+0x18>
 8109316:	f840 3b04 	str.w	r3, [r0], #4
 810931a:	e7f4      	b.n	8109306 <__copybits+0x30>

0810931c <__any_on>:
 810931c:	f100 0214 	add.w	r2, r0, #20
 8109320:	6900      	ldr	r0, [r0, #16]
 8109322:	114b      	asrs	r3, r1, #5
 8109324:	4298      	cmp	r0, r3
 8109326:	b510      	push	{r4, lr}
 8109328:	db11      	blt.n	810934e <__any_on+0x32>
 810932a:	dd0a      	ble.n	8109342 <__any_on+0x26>
 810932c:	f011 011f 	ands.w	r1, r1, #31
 8109330:	d007      	beq.n	8109342 <__any_on+0x26>
 8109332:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8109336:	fa24 f001 	lsr.w	r0, r4, r1
 810933a:	fa00 f101 	lsl.w	r1, r0, r1
 810933e:	428c      	cmp	r4, r1
 8109340:	d10b      	bne.n	810935a <__any_on+0x3e>
 8109342:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8109346:	4293      	cmp	r3, r2
 8109348:	d803      	bhi.n	8109352 <__any_on+0x36>
 810934a:	2000      	movs	r0, #0
 810934c:	bd10      	pop	{r4, pc}
 810934e:	4603      	mov	r3, r0
 8109350:	e7f7      	b.n	8109342 <__any_on+0x26>
 8109352:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8109356:	2900      	cmp	r1, #0
 8109358:	d0f5      	beq.n	8109346 <__any_on+0x2a>
 810935a:	2001      	movs	r0, #1
 810935c:	e7f6      	b.n	810934c <__any_on+0x30>

0810935e <sulp>:
 810935e:	b570      	push	{r4, r5, r6, lr}
 8109360:	4604      	mov	r4, r0
 8109362:	460d      	mov	r5, r1
 8109364:	ec45 4b10 	vmov	d0, r4, r5
 8109368:	4616      	mov	r6, r2
 810936a:	f7ff feb7 	bl	81090dc <__ulp>
 810936e:	ec51 0b10 	vmov	r0, r1, d0
 8109372:	b17e      	cbz	r6, 8109394 <sulp+0x36>
 8109374:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8109378:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810937c:	2b00      	cmp	r3, #0
 810937e:	dd09      	ble.n	8109394 <sulp+0x36>
 8109380:	051b      	lsls	r3, r3, #20
 8109382:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8109386:	2400      	movs	r4, #0
 8109388:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 810938c:	4622      	mov	r2, r4
 810938e:	462b      	mov	r3, r5
 8109390:	f7f7 f9ba 	bl	8100708 <__aeabi_dmul>
 8109394:	bd70      	pop	{r4, r5, r6, pc}
	...

08109398 <_strtod_l>:
 8109398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810939c:	ed2d 8b02 	vpush	{d8}
 81093a0:	b09b      	sub	sp, #108	; 0x6c
 81093a2:	4604      	mov	r4, r0
 81093a4:	9213      	str	r2, [sp, #76]	; 0x4c
 81093a6:	2200      	movs	r2, #0
 81093a8:	9216      	str	r2, [sp, #88]	; 0x58
 81093aa:	460d      	mov	r5, r1
 81093ac:	f04f 0800 	mov.w	r8, #0
 81093b0:	f04f 0900 	mov.w	r9, #0
 81093b4:	460a      	mov	r2, r1
 81093b6:	9215      	str	r2, [sp, #84]	; 0x54
 81093b8:	7811      	ldrb	r1, [r2, #0]
 81093ba:	292b      	cmp	r1, #43	; 0x2b
 81093bc:	d04c      	beq.n	8109458 <_strtod_l+0xc0>
 81093be:	d83a      	bhi.n	8109436 <_strtod_l+0x9e>
 81093c0:	290d      	cmp	r1, #13
 81093c2:	d834      	bhi.n	810942e <_strtod_l+0x96>
 81093c4:	2908      	cmp	r1, #8
 81093c6:	d834      	bhi.n	8109432 <_strtod_l+0x9a>
 81093c8:	2900      	cmp	r1, #0
 81093ca:	d03d      	beq.n	8109448 <_strtod_l+0xb0>
 81093cc:	2200      	movs	r2, #0
 81093ce:	920a      	str	r2, [sp, #40]	; 0x28
 81093d0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 81093d2:	7832      	ldrb	r2, [r6, #0]
 81093d4:	2a30      	cmp	r2, #48	; 0x30
 81093d6:	f040 80b4 	bne.w	8109542 <_strtod_l+0x1aa>
 81093da:	7872      	ldrb	r2, [r6, #1]
 81093dc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 81093e0:	2a58      	cmp	r2, #88	; 0x58
 81093e2:	d170      	bne.n	81094c6 <_strtod_l+0x12e>
 81093e4:	9302      	str	r3, [sp, #8]
 81093e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81093e8:	9301      	str	r3, [sp, #4]
 81093ea:	ab16      	add	r3, sp, #88	; 0x58
 81093ec:	9300      	str	r3, [sp, #0]
 81093ee:	4a8e      	ldr	r2, [pc, #568]	; (8109628 <_strtod_l+0x290>)
 81093f0:	ab17      	add	r3, sp, #92	; 0x5c
 81093f2:	a915      	add	r1, sp, #84	; 0x54
 81093f4:	4620      	mov	r0, r4
 81093f6:	f001 faf7 	bl	810a9e8 <__gethex>
 81093fa:	f010 070f 	ands.w	r7, r0, #15
 81093fe:	4605      	mov	r5, r0
 8109400:	d005      	beq.n	810940e <_strtod_l+0x76>
 8109402:	2f06      	cmp	r7, #6
 8109404:	d12a      	bne.n	810945c <_strtod_l+0xc4>
 8109406:	3601      	adds	r6, #1
 8109408:	2300      	movs	r3, #0
 810940a:	9615      	str	r6, [sp, #84]	; 0x54
 810940c:	930a      	str	r3, [sp, #40]	; 0x28
 810940e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8109410:	2b00      	cmp	r3, #0
 8109412:	f040 857f 	bne.w	8109f14 <_strtod_l+0xb7c>
 8109416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109418:	b1db      	cbz	r3, 8109452 <_strtod_l+0xba>
 810941a:	4642      	mov	r2, r8
 810941c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8109420:	ec43 2b10 	vmov	d0, r2, r3
 8109424:	b01b      	add	sp, #108	; 0x6c
 8109426:	ecbd 8b02 	vpop	{d8}
 810942a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810942e:	2920      	cmp	r1, #32
 8109430:	d1cc      	bne.n	81093cc <_strtod_l+0x34>
 8109432:	3201      	adds	r2, #1
 8109434:	e7bf      	b.n	81093b6 <_strtod_l+0x1e>
 8109436:	292d      	cmp	r1, #45	; 0x2d
 8109438:	d1c8      	bne.n	81093cc <_strtod_l+0x34>
 810943a:	2101      	movs	r1, #1
 810943c:	910a      	str	r1, [sp, #40]	; 0x28
 810943e:	1c51      	adds	r1, r2, #1
 8109440:	9115      	str	r1, [sp, #84]	; 0x54
 8109442:	7852      	ldrb	r2, [r2, #1]
 8109444:	2a00      	cmp	r2, #0
 8109446:	d1c3      	bne.n	81093d0 <_strtod_l+0x38>
 8109448:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810944a:	9515      	str	r5, [sp, #84]	; 0x54
 810944c:	2b00      	cmp	r3, #0
 810944e:	f040 855f 	bne.w	8109f10 <_strtod_l+0xb78>
 8109452:	4642      	mov	r2, r8
 8109454:	464b      	mov	r3, r9
 8109456:	e7e3      	b.n	8109420 <_strtod_l+0x88>
 8109458:	2100      	movs	r1, #0
 810945a:	e7ef      	b.n	810943c <_strtod_l+0xa4>
 810945c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 810945e:	b13a      	cbz	r2, 8109470 <_strtod_l+0xd8>
 8109460:	2135      	movs	r1, #53	; 0x35
 8109462:	a818      	add	r0, sp, #96	; 0x60
 8109464:	f7ff ff37 	bl	81092d6 <__copybits>
 8109468:	9916      	ldr	r1, [sp, #88]	; 0x58
 810946a:	4620      	mov	r0, r4
 810946c:	f7ff fb0a 	bl	8108a84 <_Bfree>
 8109470:	3f01      	subs	r7, #1
 8109472:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8109474:	2f04      	cmp	r7, #4
 8109476:	d806      	bhi.n	8109486 <_strtod_l+0xee>
 8109478:	e8df f007 	tbb	[pc, r7]
 810947c:	201d0314 	.word	0x201d0314
 8109480:	14          	.byte	0x14
 8109481:	00          	.byte	0x00
 8109482:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8109486:	05e9      	lsls	r1, r5, #23
 8109488:	bf48      	it	mi
 810948a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 810948e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8109492:	0d1b      	lsrs	r3, r3, #20
 8109494:	051b      	lsls	r3, r3, #20
 8109496:	2b00      	cmp	r3, #0
 8109498:	d1b9      	bne.n	810940e <_strtod_l+0x76>
 810949a:	f7fe faf5 	bl	8107a88 <__errno>
 810949e:	2322      	movs	r3, #34	; 0x22
 81094a0:	6003      	str	r3, [r0, #0]
 81094a2:	e7b4      	b.n	810940e <_strtod_l+0x76>
 81094a4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 81094a8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 81094ac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 81094b0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 81094b4:	e7e7      	b.n	8109486 <_strtod_l+0xee>
 81094b6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8109630 <_strtod_l+0x298>
 81094ba:	e7e4      	b.n	8109486 <_strtod_l+0xee>
 81094bc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 81094c0:	f04f 38ff 	mov.w	r8, #4294967295
 81094c4:	e7df      	b.n	8109486 <_strtod_l+0xee>
 81094c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 81094c8:	1c5a      	adds	r2, r3, #1
 81094ca:	9215      	str	r2, [sp, #84]	; 0x54
 81094cc:	785b      	ldrb	r3, [r3, #1]
 81094ce:	2b30      	cmp	r3, #48	; 0x30
 81094d0:	d0f9      	beq.n	81094c6 <_strtod_l+0x12e>
 81094d2:	2b00      	cmp	r3, #0
 81094d4:	d09b      	beq.n	810940e <_strtod_l+0x76>
 81094d6:	2301      	movs	r3, #1
 81094d8:	f04f 0a00 	mov.w	sl, #0
 81094dc:	9304      	str	r3, [sp, #16]
 81094de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 81094e0:	930b      	str	r3, [sp, #44]	; 0x2c
 81094e2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 81094e6:	46d3      	mov	fp, sl
 81094e8:	220a      	movs	r2, #10
 81094ea:	9815      	ldr	r0, [sp, #84]	; 0x54
 81094ec:	7806      	ldrb	r6, [r0, #0]
 81094ee:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 81094f2:	b2d9      	uxtb	r1, r3
 81094f4:	2909      	cmp	r1, #9
 81094f6:	d926      	bls.n	8109546 <_strtod_l+0x1ae>
 81094f8:	494c      	ldr	r1, [pc, #304]	; (810962c <_strtod_l+0x294>)
 81094fa:	2201      	movs	r2, #1
 81094fc:	f001 f98c 	bl	810a818 <strncmp>
 8109500:	2800      	cmp	r0, #0
 8109502:	d030      	beq.n	8109566 <_strtod_l+0x1ce>
 8109504:	2000      	movs	r0, #0
 8109506:	4632      	mov	r2, r6
 8109508:	9005      	str	r0, [sp, #20]
 810950a:	465e      	mov	r6, fp
 810950c:	4603      	mov	r3, r0
 810950e:	2a65      	cmp	r2, #101	; 0x65
 8109510:	d001      	beq.n	8109516 <_strtod_l+0x17e>
 8109512:	2a45      	cmp	r2, #69	; 0x45
 8109514:	d113      	bne.n	810953e <_strtod_l+0x1a6>
 8109516:	b91e      	cbnz	r6, 8109520 <_strtod_l+0x188>
 8109518:	9a04      	ldr	r2, [sp, #16]
 810951a:	4302      	orrs	r2, r0
 810951c:	d094      	beq.n	8109448 <_strtod_l+0xb0>
 810951e:	2600      	movs	r6, #0
 8109520:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8109522:	1c6a      	adds	r2, r5, #1
 8109524:	9215      	str	r2, [sp, #84]	; 0x54
 8109526:	786a      	ldrb	r2, [r5, #1]
 8109528:	2a2b      	cmp	r2, #43	; 0x2b
 810952a:	d074      	beq.n	8109616 <_strtod_l+0x27e>
 810952c:	2a2d      	cmp	r2, #45	; 0x2d
 810952e:	d078      	beq.n	8109622 <_strtod_l+0x28a>
 8109530:	f04f 0c00 	mov.w	ip, #0
 8109534:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8109538:	2909      	cmp	r1, #9
 810953a:	d97f      	bls.n	810963c <_strtod_l+0x2a4>
 810953c:	9515      	str	r5, [sp, #84]	; 0x54
 810953e:	2700      	movs	r7, #0
 8109540:	e09e      	b.n	8109680 <_strtod_l+0x2e8>
 8109542:	2300      	movs	r3, #0
 8109544:	e7c8      	b.n	81094d8 <_strtod_l+0x140>
 8109546:	f1bb 0f08 	cmp.w	fp, #8
 810954a:	bfd8      	it	le
 810954c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 810954e:	f100 0001 	add.w	r0, r0, #1
 8109552:	bfda      	itte	le
 8109554:	fb02 3301 	mlale	r3, r2, r1, r3
 8109558:	9309      	strle	r3, [sp, #36]	; 0x24
 810955a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 810955e:	f10b 0b01 	add.w	fp, fp, #1
 8109562:	9015      	str	r0, [sp, #84]	; 0x54
 8109564:	e7c1      	b.n	81094ea <_strtod_l+0x152>
 8109566:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8109568:	1c5a      	adds	r2, r3, #1
 810956a:	9215      	str	r2, [sp, #84]	; 0x54
 810956c:	785a      	ldrb	r2, [r3, #1]
 810956e:	f1bb 0f00 	cmp.w	fp, #0
 8109572:	d037      	beq.n	81095e4 <_strtod_l+0x24c>
 8109574:	9005      	str	r0, [sp, #20]
 8109576:	465e      	mov	r6, fp
 8109578:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 810957c:	2b09      	cmp	r3, #9
 810957e:	d912      	bls.n	81095a6 <_strtod_l+0x20e>
 8109580:	2301      	movs	r3, #1
 8109582:	e7c4      	b.n	810950e <_strtod_l+0x176>
 8109584:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8109586:	1c5a      	adds	r2, r3, #1
 8109588:	9215      	str	r2, [sp, #84]	; 0x54
 810958a:	785a      	ldrb	r2, [r3, #1]
 810958c:	3001      	adds	r0, #1
 810958e:	2a30      	cmp	r2, #48	; 0x30
 8109590:	d0f8      	beq.n	8109584 <_strtod_l+0x1ec>
 8109592:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8109596:	2b08      	cmp	r3, #8
 8109598:	f200 84c1 	bhi.w	8109f1e <_strtod_l+0xb86>
 810959c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810959e:	9005      	str	r0, [sp, #20]
 81095a0:	2000      	movs	r0, #0
 81095a2:	930b      	str	r3, [sp, #44]	; 0x2c
 81095a4:	4606      	mov	r6, r0
 81095a6:	3a30      	subs	r2, #48	; 0x30
 81095a8:	f100 0301 	add.w	r3, r0, #1
 81095ac:	d014      	beq.n	81095d8 <_strtod_l+0x240>
 81095ae:	9905      	ldr	r1, [sp, #20]
 81095b0:	4419      	add	r1, r3
 81095b2:	9105      	str	r1, [sp, #20]
 81095b4:	4633      	mov	r3, r6
 81095b6:	eb00 0c06 	add.w	ip, r0, r6
 81095ba:	210a      	movs	r1, #10
 81095bc:	4563      	cmp	r3, ip
 81095be:	d113      	bne.n	81095e8 <_strtod_l+0x250>
 81095c0:	1833      	adds	r3, r6, r0
 81095c2:	2b08      	cmp	r3, #8
 81095c4:	f106 0601 	add.w	r6, r6, #1
 81095c8:	4406      	add	r6, r0
 81095ca:	dc1a      	bgt.n	8109602 <_strtod_l+0x26a>
 81095cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 81095ce:	230a      	movs	r3, #10
 81095d0:	fb03 2301 	mla	r3, r3, r1, r2
 81095d4:	9309      	str	r3, [sp, #36]	; 0x24
 81095d6:	2300      	movs	r3, #0
 81095d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 81095da:	1c51      	adds	r1, r2, #1
 81095dc:	9115      	str	r1, [sp, #84]	; 0x54
 81095de:	7852      	ldrb	r2, [r2, #1]
 81095e0:	4618      	mov	r0, r3
 81095e2:	e7c9      	b.n	8109578 <_strtod_l+0x1e0>
 81095e4:	4658      	mov	r0, fp
 81095e6:	e7d2      	b.n	810958e <_strtod_l+0x1f6>
 81095e8:	2b08      	cmp	r3, #8
 81095ea:	f103 0301 	add.w	r3, r3, #1
 81095ee:	dc03      	bgt.n	81095f8 <_strtod_l+0x260>
 81095f0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 81095f2:	434f      	muls	r7, r1
 81095f4:	9709      	str	r7, [sp, #36]	; 0x24
 81095f6:	e7e1      	b.n	81095bc <_strtod_l+0x224>
 81095f8:	2b10      	cmp	r3, #16
 81095fa:	bfd8      	it	le
 81095fc:	fb01 fa0a 	mulle.w	sl, r1, sl
 8109600:	e7dc      	b.n	81095bc <_strtod_l+0x224>
 8109602:	2e10      	cmp	r6, #16
 8109604:	bfdc      	itt	le
 8109606:	230a      	movle	r3, #10
 8109608:	fb03 2a0a 	mlale	sl, r3, sl, r2
 810960c:	e7e3      	b.n	81095d6 <_strtod_l+0x23e>
 810960e:	2300      	movs	r3, #0
 8109610:	9305      	str	r3, [sp, #20]
 8109612:	2301      	movs	r3, #1
 8109614:	e780      	b.n	8109518 <_strtod_l+0x180>
 8109616:	f04f 0c00 	mov.w	ip, #0
 810961a:	1caa      	adds	r2, r5, #2
 810961c:	9215      	str	r2, [sp, #84]	; 0x54
 810961e:	78aa      	ldrb	r2, [r5, #2]
 8109620:	e788      	b.n	8109534 <_strtod_l+0x19c>
 8109622:	f04f 0c01 	mov.w	ip, #1
 8109626:	e7f8      	b.n	810961a <_strtod_l+0x282>
 8109628:	0810b978 	.word	0x0810b978
 810962c:	0810b974 	.word	0x0810b974
 8109630:	7ff00000 	.word	0x7ff00000
 8109634:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8109636:	1c51      	adds	r1, r2, #1
 8109638:	9115      	str	r1, [sp, #84]	; 0x54
 810963a:	7852      	ldrb	r2, [r2, #1]
 810963c:	2a30      	cmp	r2, #48	; 0x30
 810963e:	d0f9      	beq.n	8109634 <_strtod_l+0x29c>
 8109640:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8109644:	2908      	cmp	r1, #8
 8109646:	f63f af7a 	bhi.w	810953e <_strtod_l+0x1a6>
 810964a:	3a30      	subs	r2, #48	; 0x30
 810964c:	9208      	str	r2, [sp, #32]
 810964e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8109650:	920c      	str	r2, [sp, #48]	; 0x30
 8109652:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8109654:	1c57      	adds	r7, r2, #1
 8109656:	9715      	str	r7, [sp, #84]	; 0x54
 8109658:	7852      	ldrb	r2, [r2, #1]
 810965a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 810965e:	f1be 0f09 	cmp.w	lr, #9
 8109662:	d938      	bls.n	81096d6 <_strtod_l+0x33e>
 8109664:	990c      	ldr	r1, [sp, #48]	; 0x30
 8109666:	1a7f      	subs	r7, r7, r1
 8109668:	2f08      	cmp	r7, #8
 810966a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 810966e:	dc03      	bgt.n	8109678 <_strtod_l+0x2e0>
 8109670:	9908      	ldr	r1, [sp, #32]
 8109672:	428f      	cmp	r7, r1
 8109674:	bfa8      	it	ge
 8109676:	460f      	movge	r7, r1
 8109678:	f1bc 0f00 	cmp.w	ip, #0
 810967c:	d000      	beq.n	8109680 <_strtod_l+0x2e8>
 810967e:	427f      	negs	r7, r7
 8109680:	2e00      	cmp	r6, #0
 8109682:	d14f      	bne.n	8109724 <_strtod_l+0x38c>
 8109684:	9904      	ldr	r1, [sp, #16]
 8109686:	4301      	orrs	r1, r0
 8109688:	f47f aec1 	bne.w	810940e <_strtod_l+0x76>
 810968c:	2b00      	cmp	r3, #0
 810968e:	f47f aedb 	bne.w	8109448 <_strtod_l+0xb0>
 8109692:	2a69      	cmp	r2, #105	; 0x69
 8109694:	d029      	beq.n	81096ea <_strtod_l+0x352>
 8109696:	dc26      	bgt.n	81096e6 <_strtod_l+0x34e>
 8109698:	2a49      	cmp	r2, #73	; 0x49
 810969a:	d026      	beq.n	81096ea <_strtod_l+0x352>
 810969c:	2a4e      	cmp	r2, #78	; 0x4e
 810969e:	f47f aed3 	bne.w	8109448 <_strtod_l+0xb0>
 81096a2:	499b      	ldr	r1, [pc, #620]	; (8109910 <_strtod_l+0x578>)
 81096a4:	a815      	add	r0, sp, #84	; 0x54
 81096a6:	f001 fbdf 	bl	810ae68 <__match>
 81096aa:	2800      	cmp	r0, #0
 81096ac:	f43f aecc 	beq.w	8109448 <_strtod_l+0xb0>
 81096b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 81096b2:	781b      	ldrb	r3, [r3, #0]
 81096b4:	2b28      	cmp	r3, #40	; 0x28
 81096b6:	d12f      	bne.n	8109718 <_strtod_l+0x380>
 81096b8:	4996      	ldr	r1, [pc, #600]	; (8109914 <_strtod_l+0x57c>)
 81096ba:	aa18      	add	r2, sp, #96	; 0x60
 81096bc:	a815      	add	r0, sp, #84	; 0x54
 81096be:	f001 fbe7 	bl	810ae90 <__hexnan>
 81096c2:	2805      	cmp	r0, #5
 81096c4:	d128      	bne.n	8109718 <_strtod_l+0x380>
 81096c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 81096c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 81096cc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 81096d0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 81096d4:	e69b      	b.n	810940e <_strtod_l+0x76>
 81096d6:	9f08      	ldr	r7, [sp, #32]
 81096d8:	210a      	movs	r1, #10
 81096da:	fb01 2107 	mla	r1, r1, r7, r2
 81096de:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 81096e2:	9208      	str	r2, [sp, #32]
 81096e4:	e7b5      	b.n	8109652 <_strtod_l+0x2ba>
 81096e6:	2a6e      	cmp	r2, #110	; 0x6e
 81096e8:	e7d9      	b.n	810969e <_strtod_l+0x306>
 81096ea:	498b      	ldr	r1, [pc, #556]	; (8109918 <_strtod_l+0x580>)
 81096ec:	a815      	add	r0, sp, #84	; 0x54
 81096ee:	f001 fbbb 	bl	810ae68 <__match>
 81096f2:	2800      	cmp	r0, #0
 81096f4:	f43f aea8 	beq.w	8109448 <_strtod_l+0xb0>
 81096f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 81096fa:	4988      	ldr	r1, [pc, #544]	; (810991c <_strtod_l+0x584>)
 81096fc:	3b01      	subs	r3, #1
 81096fe:	a815      	add	r0, sp, #84	; 0x54
 8109700:	9315      	str	r3, [sp, #84]	; 0x54
 8109702:	f001 fbb1 	bl	810ae68 <__match>
 8109706:	b910      	cbnz	r0, 810970e <_strtod_l+0x376>
 8109708:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810970a:	3301      	adds	r3, #1
 810970c:	9315      	str	r3, [sp, #84]	; 0x54
 810970e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 810992c <_strtod_l+0x594>
 8109712:	f04f 0800 	mov.w	r8, #0
 8109716:	e67a      	b.n	810940e <_strtod_l+0x76>
 8109718:	4881      	ldr	r0, [pc, #516]	; (8109920 <_strtod_l+0x588>)
 810971a:	f001 f8c1 	bl	810a8a0 <nan>
 810971e:	ec59 8b10 	vmov	r8, r9, d0
 8109722:	e674      	b.n	810940e <_strtod_l+0x76>
 8109724:	9b05      	ldr	r3, [sp, #20]
 8109726:	9809      	ldr	r0, [sp, #36]	; 0x24
 8109728:	1afb      	subs	r3, r7, r3
 810972a:	f1bb 0f00 	cmp.w	fp, #0
 810972e:	bf08      	it	eq
 8109730:	46b3      	moveq	fp, r6
 8109732:	2e10      	cmp	r6, #16
 8109734:	9308      	str	r3, [sp, #32]
 8109736:	4635      	mov	r5, r6
 8109738:	bfa8      	it	ge
 810973a:	2510      	movge	r5, #16
 810973c:	f7f6 ff6a 	bl	8100614 <__aeabi_ui2d>
 8109740:	2e09      	cmp	r6, #9
 8109742:	4680      	mov	r8, r0
 8109744:	4689      	mov	r9, r1
 8109746:	dd13      	ble.n	8109770 <_strtod_l+0x3d8>
 8109748:	4b76      	ldr	r3, [pc, #472]	; (8109924 <_strtod_l+0x58c>)
 810974a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 810974e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8109752:	f7f6 ffd9 	bl	8100708 <__aeabi_dmul>
 8109756:	4680      	mov	r8, r0
 8109758:	4650      	mov	r0, sl
 810975a:	4689      	mov	r9, r1
 810975c:	f7f6 ff5a 	bl	8100614 <__aeabi_ui2d>
 8109760:	4602      	mov	r2, r0
 8109762:	460b      	mov	r3, r1
 8109764:	4640      	mov	r0, r8
 8109766:	4649      	mov	r1, r9
 8109768:	f7f6 fe18 	bl	810039c <__adddf3>
 810976c:	4680      	mov	r8, r0
 810976e:	4689      	mov	r9, r1
 8109770:	2e0f      	cmp	r6, #15
 8109772:	dc38      	bgt.n	81097e6 <_strtod_l+0x44e>
 8109774:	9b08      	ldr	r3, [sp, #32]
 8109776:	2b00      	cmp	r3, #0
 8109778:	f43f ae49 	beq.w	810940e <_strtod_l+0x76>
 810977c:	dd24      	ble.n	81097c8 <_strtod_l+0x430>
 810977e:	2b16      	cmp	r3, #22
 8109780:	dc0b      	bgt.n	810979a <_strtod_l+0x402>
 8109782:	4968      	ldr	r1, [pc, #416]	; (8109924 <_strtod_l+0x58c>)
 8109784:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8109788:	e9d1 0100 	ldrd	r0, r1, [r1]
 810978c:	4642      	mov	r2, r8
 810978e:	464b      	mov	r3, r9
 8109790:	f7f6 ffba 	bl	8100708 <__aeabi_dmul>
 8109794:	4680      	mov	r8, r0
 8109796:	4689      	mov	r9, r1
 8109798:	e639      	b.n	810940e <_strtod_l+0x76>
 810979a:	9a08      	ldr	r2, [sp, #32]
 810979c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 81097a0:	4293      	cmp	r3, r2
 81097a2:	db20      	blt.n	81097e6 <_strtod_l+0x44e>
 81097a4:	4c5f      	ldr	r4, [pc, #380]	; (8109924 <_strtod_l+0x58c>)
 81097a6:	f1c6 060f 	rsb	r6, r6, #15
 81097aa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 81097ae:	4642      	mov	r2, r8
 81097b0:	464b      	mov	r3, r9
 81097b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 81097b6:	f7f6 ffa7 	bl	8100708 <__aeabi_dmul>
 81097ba:	9b08      	ldr	r3, [sp, #32]
 81097bc:	1b9e      	subs	r6, r3, r6
 81097be:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 81097c2:	e9d4 2300 	ldrd	r2, r3, [r4]
 81097c6:	e7e3      	b.n	8109790 <_strtod_l+0x3f8>
 81097c8:	9b08      	ldr	r3, [sp, #32]
 81097ca:	3316      	adds	r3, #22
 81097cc:	db0b      	blt.n	81097e6 <_strtod_l+0x44e>
 81097ce:	9b05      	ldr	r3, [sp, #20]
 81097d0:	1bdf      	subs	r7, r3, r7
 81097d2:	4b54      	ldr	r3, [pc, #336]	; (8109924 <_strtod_l+0x58c>)
 81097d4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 81097d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 81097dc:	4640      	mov	r0, r8
 81097de:	4649      	mov	r1, r9
 81097e0:	f7f7 f8bc 	bl	810095c <__aeabi_ddiv>
 81097e4:	e7d6      	b.n	8109794 <_strtod_l+0x3fc>
 81097e6:	9b08      	ldr	r3, [sp, #32]
 81097e8:	1b75      	subs	r5, r6, r5
 81097ea:	441d      	add	r5, r3
 81097ec:	2d00      	cmp	r5, #0
 81097ee:	dd70      	ble.n	81098d2 <_strtod_l+0x53a>
 81097f0:	f015 030f 	ands.w	r3, r5, #15
 81097f4:	d00a      	beq.n	810980c <_strtod_l+0x474>
 81097f6:	494b      	ldr	r1, [pc, #300]	; (8109924 <_strtod_l+0x58c>)
 81097f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 81097fc:	4642      	mov	r2, r8
 81097fe:	464b      	mov	r3, r9
 8109800:	e9d1 0100 	ldrd	r0, r1, [r1]
 8109804:	f7f6 ff80 	bl	8100708 <__aeabi_dmul>
 8109808:	4680      	mov	r8, r0
 810980a:	4689      	mov	r9, r1
 810980c:	f035 050f 	bics.w	r5, r5, #15
 8109810:	d04d      	beq.n	81098ae <_strtod_l+0x516>
 8109812:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8109816:	dd22      	ble.n	810985e <_strtod_l+0x4c6>
 8109818:	2500      	movs	r5, #0
 810981a:	46ab      	mov	fp, r5
 810981c:	9509      	str	r5, [sp, #36]	; 0x24
 810981e:	9505      	str	r5, [sp, #20]
 8109820:	2322      	movs	r3, #34	; 0x22
 8109822:	f8df 9108 	ldr.w	r9, [pc, #264]	; 810992c <_strtod_l+0x594>
 8109826:	6023      	str	r3, [r4, #0]
 8109828:	f04f 0800 	mov.w	r8, #0
 810982c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810982e:	2b00      	cmp	r3, #0
 8109830:	f43f aded 	beq.w	810940e <_strtod_l+0x76>
 8109834:	9916      	ldr	r1, [sp, #88]	; 0x58
 8109836:	4620      	mov	r0, r4
 8109838:	f7ff f924 	bl	8108a84 <_Bfree>
 810983c:	9905      	ldr	r1, [sp, #20]
 810983e:	4620      	mov	r0, r4
 8109840:	f7ff f920 	bl	8108a84 <_Bfree>
 8109844:	4659      	mov	r1, fp
 8109846:	4620      	mov	r0, r4
 8109848:	f7ff f91c 	bl	8108a84 <_Bfree>
 810984c:	9909      	ldr	r1, [sp, #36]	; 0x24
 810984e:	4620      	mov	r0, r4
 8109850:	f7ff f918 	bl	8108a84 <_Bfree>
 8109854:	4629      	mov	r1, r5
 8109856:	4620      	mov	r0, r4
 8109858:	f7ff f914 	bl	8108a84 <_Bfree>
 810985c:	e5d7      	b.n	810940e <_strtod_l+0x76>
 810985e:	4b32      	ldr	r3, [pc, #200]	; (8109928 <_strtod_l+0x590>)
 8109860:	9304      	str	r3, [sp, #16]
 8109862:	2300      	movs	r3, #0
 8109864:	112d      	asrs	r5, r5, #4
 8109866:	4640      	mov	r0, r8
 8109868:	4649      	mov	r1, r9
 810986a:	469a      	mov	sl, r3
 810986c:	2d01      	cmp	r5, #1
 810986e:	dc21      	bgt.n	81098b4 <_strtod_l+0x51c>
 8109870:	b10b      	cbz	r3, 8109876 <_strtod_l+0x4de>
 8109872:	4680      	mov	r8, r0
 8109874:	4689      	mov	r9, r1
 8109876:	492c      	ldr	r1, [pc, #176]	; (8109928 <_strtod_l+0x590>)
 8109878:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 810987c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8109880:	4642      	mov	r2, r8
 8109882:	464b      	mov	r3, r9
 8109884:	e9d1 0100 	ldrd	r0, r1, [r1]
 8109888:	f7f6 ff3e 	bl	8100708 <__aeabi_dmul>
 810988c:	4b27      	ldr	r3, [pc, #156]	; (810992c <_strtod_l+0x594>)
 810988e:	460a      	mov	r2, r1
 8109890:	400b      	ands	r3, r1
 8109892:	4927      	ldr	r1, [pc, #156]	; (8109930 <_strtod_l+0x598>)
 8109894:	428b      	cmp	r3, r1
 8109896:	4680      	mov	r8, r0
 8109898:	d8be      	bhi.n	8109818 <_strtod_l+0x480>
 810989a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 810989e:	428b      	cmp	r3, r1
 81098a0:	bf86      	itte	hi
 81098a2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8109934 <_strtod_l+0x59c>
 81098a6:	f04f 38ff 	movhi.w	r8, #4294967295
 81098aa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 81098ae:	2300      	movs	r3, #0
 81098b0:	9304      	str	r3, [sp, #16]
 81098b2:	e07b      	b.n	81099ac <_strtod_l+0x614>
 81098b4:	07ea      	lsls	r2, r5, #31
 81098b6:	d505      	bpl.n	81098c4 <_strtod_l+0x52c>
 81098b8:	9b04      	ldr	r3, [sp, #16]
 81098ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 81098be:	f7f6 ff23 	bl	8100708 <__aeabi_dmul>
 81098c2:	2301      	movs	r3, #1
 81098c4:	9a04      	ldr	r2, [sp, #16]
 81098c6:	3208      	adds	r2, #8
 81098c8:	f10a 0a01 	add.w	sl, sl, #1
 81098cc:	106d      	asrs	r5, r5, #1
 81098ce:	9204      	str	r2, [sp, #16]
 81098d0:	e7cc      	b.n	810986c <_strtod_l+0x4d4>
 81098d2:	d0ec      	beq.n	81098ae <_strtod_l+0x516>
 81098d4:	426d      	negs	r5, r5
 81098d6:	f015 020f 	ands.w	r2, r5, #15
 81098da:	d00a      	beq.n	81098f2 <_strtod_l+0x55a>
 81098dc:	4b11      	ldr	r3, [pc, #68]	; (8109924 <_strtod_l+0x58c>)
 81098de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 81098e2:	4640      	mov	r0, r8
 81098e4:	4649      	mov	r1, r9
 81098e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81098ea:	f7f7 f837 	bl	810095c <__aeabi_ddiv>
 81098ee:	4680      	mov	r8, r0
 81098f0:	4689      	mov	r9, r1
 81098f2:	112d      	asrs	r5, r5, #4
 81098f4:	d0db      	beq.n	81098ae <_strtod_l+0x516>
 81098f6:	2d1f      	cmp	r5, #31
 81098f8:	dd1e      	ble.n	8109938 <_strtod_l+0x5a0>
 81098fa:	2500      	movs	r5, #0
 81098fc:	46ab      	mov	fp, r5
 81098fe:	9509      	str	r5, [sp, #36]	; 0x24
 8109900:	9505      	str	r5, [sp, #20]
 8109902:	2322      	movs	r3, #34	; 0x22
 8109904:	f04f 0800 	mov.w	r8, #0
 8109908:	f04f 0900 	mov.w	r9, #0
 810990c:	6023      	str	r3, [r4, #0]
 810990e:	e78d      	b.n	810982c <_strtod_l+0x494>
 8109910:	0810b761 	.word	0x0810b761
 8109914:	0810b98c 	.word	0x0810b98c
 8109918:	0810b759 	.word	0x0810b759
 810991c:	0810b790 	.word	0x0810b790
 8109920:	0810bb1d 	.word	0x0810bb1d
 8109924:	0810b8a0 	.word	0x0810b8a0
 8109928:	0810b878 	.word	0x0810b878
 810992c:	7ff00000 	.word	0x7ff00000
 8109930:	7ca00000 	.word	0x7ca00000
 8109934:	7fefffff 	.word	0x7fefffff
 8109938:	f015 0310 	ands.w	r3, r5, #16
 810993c:	bf18      	it	ne
 810993e:	236a      	movne	r3, #106	; 0x6a
 8109940:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8109ce4 <_strtod_l+0x94c>
 8109944:	9304      	str	r3, [sp, #16]
 8109946:	4640      	mov	r0, r8
 8109948:	4649      	mov	r1, r9
 810994a:	2300      	movs	r3, #0
 810994c:	07ea      	lsls	r2, r5, #31
 810994e:	d504      	bpl.n	810995a <_strtod_l+0x5c2>
 8109950:	e9da 2300 	ldrd	r2, r3, [sl]
 8109954:	f7f6 fed8 	bl	8100708 <__aeabi_dmul>
 8109958:	2301      	movs	r3, #1
 810995a:	106d      	asrs	r5, r5, #1
 810995c:	f10a 0a08 	add.w	sl, sl, #8
 8109960:	d1f4      	bne.n	810994c <_strtod_l+0x5b4>
 8109962:	b10b      	cbz	r3, 8109968 <_strtod_l+0x5d0>
 8109964:	4680      	mov	r8, r0
 8109966:	4689      	mov	r9, r1
 8109968:	9b04      	ldr	r3, [sp, #16]
 810996a:	b1bb      	cbz	r3, 810999c <_strtod_l+0x604>
 810996c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8109970:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8109974:	2b00      	cmp	r3, #0
 8109976:	4649      	mov	r1, r9
 8109978:	dd10      	ble.n	810999c <_strtod_l+0x604>
 810997a:	2b1f      	cmp	r3, #31
 810997c:	f340 811e 	ble.w	8109bbc <_strtod_l+0x824>
 8109980:	2b34      	cmp	r3, #52	; 0x34
 8109982:	bfde      	ittt	le
 8109984:	f04f 33ff 	movle.w	r3, #4294967295
 8109988:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 810998c:	4093      	lslle	r3, r2
 810998e:	f04f 0800 	mov.w	r8, #0
 8109992:	bfcc      	ite	gt
 8109994:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8109998:	ea03 0901 	andle.w	r9, r3, r1
 810999c:	2200      	movs	r2, #0
 810999e:	2300      	movs	r3, #0
 81099a0:	4640      	mov	r0, r8
 81099a2:	4649      	mov	r1, r9
 81099a4:	f7f7 f918 	bl	8100bd8 <__aeabi_dcmpeq>
 81099a8:	2800      	cmp	r0, #0
 81099aa:	d1a6      	bne.n	81098fa <_strtod_l+0x562>
 81099ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81099ae:	9300      	str	r3, [sp, #0]
 81099b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 81099b2:	4633      	mov	r3, r6
 81099b4:	465a      	mov	r2, fp
 81099b6:	4620      	mov	r0, r4
 81099b8:	f7ff f8cc 	bl	8108b54 <__s2b>
 81099bc:	9009      	str	r0, [sp, #36]	; 0x24
 81099be:	2800      	cmp	r0, #0
 81099c0:	f43f af2a 	beq.w	8109818 <_strtod_l+0x480>
 81099c4:	9a08      	ldr	r2, [sp, #32]
 81099c6:	9b05      	ldr	r3, [sp, #20]
 81099c8:	2a00      	cmp	r2, #0
 81099ca:	eba3 0307 	sub.w	r3, r3, r7
 81099ce:	bfa8      	it	ge
 81099d0:	2300      	movge	r3, #0
 81099d2:	930c      	str	r3, [sp, #48]	; 0x30
 81099d4:	2500      	movs	r5, #0
 81099d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 81099da:	9312      	str	r3, [sp, #72]	; 0x48
 81099dc:	46ab      	mov	fp, r5
 81099de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81099e0:	4620      	mov	r0, r4
 81099e2:	6859      	ldr	r1, [r3, #4]
 81099e4:	f7ff f80e 	bl	8108a04 <_Balloc>
 81099e8:	9005      	str	r0, [sp, #20]
 81099ea:	2800      	cmp	r0, #0
 81099ec:	f43f af18 	beq.w	8109820 <_strtod_l+0x488>
 81099f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81099f2:	691a      	ldr	r2, [r3, #16]
 81099f4:	3202      	adds	r2, #2
 81099f6:	f103 010c 	add.w	r1, r3, #12
 81099fa:	0092      	lsls	r2, r2, #2
 81099fc:	300c      	adds	r0, #12
 81099fe:	f7fe f870 	bl	8107ae2 <memcpy>
 8109a02:	ec49 8b10 	vmov	d0, r8, r9
 8109a06:	aa18      	add	r2, sp, #96	; 0x60
 8109a08:	a917      	add	r1, sp, #92	; 0x5c
 8109a0a:	4620      	mov	r0, r4
 8109a0c:	f7ff fbd6 	bl	81091bc <__d2b>
 8109a10:	ec49 8b18 	vmov	d8, r8, r9
 8109a14:	9016      	str	r0, [sp, #88]	; 0x58
 8109a16:	2800      	cmp	r0, #0
 8109a18:	f43f af02 	beq.w	8109820 <_strtod_l+0x488>
 8109a1c:	2101      	movs	r1, #1
 8109a1e:	4620      	mov	r0, r4
 8109a20:	f7ff f930 	bl	8108c84 <__i2b>
 8109a24:	4683      	mov	fp, r0
 8109a26:	2800      	cmp	r0, #0
 8109a28:	f43f aefa 	beq.w	8109820 <_strtod_l+0x488>
 8109a2c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8109a2e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8109a30:	2e00      	cmp	r6, #0
 8109a32:	bfab      	itete	ge
 8109a34:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8109a36:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8109a38:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8109a3a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8109a3e:	bfac      	ite	ge
 8109a40:	eb06 0a03 	addge.w	sl, r6, r3
 8109a44:	1b9f      	sublt	r7, r3, r6
 8109a46:	9b04      	ldr	r3, [sp, #16]
 8109a48:	1af6      	subs	r6, r6, r3
 8109a4a:	4416      	add	r6, r2
 8109a4c:	4ba0      	ldr	r3, [pc, #640]	; (8109cd0 <_strtod_l+0x938>)
 8109a4e:	3e01      	subs	r6, #1
 8109a50:	429e      	cmp	r6, r3
 8109a52:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8109a56:	f280 80c4 	bge.w	8109be2 <_strtod_l+0x84a>
 8109a5a:	1b9b      	subs	r3, r3, r6
 8109a5c:	2b1f      	cmp	r3, #31
 8109a5e:	eba2 0203 	sub.w	r2, r2, r3
 8109a62:	f04f 0101 	mov.w	r1, #1
 8109a66:	f300 80b0 	bgt.w	8109bca <_strtod_l+0x832>
 8109a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8109a6e:	930e      	str	r3, [sp, #56]	; 0x38
 8109a70:	2300      	movs	r3, #0
 8109a72:	930d      	str	r3, [sp, #52]	; 0x34
 8109a74:	eb0a 0602 	add.w	r6, sl, r2
 8109a78:	9b04      	ldr	r3, [sp, #16]
 8109a7a:	45b2      	cmp	sl, r6
 8109a7c:	4417      	add	r7, r2
 8109a7e:	441f      	add	r7, r3
 8109a80:	4653      	mov	r3, sl
 8109a82:	bfa8      	it	ge
 8109a84:	4633      	movge	r3, r6
 8109a86:	42bb      	cmp	r3, r7
 8109a88:	bfa8      	it	ge
 8109a8a:	463b      	movge	r3, r7
 8109a8c:	2b00      	cmp	r3, #0
 8109a8e:	bfc2      	ittt	gt
 8109a90:	1af6      	subgt	r6, r6, r3
 8109a92:	1aff      	subgt	r7, r7, r3
 8109a94:	ebaa 0a03 	subgt.w	sl, sl, r3
 8109a98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8109a9a:	2b00      	cmp	r3, #0
 8109a9c:	dd17      	ble.n	8109ace <_strtod_l+0x736>
 8109a9e:	4659      	mov	r1, fp
 8109aa0:	461a      	mov	r2, r3
 8109aa2:	4620      	mov	r0, r4
 8109aa4:	f7ff f9ae 	bl	8108e04 <__pow5mult>
 8109aa8:	4683      	mov	fp, r0
 8109aaa:	2800      	cmp	r0, #0
 8109aac:	f43f aeb8 	beq.w	8109820 <_strtod_l+0x488>
 8109ab0:	4601      	mov	r1, r0
 8109ab2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8109ab4:	4620      	mov	r0, r4
 8109ab6:	f7ff f8fb 	bl	8108cb0 <__multiply>
 8109aba:	900b      	str	r0, [sp, #44]	; 0x2c
 8109abc:	2800      	cmp	r0, #0
 8109abe:	f43f aeaf 	beq.w	8109820 <_strtod_l+0x488>
 8109ac2:	9916      	ldr	r1, [sp, #88]	; 0x58
 8109ac4:	4620      	mov	r0, r4
 8109ac6:	f7fe ffdd 	bl	8108a84 <_Bfree>
 8109aca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109acc:	9316      	str	r3, [sp, #88]	; 0x58
 8109ace:	2e00      	cmp	r6, #0
 8109ad0:	f300 808c 	bgt.w	8109bec <_strtod_l+0x854>
 8109ad4:	9b08      	ldr	r3, [sp, #32]
 8109ad6:	2b00      	cmp	r3, #0
 8109ad8:	dd08      	ble.n	8109aec <_strtod_l+0x754>
 8109ada:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8109adc:	9905      	ldr	r1, [sp, #20]
 8109ade:	4620      	mov	r0, r4
 8109ae0:	f7ff f990 	bl	8108e04 <__pow5mult>
 8109ae4:	9005      	str	r0, [sp, #20]
 8109ae6:	2800      	cmp	r0, #0
 8109ae8:	f43f ae9a 	beq.w	8109820 <_strtod_l+0x488>
 8109aec:	2f00      	cmp	r7, #0
 8109aee:	dd08      	ble.n	8109b02 <_strtod_l+0x76a>
 8109af0:	9905      	ldr	r1, [sp, #20]
 8109af2:	463a      	mov	r2, r7
 8109af4:	4620      	mov	r0, r4
 8109af6:	f7ff f9df 	bl	8108eb8 <__lshift>
 8109afa:	9005      	str	r0, [sp, #20]
 8109afc:	2800      	cmp	r0, #0
 8109afe:	f43f ae8f 	beq.w	8109820 <_strtod_l+0x488>
 8109b02:	f1ba 0f00 	cmp.w	sl, #0
 8109b06:	dd08      	ble.n	8109b1a <_strtod_l+0x782>
 8109b08:	4659      	mov	r1, fp
 8109b0a:	4652      	mov	r2, sl
 8109b0c:	4620      	mov	r0, r4
 8109b0e:	f7ff f9d3 	bl	8108eb8 <__lshift>
 8109b12:	4683      	mov	fp, r0
 8109b14:	2800      	cmp	r0, #0
 8109b16:	f43f ae83 	beq.w	8109820 <_strtod_l+0x488>
 8109b1a:	9a05      	ldr	r2, [sp, #20]
 8109b1c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8109b1e:	4620      	mov	r0, r4
 8109b20:	f7ff fa52 	bl	8108fc8 <__mdiff>
 8109b24:	4605      	mov	r5, r0
 8109b26:	2800      	cmp	r0, #0
 8109b28:	f43f ae7a 	beq.w	8109820 <_strtod_l+0x488>
 8109b2c:	68c3      	ldr	r3, [r0, #12]
 8109b2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8109b30:	2300      	movs	r3, #0
 8109b32:	60c3      	str	r3, [r0, #12]
 8109b34:	4659      	mov	r1, fp
 8109b36:	f7ff fa2b 	bl	8108f90 <__mcmp>
 8109b3a:	2800      	cmp	r0, #0
 8109b3c:	da60      	bge.n	8109c00 <_strtod_l+0x868>
 8109b3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109b40:	ea53 0308 	orrs.w	r3, r3, r8
 8109b44:	f040 8084 	bne.w	8109c50 <_strtod_l+0x8b8>
 8109b48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8109b4c:	2b00      	cmp	r3, #0
 8109b4e:	d17f      	bne.n	8109c50 <_strtod_l+0x8b8>
 8109b50:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8109b54:	0d1b      	lsrs	r3, r3, #20
 8109b56:	051b      	lsls	r3, r3, #20
 8109b58:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8109b5c:	d978      	bls.n	8109c50 <_strtod_l+0x8b8>
 8109b5e:	696b      	ldr	r3, [r5, #20]
 8109b60:	b913      	cbnz	r3, 8109b68 <_strtod_l+0x7d0>
 8109b62:	692b      	ldr	r3, [r5, #16]
 8109b64:	2b01      	cmp	r3, #1
 8109b66:	dd73      	ble.n	8109c50 <_strtod_l+0x8b8>
 8109b68:	4629      	mov	r1, r5
 8109b6a:	2201      	movs	r2, #1
 8109b6c:	4620      	mov	r0, r4
 8109b6e:	f7ff f9a3 	bl	8108eb8 <__lshift>
 8109b72:	4659      	mov	r1, fp
 8109b74:	4605      	mov	r5, r0
 8109b76:	f7ff fa0b 	bl	8108f90 <__mcmp>
 8109b7a:	2800      	cmp	r0, #0
 8109b7c:	dd68      	ble.n	8109c50 <_strtod_l+0x8b8>
 8109b7e:	9904      	ldr	r1, [sp, #16]
 8109b80:	4a54      	ldr	r2, [pc, #336]	; (8109cd4 <_strtod_l+0x93c>)
 8109b82:	464b      	mov	r3, r9
 8109b84:	2900      	cmp	r1, #0
 8109b86:	f000 8084 	beq.w	8109c92 <_strtod_l+0x8fa>
 8109b8a:	ea02 0109 	and.w	r1, r2, r9
 8109b8e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8109b92:	dc7e      	bgt.n	8109c92 <_strtod_l+0x8fa>
 8109b94:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8109b98:	f77f aeb3 	ble.w	8109902 <_strtod_l+0x56a>
 8109b9c:	4b4e      	ldr	r3, [pc, #312]	; (8109cd8 <_strtod_l+0x940>)
 8109b9e:	4640      	mov	r0, r8
 8109ba0:	4649      	mov	r1, r9
 8109ba2:	2200      	movs	r2, #0
 8109ba4:	f7f6 fdb0 	bl	8100708 <__aeabi_dmul>
 8109ba8:	4b4a      	ldr	r3, [pc, #296]	; (8109cd4 <_strtod_l+0x93c>)
 8109baa:	400b      	ands	r3, r1
 8109bac:	4680      	mov	r8, r0
 8109bae:	4689      	mov	r9, r1
 8109bb0:	2b00      	cmp	r3, #0
 8109bb2:	f47f ae3f 	bne.w	8109834 <_strtod_l+0x49c>
 8109bb6:	2322      	movs	r3, #34	; 0x22
 8109bb8:	6023      	str	r3, [r4, #0]
 8109bba:	e63b      	b.n	8109834 <_strtod_l+0x49c>
 8109bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8109bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8109bc4:	ea03 0808 	and.w	r8, r3, r8
 8109bc8:	e6e8      	b.n	810999c <_strtod_l+0x604>
 8109bca:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8109bce:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8109bd2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8109bd6:	36e2      	adds	r6, #226	; 0xe2
 8109bd8:	fa01 f306 	lsl.w	r3, r1, r6
 8109bdc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8109be0:	e748      	b.n	8109a74 <_strtod_l+0x6dc>
 8109be2:	2100      	movs	r1, #0
 8109be4:	2301      	movs	r3, #1
 8109be6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8109bea:	e743      	b.n	8109a74 <_strtod_l+0x6dc>
 8109bec:	9916      	ldr	r1, [sp, #88]	; 0x58
 8109bee:	4632      	mov	r2, r6
 8109bf0:	4620      	mov	r0, r4
 8109bf2:	f7ff f961 	bl	8108eb8 <__lshift>
 8109bf6:	9016      	str	r0, [sp, #88]	; 0x58
 8109bf8:	2800      	cmp	r0, #0
 8109bfa:	f47f af6b 	bne.w	8109ad4 <_strtod_l+0x73c>
 8109bfe:	e60f      	b.n	8109820 <_strtod_l+0x488>
 8109c00:	46ca      	mov	sl, r9
 8109c02:	d171      	bne.n	8109ce8 <_strtod_l+0x950>
 8109c04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8109c06:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8109c0a:	b352      	cbz	r2, 8109c62 <_strtod_l+0x8ca>
 8109c0c:	4a33      	ldr	r2, [pc, #204]	; (8109cdc <_strtod_l+0x944>)
 8109c0e:	4293      	cmp	r3, r2
 8109c10:	d12a      	bne.n	8109c68 <_strtod_l+0x8d0>
 8109c12:	9b04      	ldr	r3, [sp, #16]
 8109c14:	4641      	mov	r1, r8
 8109c16:	b1fb      	cbz	r3, 8109c58 <_strtod_l+0x8c0>
 8109c18:	4b2e      	ldr	r3, [pc, #184]	; (8109cd4 <_strtod_l+0x93c>)
 8109c1a:	ea09 0303 	and.w	r3, r9, r3
 8109c1e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8109c22:	f04f 32ff 	mov.w	r2, #4294967295
 8109c26:	d81a      	bhi.n	8109c5e <_strtod_l+0x8c6>
 8109c28:	0d1b      	lsrs	r3, r3, #20
 8109c2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8109c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8109c32:	4299      	cmp	r1, r3
 8109c34:	d118      	bne.n	8109c68 <_strtod_l+0x8d0>
 8109c36:	4b2a      	ldr	r3, [pc, #168]	; (8109ce0 <_strtod_l+0x948>)
 8109c38:	459a      	cmp	sl, r3
 8109c3a:	d102      	bne.n	8109c42 <_strtod_l+0x8aa>
 8109c3c:	3101      	adds	r1, #1
 8109c3e:	f43f adef 	beq.w	8109820 <_strtod_l+0x488>
 8109c42:	4b24      	ldr	r3, [pc, #144]	; (8109cd4 <_strtod_l+0x93c>)
 8109c44:	ea0a 0303 	and.w	r3, sl, r3
 8109c48:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8109c4c:	f04f 0800 	mov.w	r8, #0
 8109c50:	9b04      	ldr	r3, [sp, #16]
 8109c52:	2b00      	cmp	r3, #0
 8109c54:	d1a2      	bne.n	8109b9c <_strtod_l+0x804>
 8109c56:	e5ed      	b.n	8109834 <_strtod_l+0x49c>
 8109c58:	f04f 33ff 	mov.w	r3, #4294967295
 8109c5c:	e7e9      	b.n	8109c32 <_strtod_l+0x89a>
 8109c5e:	4613      	mov	r3, r2
 8109c60:	e7e7      	b.n	8109c32 <_strtod_l+0x89a>
 8109c62:	ea53 0308 	orrs.w	r3, r3, r8
 8109c66:	d08a      	beq.n	8109b7e <_strtod_l+0x7e6>
 8109c68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8109c6a:	b1e3      	cbz	r3, 8109ca6 <_strtod_l+0x90e>
 8109c6c:	ea13 0f0a 	tst.w	r3, sl
 8109c70:	d0ee      	beq.n	8109c50 <_strtod_l+0x8b8>
 8109c72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109c74:	9a04      	ldr	r2, [sp, #16]
 8109c76:	4640      	mov	r0, r8
 8109c78:	4649      	mov	r1, r9
 8109c7a:	b1c3      	cbz	r3, 8109cae <_strtod_l+0x916>
 8109c7c:	f7ff fb6f 	bl	810935e <sulp>
 8109c80:	4602      	mov	r2, r0
 8109c82:	460b      	mov	r3, r1
 8109c84:	ec51 0b18 	vmov	r0, r1, d8
 8109c88:	f7f6 fb88 	bl	810039c <__adddf3>
 8109c8c:	4680      	mov	r8, r0
 8109c8e:	4689      	mov	r9, r1
 8109c90:	e7de      	b.n	8109c50 <_strtod_l+0x8b8>
 8109c92:	4013      	ands	r3, r2
 8109c94:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8109c98:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8109c9c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8109ca0:	f04f 38ff 	mov.w	r8, #4294967295
 8109ca4:	e7d4      	b.n	8109c50 <_strtod_l+0x8b8>
 8109ca6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8109ca8:	ea13 0f08 	tst.w	r3, r8
 8109cac:	e7e0      	b.n	8109c70 <_strtod_l+0x8d8>
 8109cae:	f7ff fb56 	bl	810935e <sulp>
 8109cb2:	4602      	mov	r2, r0
 8109cb4:	460b      	mov	r3, r1
 8109cb6:	ec51 0b18 	vmov	r0, r1, d8
 8109cba:	f7f6 fb6d 	bl	8100398 <__aeabi_dsub>
 8109cbe:	2200      	movs	r2, #0
 8109cc0:	2300      	movs	r3, #0
 8109cc2:	4680      	mov	r8, r0
 8109cc4:	4689      	mov	r9, r1
 8109cc6:	f7f6 ff87 	bl	8100bd8 <__aeabi_dcmpeq>
 8109cca:	2800      	cmp	r0, #0
 8109ccc:	d0c0      	beq.n	8109c50 <_strtod_l+0x8b8>
 8109cce:	e618      	b.n	8109902 <_strtod_l+0x56a>
 8109cd0:	fffffc02 	.word	0xfffffc02
 8109cd4:	7ff00000 	.word	0x7ff00000
 8109cd8:	39500000 	.word	0x39500000
 8109cdc:	000fffff 	.word	0x000fffff
 8109ce0:	7fefffff 	.word	0x7fefffff
 8109ce4:	0810b9a0 	.word	0x0810b9a0
 8109ce8:	4659      	mov	r1, fp
 8109cea:	4628      	mov	r0, r5
 8109cec:	f7ff fac0 	bl	8109270 <__ratio>
 8109cf0:	ec57 6b10 	vmov	r6, r7, d0
 8109cf4:	ee10 0a10 	vmov	r0, s0
 8109cf8:	2200      	movs	r2, #0
 8109cfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8109cfe:	4639      	mov	r1, r7
 8109d00:	f7f6 ff7e 	bl	8100c00 <__aeabi_dcmple>
 8109d04:	2800      	cmp	r0, #0
 8109d06:	d071      	beq.n	8109dec <_strtod_l+0xa54>
 8109d08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109d0a:	2b00      	cmp	r3, #0
 8109d0c:	d17c      	bne.n	8109e08 <_strtod_l+0xa70>
 8109d0e:	f1b8 0f00 	cmp.w	r8, #0
 8109d12:	d15a      	bne.n	8109dca <_strtod_l+0xa32>
 8109d14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8109d18:	2b00      	cmp	r3, #0
 8109d1a:	d15d      	bne.n	8109dd8 <_strtod_l+0xa40>
 8109d1c:	4b90      	ldr	r3, [pc, #576]	; (8109f60 <_strtod_l+0xbc8>)
 8109d1e:	2200      	movs	r2, #0
 8109d20:	4630      	mov	r0, r6
 8109d22:	4639      	mov	r1, r7
 8109d24:	f7f6 ff62 	bl	8100bec <__aeabi_dcmplt>
 8109d28:	2800      	cmp	r0, #0
 8109d2a:	d15c      	bne.n	8109de6 <_strtod_l+0xa4e>
 8109d2c:	4630      	mov	r0, r6
 8109d2e:	4639      	mov	r1, r7
 8109d30:	4b8c      	ldr	r3, [pc, #560]	; (8109f64 <_strtod_l+0xbcc>)
 8109d32:	2200      	movs	r2, #0
 8109d34:	f7f6 fce8 	bl	8100708 <__aeabi_dmul>
 8109d38:	4606      	mov	r6, r0
 8109d3a:	460f      	mov	r7, r1
 8109d3c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8109d40:	9606      	str	r6, [sp, #24]
 8109d42:	9307      	str	r3, [sp, #28]
 8109d44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8109d48:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8109d4c:	4b86      	ldr	r3, [pc, #536]	; (8109f68 <_strtod_l+0xbd0>)
 8109d4e:	ea0a 0303 	and.w	r3, sl, r3
 8109d52:	930d      	str	r3, [sp, #52]	; 0x34
 8109d54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8109d56:	4b85      	ldr	r3, [pc, #532]	; (8109f6c <_strtod_l+0xbd4>)
 8109d58:	429a      	cmp	r2, r3
 8109d5a:	f040 8090 	bne.w	8109e7e <_strtod_l+0xae6>
 8109d5e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8109d62:	ec49 8b10 	vmov	d0, r8, r9
 8109d66:	f7ff f9b9 	bl	81090dc <__ulp>
 8109d6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8109d6e:	ec51 0b10 	vmov	r0, r1, d0
 8109d72:	f7f6 fcc9 	bl	8100708 <__aeabi_dmul>
 8109d76:	4642      	mov	r2, r8
 8109d78:	464b      	mov	r3, r9
 8109d7a:	f7f6 fb0f 	bl	810039c <__adddf3>
 8109d7e:	460b      	mov	r3, r1
 8109d80:	4979      	ldr	r1, [pc, #484]	; (8109f68 <_strtod_l+0xbd0>)
 8109d82:	4a7b      	ldr	r2, [pc, #492]	; (8109f70 <_strtod_l+0xbd8>)
 8109d84:	4019      	ands	r1, r3
 8109d86:	4291      	cmp	r1, r2
 8109d88:	4680      	mov	r8, r0
 8109d8a:	d944      	bls.n	8109e16 <_strtod_l+0xa7e>
 8109d8c:	ee18 2a90 	vmov	r2, s17
 8109d90:	4b78      	ldr	r3, [pc, #480]	; (8109f74 <_strtod_l+0xbdc>)
 8109d92:	429a      	cmp	r2, r3
 8109d94:	d104      	bne.n	8109da0 <_strtod_l+0xa08>
 8109d96:	ee18 3a10 	vmov	r3, s16
 8109d9a:	3301      	adds	r3, #1
 8109d9c:	f43f ad40 	beq.w	8109820 <_strtod_l+0x488>
 8109da0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8109f74 <_strtod_l+0xbdc>
 8109da4:	f04f 38ff 	mov.w	r8, #4294967295
 8109da8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8109daa:	4620      	mov	r0, r4
 8109dac:	f7fe fe6a 	bl	8108a84 <_Bfree>
 8109db0:	9905      	ldr	r1, [sp, #20]
 8109db2:	4620      	mov	r0, r4
 8109db4:	f7fe fe66 	bl	8108a84 <_Bfree>
 8109db8:	4659      	mov	r1, fp
 8109dba:	4620      	mov	r0, r4
 8109dbc:	f7fe fe62 	bl	8108a84 <_Bfree>
 8109dc0:	4629      	mov	r1, r5
 8109dc2:	4620      	mov	r0, r4
 8109dc4:	f7fe fe5e 	bl	8108a84 <_Bfree>
 8109dc8:	e609      	b.n	81099de <_strtod_l+0x646>
 8109dca:	f1b8 0f01 	cmp.w	r8, #1
 8109dce:	d103      	bne.n	8109dd8 <_strtod_l+0xa40>
 8109dd0:	f1b9 0f00 	cmp.w	r9, #0
 8109dd4:	f43f ad95 	beq.w	8109902 <_strtod_l+0x56a>
 8109dd8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8109f30 <_strtod_l+0xb98>
 8109ddc:	4f60      	ldr	r7, [pc, #384]	; (8109f60 <_strtod_l+0xbc8>)
 8109dde:	ed8d 7b06 	vstr	d7, [sp, #24]
 8109de2:	2600      	movs	r6, #0
 8109de4:	e7ae      	b.n	8109d44 <_strtod_l+0x9ac>
 8109de6:	4f5f      	ldr	r7, [pc, #380]	; (8109f64 <_strtod_l+0xbcc>)
 8109de8:	2600      	movs	r6, #0
 8109dea:	e7a7      	b.n	8109d3c <_strtod_l+0x9a4>
 8109dec:	4b5d      	ldr	r3, [pc, #372]	; (8109f64 <_strtod_l+0xbcc>)
 8109dee:	4630      	mov	r0, r6
 8109df0:	4639      	mov	r1, r7
 8109df2:	2200      	movs	r2, #0
 8109df4:	f7f6 fc88 	bl	8100708 <__aeabi_dmul>
 8109df8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109dfa:	4606      	mov	r6, r0
 8109dfc:	460f      	mov	r7, r1
 8109dfe:	2b00      	cmp	r3, #0
 8109e00:	d09c      	beq.n	8109d3c <_strtod_l+0x9a4>
 8109e02:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8109e06:	e79d      	b.n	8109d44 <_strtod_l+0x9ac>
 8109e08:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8109f38 <_strtod_l+0xba0>
 8109e0c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8109e10:	ec57 6b17 	vmov	r6, r7, d7
 8109e14:	e796      	b.n	8109d44 <_strtod_l+0x9ac>
 8109e16:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8109e1a:	9b04      	ldr	r3, [sp, #16]
 8109e1c:	46ca      	mov	sl, r9
 8109e1e:	2b00      	cmp	r3, #0
 8109e20:	d1c2      	bne.n	8109da8 <_strtod_l+0xa10>
 8109e22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8109e26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8109e28:	0d1b      	lsrs	r3, r3, #20
 8109e2a:	051b      	lsls	r3, r3, #20
 8109e2c:	429a      	cmp	r2, r3
 8109e2e:	d1bb      	bne.n	8109da8 <_strtod_l+0xa10>
 8109e30:	4630      	mov	r0, r6
 8109e32:	4639      	mov	r1, r7
 8109e34:	f7f6 ffc8 	bl	8100dc8 <__aeabi_d2lz>
 8109e38:	f7f6 fc38 	bl	81006ac <__aeabi_l2d>
 8109e3c:	4602      	mov	r2, r0
 8109e3e:	460b      	mov	r3, r1
 8109e40:	4630      	mov	r0, r6
 8109e42:	4639      	mov	r1, r7
 8109e44:	f7f6 faa8 	bl	8100398 <__aeabi_dsub>
 8109e48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8109e4a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8109e4e:	ea43 0308 	orr.w	r3, r3, r8
 8109e52:	4313      	orrs	r3, r2
 8109e54:	4606      	mov	r6, r0
 8109e56:	460f      	mov	r7, r1
 8109e58:	d054      	beq.n	8109f04 <_strtod_l+0xb6c>
 8109e5a:	a339      	add	r3, pc, #228	; (adr r3, 8109f40 <_strtod_l+0xba8>)
 8109e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109e60:	f7f6 fec4 	bl	8100bec <__aeabi_dcmplt>
 8109e64:	2800      	cmp	r0, #0
 8109e66:	f47f ace5 	bne.w	8109834 <_strtod_l+0x49c>
 8109e6a:	a337      	add	r3, pc, #220	; (adr r3, 8109f48 <_strtod_l+0xbb0>)
 8109e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109e70:	4630      	mov	r0, r6
 8109e72:	4639      	mov	r1, r7
 8109e74:	f7f6 fed8 	bl	8100c28 <__aeabi_dcmpgt>
 8109e78:	2800      	cmp	r0, #0
 8109e7a:	d095      	beq.n	8109da8 <_strtod_l+0xa10>
 8109e7c:	e4da      	b.n	8109834 <_strtod_l+0x49c>
 8109e7e:	9b04      	ldr	r3, [sp, #16]
 8109e80:	b333      	cbz	r3, 8109ed0 <_strtod_l+0xb38>
 8109e82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8109e84:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8109e88:	d822      	bhi.n	8109ed0 <_strtod_l+0xb38>
 8109e8a:	a331      	add	r3, pc, #196	; (adr r3, 8109f50 <_strtod_l+0xbb8>)
 8109e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109e90:	4630      	mov	r0, r6
 8109e92:	4639      	mov	r1, r7
 8109e94:	f7f6 feb4 	bl	8100c00 <__aeabi_dcmple>
 8109e98:	b1a0      	cbz	r0, 8109ec4 <_strtod_l+0xb2c>
 8109e9a:	4639      	mov	r1, r7
 8109e9c:	4630      	mov	r0, r6
 8109e9e:	f7f6 ff0b 	bl	8100cb8 <__aeabi_d2uiz>
 8109ea2:	2801      	cmp	r0, #1
 8109ea4:	bf38      	it	cc
 8109ea6:	2001      	movcc	r0, #1
 8109ea8:	f7f6 fbb4 	bl	8100614 <__aeabi_ui2d>
 8109eac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109eae:	4606      	mov	r6, r0
 8109eb0:	460f      	mov	r7, r1
 8109eb2:	bb23      	cbnz	r3, 8109efe <_strtod_l+0xb66>
 8109eb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8109eb8:	9010      	str	r0, [sp, #64]	; 0x40
 8109eba:	9311      	str	r3, [sp, #68]	; 0x44
 8109ebc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8109ec0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8109ec4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8109ec6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8109ec8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8109ecc:	1a9b      	subs	r3, r3, r2
 8109ece:	930f      	str	r3, [sp, #60]	; 0x3c
 8109ed0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8109ed4:	eeb0 0a48 	vmov.f32	s0, s16
 8109ed8:	eef0 0a68 	vmov.f32	s1, s17
 8109edc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8109ee0:	f7ff f8fc 	bl	81090dc <__ulp>
 8109ee4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8109ee8:	ec53 2b10 	vmov	r2, r3, d0
 8109eec:	f7f6 fc0c 	bl	8100708 <__aeabi_dmul>
 8109ef0:	ec53 2b18 	vmov	r2, r3, d8
 8109ef4:	f7f6 fa52 	bl	810039c <__adddf3>
 8109ef8:	4680      	mov	r8, r0
 8109efa:	4689      	mov	r9, r1
 8109efc:	e78d      	b.n	8109e1a <_strtod_l+0xa82>
 8109efe:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8109f02:	e7db      	b.n	8109ebc <_strtod_l+0xb24>
 8109f04:	a314      	add	r3, pc, #80	; (adr r3, 8109f58 <_strtod_l+0xbc0>)
 8109f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109f0a:	f7f6 fe6f 	bl	8100bec <__aeabi_dcmplt>
 8109f0e:	e7b3      	b.n	8109e78 <_strtod_l+0xae0>
 8109f10:	2300      	movs	r3, #0
 8109f12:	930a      	str	r3, [sp, #40]	; 0x28
 8109f14:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8109f16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8109f18:	6013      	str	r3, [r2, #0]
 8109f1a:	f7ff ba7c 	b.w	8109416 <_strtod_l+0x7e>
 8109f1e:	2a65      	cmp	r2, #101	; 0x65
 8109f20:	f43f ab75 	beq.w	810960e <_strtod_l+0x276>
 8109f24:	2a45      	cmp	r2, #69	; 0x45
 8109f26:	f43f ab72 	beq.w	810960e <_strtod_l+0x276>
 8109f2a:	2301      	movs	r3, #1
 8109f2c:	f7ff bbaa 	b.w	8109684 <_strtod_l+0x2ec>
 8109f30:	00000000 	.word	0x00000000
 8109f34:	bff00000 	.word	0xbff00000
 8109f38:	00000000 	.word	0x00000000
 8109f3c:	3ff00000 	.word	0x3ff00000
 8109f40:	94a03595 	.word	0x94a03595
 8109f44:	3fdfffff 	.word	0x3fdfffff
 8109f48:	35afe535 	.word	0x35afe535
 8109f4c:	3fe00000 	.word	0x3fe00000
 8109f50:	ffc00000 	.word	0xffc00000
 8109f54:	41dfffff 	.word	0x41dfffff
 8109f58:	94a03595 	.word	0x94a03595
 8109f5c:	3fcfffff 	.word	0x3fcfffff
 8109f60:	3ff00000 	.word	0x3ff00000
 8109f64:	3fe00000 	.word	0x3fe00000
 8109f68:	7ff00000 	.word	0x7ff00000
 8109f6c:	7fe00000 	.word	0x7fe00000
 8109f70:	7c9fffff 	.word	0x7c9fffff
 8109f74:	7fefffff 	.word	0x7fefffff

08109f78 <_strtod_r>:
 8109f78:	4b01      	ldr	r3, [pc, #4]	; (8109f80 <_strtod_r+0x8>)
 8109f7a:	f7ff ba0d 	b.w	8109398 <_strtod_l>
 8109f7e:	bf00      	nop
 8109f80:	1000007c 	.word	0x1000007c

08109f84 <_strtol_l.constprop.0>:
 8109f84:	2b01      	cmp	r3, #1
 8109f86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8109f8a:	d001      	beq.n	8109f90 <_strtol_l.constprop.0+0xc>
 8109f8c:	2b24      	cmp	r3, #36	; 0x24
 8109f8e:	d906      	bls.n	8109f9e <_strtol_l.constprop.0+0x1a>
 8109f90:	f7fd fd7a 	bl	8107a88 <__errno>
 8109f94:	2316      	movs	r3, #22
 8109f96:	6003      	str	r3, [r0, #0]
 8109f98:	2000      	movs	r0, #0
 8109f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109f9e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 810a084 <_strtol_l.constprop.0+0x100>
 8109fa2:	460d      	mov	r5, r1
 8109fa4:	462e      	mov	r6, r5
 8109fa6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8109faa:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8109fae:	f017 0708 	ands.w	r7, r7, #8
 8109fb2:	d1f7      	bne.n	8109fa4 <_strtol_l.constprop.0+0x20>
 8109fb4:	2c2d      	cmp	r4, #45	; 0x2d
 8109fb6:	d132      	bne.n	810a01e <_strtol_l.constprop.0+0x9a>
 8109fb8:	782c      	ldrb	r4, [r5, #0]
 8109fba:	2701      	movs	r7, #1
 8109fbc:	1cb5      	adds	r5, r6, #2
 8109fbe:	2b00      	cmp	r3, #0
 8109fc0:	d05b      	beq.n	810a07a <_strtol_l.constprop.0+0xf6>
 8109fc2:	2b10      	cmp	r3, #16
 8109fc4:	d109      	bne.n	8109fda <_strtol_l.constprop.0+0x56>
 8109fc6:	2c30      	cmp	r4, #48	; 0x30
 8109fc8:	d107      	bne.n	8109fda <_strtol_l.constprop.0+0x56>
 8109fca:	782c      	ldrb	r4, [r5, #0]
 8109fcc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8109fd0:	2c58      	cmp	r4, #88	; 0x58
 8109fd2:	d14d      	bne.n	810a070 <_strtol_l.constprop.0+0xec>
 8109fd4:	786c      	ldrb	r4, [r5, #1]
 8109fd6:	2310      	movs	r3, #16
 8109fd8:	3502      	adds	r5, #2
 8109fda:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8109fde:	f108 38ff 	add.w	r8, r8, #4294967295
 8109fe2:	f04f 0e00 	mov.w	lr, #0
 8109fe6:	fbb8 f9f3 	udiv	r9, r8, r3
 8109fea:	4676      	mov	r6, lr
 8109fec:	fb03 8a19 	mls	sl, r3, r9, r8
 8109ff0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8109ff4:	f1bc 0f09 	cmp.w	ip, #9
 8109ff8:	d816      	bhi.n	810a028 <_strtol_l.constprop.0+0xa4>
 8109ffa:	4664      	mov	r4, ip
 8109ffc:	42a3      	cmp	r3, r4
 8109ffe:	dd24      	ble.n	810a04a <_strtol_l.constprop.0+0xc6>
 810a000:	f1be 3fff 	cmp.w	lr, #4294967295
 810a004:	d008      	beq.n	810a018 <_strtol_l.constprop.0+0x94>
 810a006:	45b1      	cmp	r9, r6
 810a008:	d31c      	bcc.n	810a044 <_strtol_l.constprop.0+0xc0>
 810a00a:	d101      	bne.n	810a010 <_strtol_l.constprop.0+0x8c>
 810a00c:	45a2      	cmp	sl, r4
 810a00e:	db19      	blt.n	810a044 <_strtol_l.constprop.0+0xc0>
 810a010:	fb06 4603 	mla	r6, r6, r3, r4
 810a014:	f04f 0e01 	mov.w	lr, #1
 810a018:	f815 4b01 	ldrb.w	r4, [r5], #1
 810a01c:	e7e8      	b.n	8109ff0 <_strtol_l.constprop.0+0x6c>
 810a01e:	2c2b      	cmp	r4, #43	; 0x2b
 810a020:	bf04      	itt	eq
 810a022:	782c      	ldrbeq	r4, [r5, #0]
 810a024:	1cb5      	addeq	r5, r6, #2
 810a026:	e7ca      	b.n	8109fbe <_strtol_l.constprop.0+0x3a>
 810a028:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 810a02c:	f1bc 0f19 	cmp.w	ip, #25
 810a030:	d801      	bhi.n	810a036 <_strtol_l.constprop.0+0xb2>
 810a032:	3c37      	subs	r4, #55	; 0x37
 810a034:	e7e2      	b.n	8109ffc <_strtol_l.constprop.0+0x78>
 810a036:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 810a03a:	f1bc 0f19 	cmp.w	ip, #25
 810a03e:	d804      	bhi.n	810a04a <_strtol_l.constprop.0+0xc6>
 810a040:	3c57      	subs	r4, #87	; 0x57
 810a042:	e7db      	b.n	8109ffc <_strtol_l.constprop.0+0x78>
 810a044:	f04f 3eff 	mov.w	lr, #4294967295
 810a048:	e7e6      	b.n	810a018 <_strtol_l.constprop.0+0x94>
 810a04a:	f1be 3fff 	cmp.w	lr, #4294967295
 810a04e:	d105      	bne.n	810a05c <_strtol_l.constprop.0+0xd8>
 810a050:	2322      	movs	r3, #34	; 0x22
 810a052:	6003      	str	r3, [r0, #0]
 810a054:	4646      	mov	r6, r8
 810a056:	b942      	cbnz	r2, 810a06a <_strtol_l.constprop.0+0xe6>
 810a058:	4630      	mov	r0, r6
 810a05a:	e79e      	b.n	8109f9a <_strtol_l.constprop.0+0x16>
 810a05c:	b107      	cbz	r7, 810a060 <_strtol_l.constprop.0+0xdc>
 810a05e:	4276      	negs	r6, r6
 810a060:	2a00      	cmp	r2, #0
 810a062:	d0f9      	beq.n	810a058 <_strtol_l.constprop.0+0xd4>
 810a064:	f1be 0f00 	cmp.w	lr, #0
 810a068:	d000      	beq.n	810a06c <_strtol_l.constprop.0+0xe8>
 810a06a:	1e69      	subs	r1, r5, #1
 810a06c:	6011      	str	r1, [r2, #0]
 810a06e:	e7f3      	b.n	810a058 <_strtol_l.constprop.0+0xd4>
 810a070:	2430      	movs	r4, #48	; 0x30
 810a072:	2b00      	cmp	r3, #0
 810a074:	d1b1      	bne.n	8109fda <_strtol_l.constprop.0+0x56>
 810a076:	2308      	movs	r3, #8
 810a078:	e7af      	b.n	8109fda <_strtol_l.constprop.0+0x56>
 810a07a:	2c30      	cmp	r4, #48	; 0x30
 810a07c:	d0a5      	beq.n	8109fca <_strtol_l.constprop.0+0x46>
 810a07e:	230a      	movs	r3, #10
 810a080:	e7ab      	b.n	8109fda <_strtol_l.constprop.0+0x56>
 810a082:	bf00      	nop
 810a084:	0810b9c9 	.word	0x0810b9c9

0810a088 <_strtol_r>:
 810a088:	f7ff bf7c 	b.w	8109f84 <_strtol_l.constprop.0>

0810a08c <__ssputs_r>:
 810a08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810a090:	688e      	ldr	r6, [r1, #8]
 810a092:	461f      	mov	r7, r3
 810a094:	42be      	cmp	r6, r7
 810a096:	680b      	ldr	r3, [r1, #0]
 810a098:	4682      	mov	sl, r0
 810a09a:	460c      	mov	r4, r1
 810a09c:	4690      	mov	r8, r2
 810a09e:	d82c      	bhi.n	810a0fa <__ssputs_r+0x6e>
 810a0a0:	898a      	ldrh	r2, [r1, #12]
 810a0a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810a0a6:	d026      	beq.n	810a0f6 <__ssputs_r+0x6a>
 810a0a8:	6965      	ldr	r5, [r4, #20]
 810a0aa:	6909      	ldr	r1, [r1, #16]
 810a0ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810a0b0:	eba3 0901 	sub.w	r9, r3, r1
 810a0b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810a0b8:	1c7b      	adds	r3, r7, #1
 810a0ba:	444b      	add	r3, r9
 810a0bc:	106d      	asrs	r5, r5, #1
 810a0be:	429d      	cmp	r5, r3
 810a0c0:	bf38      	it	cc
 810a0c2:	461d      	movcc	r5, r3
 810a0c4:	0553      	lsls	r3, r2, #21
 810a0c6:	d527      	bpl.n	810a118 <__ssputs_r+0x8c>
 810a0c8:	4629      	mov	r1, r5
 810a0ca:	f7fe fc0f 	bl	81088ec <_malloc_r>
 810a0ce:	4606      	mov	r6, r0
 810a0d0:	b360      	cbz	r0, 810a12c <__ssputs_r+0xa0>
 810a0d2:	6921      	ldr	r1, [r4, #16]
 810a0d4:	464a      	mov	r2, r9
 810a0d6:	f7fd fd04 	bl	8107ae2 <memcpy>
 810a0da:	89a3      	ldrh	r3, [r4, #12]
 810a0dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810a0e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810a0e4:	81a3      	strh	r3, [r4, #12]
 810a0e6:	6126      	str	r6, [r4, #16]
 810a0e8:	6165      	str	r5, [r4, #20]
 810a0ea:	444e      	add	r6, r9
 810a0ec:	eba5 0509 	sub.w	r5, r5, r9
 810a0f0:	6026      	str	r6, [r4, #0]
 810a0f2:	60a5      	str	r5, [r4, #8]
 810a0f4:	463e      	mov	r6, r7
 810a0f6:	42be      	cmp	r6, r7
 810a0f8:	d900      	bls.n	810a0fc <__ssputs_r+0x70>
 810a0fa:	463e      	mov	r6, r7
 810a0fc:	6820      	ldr	r0, [r4, #0]
 810a0fe:	4632      	mov	r2, r6
 810a100:	4641      	mov	r1, r8
 810a102:	f000 fb6f 	bl	810a7e4 <memmove>
 810a106:	68a3      	ldr	r3, [r4, #8]
 810a108:	1b9b      	subs	r3, r3, r6
 810a10a:	60a3      	str	r3, [r4, #8]
 810a10c:	6823      	ldr	r3, [r4, #0]
 810a10e:	4433      	add	r3, r6
 810a110:	6023      	str	r3, [r4, #0]
 810a112:	2000      	movs	r0, #0
 810a114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a118:	462a      	mov	r2, r5
 810a11a:	f000 ff66 	bl	810afea <_realloc_r>
 810a11e:	4606      	mov	r6, r0
 810a120:	2800      	cmp	r0, #0
 810a122:	d1e0      	bne.n	810a0e6 <__ssputs_r+0x5a>
 810a124:	6921      	ldr	r1, [r4, #16]
 810a126:	4650      	mov	r0, sl
 810a128:	f7fe fb6c 	bl	8108804 <_free_r>
 810a12c:	230c      	movs	r3, #12
 810a12e:	f8ca 3000 	str.w	r3, [sl]
 810a132:	89a3      	ldrh	r3, [r4, #12]
 810a134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810a138:	81a3      	strh	r3, [r4, #12]
 810a13a:	f04f 30ff 	mov.w	r0, #4294967295
 810a13e:	e7e9      	b.n	810a114 <__ssputs_r+0x88>

0810a140 <_svfiprintf_r>:
 810a140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a144:	4698      	mov	r8, r3
 810a146:	898b      	ldrh	r3, [r1, #12]
 810a148:	061b      	lsls	r3, r3, #24
 810a14a:	b09d      	sub	sp, #116	; 0x74
 810a14c:	4607      	mov	r7, r0
 810a14e:	460d      	mov	r5, r1
 810a150:	4614      	mov	r4, r2
 810a152:	d50e      	bpl.n	810a172 <_svfiprintf_r+0x32>
 810a154:	690b      	ldr	r3, [r1, #16]
 810a156:	b963      	cbnz	r3, 810a172 <_svfiprintf_r+0x32>
 810a158:	2140      	movs	r1, #64	; 0x40
 810a15a:	f7fe fbc7 	bl	81088ec <_malloc_r>
 810a15e:	6028      	str	r0, [r5, #0]
 810a160:	6128      	str	r0, [r5, #16]
 810a162:	b920      	cbnz	r0, 810a16e <_svfiprintf_r+0x2e>
 810a164:	230c      	movs	r3, #12
 810a166:	603b      	str	r3, [r7, #0]
 810a168:	f04f 30ff 	mov.w	r0, #4294967295
 810a16c:	e0d0      	b.n	810a310 <_svfiprintf_r+0x1d0>
 810a16e:	2340      	movs	r3, #64	; 0x40
 810a170:	616b      	str	r3, [r5, #20]
 810a172:	2300      	movs	r3, #0
 810a174:	9309      	str	r3, [sp, #36]	; 0x24
 810a176:	2320      	movs	r3, #32
 810a178:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810a17c:	f8cd 800c 	str.w	r8, [sp, #12]
 810a180:	2330      	movs	r3, #48	; 0x30
 810a182:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 810a328 <_svfiprintf_r+0x1e8>
 810a186:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810a18a:	f04f 0901 	mov.w	r9, #1
 810a18e:	4623      	mov	r3, r4
 810a190:	469a      	mov	sl, r3
 810a192:	f813 2b01 	ldrb.w	r2, [r3], #1
 810a196:	b10a      	cbz	r2, 810a19c <_svfiprintf_r+0x5c>
 810a198:	2a25      	cmp	r2, #37	; 0x25
 810a19a:	d1f9      	bne.n	810a190 <_svfiprintf_r+0x50>
 810a19c:	ebba 0b04 	subs.w	fp, sl, r4
 810a1a0:	d00b      	beq.n	810a1ba <_svfiprintf_r+0x7a>
 810a1a2:	465b      	mov	r3, fp
 810a1a4:	4622      	mov	r2, r4
 810a1a6:	4629      	mov	r1, r5
 810a1a8:	4638      	mov	r0, r7
 810a1aa:	f7ff ff6f 	bl	810a08c <__ssputs_r>
 810a1ae:	3001      	adds	r0, #1
 810a1b0:	f000 80a9 	beq.w	810a306 <_svfiprintf_r+0x1c6>
 810a1b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810a1b6:	445a      	add	r2, fp
 810a1b8:	9209      	str	r2, [sp, #36]	; 0x24
 810a1ba:	f89a 3000 	ldrb.w	r3, [sl]
 810a1be:	2b00      	cmp	r3, #0
 810a1c0:	f000 80a1 	beq.w	810a306 <_svfiprintf_r+0x1c6>
 810a1c4:	2300      	movs	r3, #0
 810a1c6:	f04f 32ff 	mov.w	r2, #4294967295
 810a1ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810a1ce:	f10a 0a01 	add.w	sl, sl, #1
 810a1d2:	9304      	str	r3, [sp, #16]
 810a1d4:	9307      	str	r3, [sp, #28]
 810a1d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810a1da:	931a      	str	r3, [sp, #104]	; 0x68
 810a1dc:	4654      	mov	r4, sl
 810a1de:	2205      	movs	r2, #5
 810a1e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a1e4:	4850      	ldr	r0, [pc, #320]	; (810a328 <_svfiprintf_r+0x1e8>)
 810a1e6:	f7f6 f87b 	bl	81002e0 <memchr>
 810a1ea:	9a04      	ldr	r2, [sp, #16]
 810a1ec:	b9d8      	cbnz	r0, 810a226 <_svfiprintf_r+0xe6>
 810a1ee:	06d0      	lsls	r0, r2, #27
 810a1f0:	bf44      	itt	mi
 810a1f2:	2320      	movmi	r3, #32
 810a1f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810a1f8:	0711      	lsls	r1, r2, #28
 810a1fa:	bf44      	itt	mi
 810a1fc:	232b      	movmi	r3, #43	; 0x2b
 810a1fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810a202:	f89a 3000 	ldrb.w	r3, [sl]
 810a206:	2b2a      	cmp	r3, #42	; 0x2a
 810a208:	d015      	beq.n	810a236 <_svfiprintf_r+0xf6>
 810a20a:	9a07      	ldr	r2, [sp, #28]
 810a20c:	4654      	mov	r4, sl
 810a20e:	2000      	movs	r0, #0
 810a210:	f04f 0c0a 	mov.w	ip, #10
 810a214:	4621      	mov	r1, r4
 810a216:	f811 3b01 	ldrb.w	r3, [r1], #1
 810a21a:	3b30      	subs	r3, #48	; 0x30
 810a21c:	2b09      	cmp	r3, #9
 810a21e:	d94d      	bls.n	810a2bc <_svfiprintf_r+0x17c>
 810a220:	b1b0      	cbz	r0, 810a250 <_svfiprintf_r+0x110>
 810a222:	9207      	str	r2, [sp, #28]
 810a224:	e014      	b.n	810a250 <_svfiprintf_r+0x110>
 810a226:	eba0 0308 	sub.w	r3, r0, r8
 810a22a:	fa09 f303 	lsl.w	r3, r9, r3
 810a22e:	4313      	orrs	r3, r2
 810a230:	9304      	str	r3, [sp, #16]
 810a232:	46a2      	mov	sl, r4
 810a234:	e7d2      	b.n	810a1dc <_svfiprintf_r+0x9c>
 810a236:	9b03      	ldr	r3, [sp, #12]
 810a238:	1d19      	adds	r1, r3, #4
 810a23a:	681b      	ldr	r3, [r3, #0]
 810a23c:	9103      	str	r1, [sp, #12]
 810a23e:	2b00      	cmp	r3, #0
 810a240:	bfbb      	ittet	lt
 810a242:	425b      	neglt	r3, r3
 810a244:	f042 0202 	orrlt.w	r2, r2, #2
 810a248:	9307      	strge	r3, [sp, #28]
 810a24a:	9307      	strlt	r3, [sp, #28]
 810a24c:	bfb8      	it	lt
 810a24e:	9204      	strlt	r2, [sp, #16]
 810a250:	7823      	ldrb	r3, [r4, #0]
 810a252:	2b2e      	cmp	r3, #46	; 0x2e
 810a254:	d10c      	bne.n	810a270 <_svfiprintf_r+0x130>
 810a256:	7863      	ldrb	r3, [r4, #1]
 810a258:	2b2a      	cmp	r3, #42	; 0x2a
 810a25a:	d134      	bne.n	810a2c6 <_svfiprintf_r+0x186>
 810a25c:	9b03      	ldr	r3, [sp, #12]
 810a25e:	1d1a      	adds	r2, r3, #4
 810a260:	681b      	ldr	r3, [r3, #0]
 810a262:	9203      	str	r2, [sp, #12]
 810a264:	2b00      	cmp	r3, #0
 810a266:	bfb8      	it	lt
 810a268:	f04f 33ff 	movlt.w	r3, #4294967295
 810a26c:	3402      	adds	r4, #2
 810a26e:	9305      	str	r3, [sp, #20]
 810a270:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 810a338 <_svfiprintf_r+0x1f8>
 810a274:	7821      	ldrb	r1, [r4, #0]
 810a276:	2203      	movs	r2, #3
 810a278:	4650      	mov	r0, sl
 810a27a:	f7f6 f831 	bl	81002e0 <memchr>
 810a27e:	b138      	cbz	r0, 810a290 <_svfiprintf_r+0x150>
 810a280:	9b04      	ldr	r3, [sp, #16]
 810a282:	eba0 000a 	sub.w	r0, r0, sl
 810a286:	2240      	movs	r2, #64	; 0x40
 810a288:	4082      	lsls	r2, r0
 810a28a:	4313      	orrs	r3, r2
 810a28c:	3401      	adds	r4, #1
 810a28e:	9304      	str	r3, [sp, #16]
 810a290:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a294:	4825      	ldr	r0, [pc, #148]	; (810a32c <_svfiprintf_r+0x1ec>)
 810a296:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810a29a:	2206      	movs	r2, #6
 810a29c:	f7f6 f820 	bl	81002e0 <memchr>
 810a2a0:	2800      	cmp	r0, #0
 810a2a2:	d038      	beq.n	810a316 <_svfiprintf_r+0x1d6>
 810a2a4:	4b22      	ldr	r3, [pc, #136]	; (810a330 <_svfiprintf_r+0x1f0>)
 810a2a6:	bb1b      	cbnz	r3, 810a2f0 <_svfiprintf_r+0x1b0>
 810a2a8:	9b03      	ldr	r3, [sp, #12]
 810a2aa:	3307      	adds	r3, #7
 810a2ac:	f023 0307 	bic.w	r3, r3, #7
 810a2b0:	3308      	adds	r3, #8
 810a2b2:	9303      	str	r3, [sp, #12]
 810a2b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a2b6:	4433      	add	r3, r6
 810a2b8:	9309      	str	r3, [sp, #36]	; 0x24
 810a2ba:	e768      	b.n	810a18e <_svfiprintf_r+0x4e>
 810a2bc:	fb0c 3202 	mla	r2, ip, r2, r3
 810a2c0:	460c      	mov	r4, r1
 810a2c2:	2001      	movs	r0, #1
 810a2c4:	e7a6      	b.n	810a214 <_svfiprintf_r+0xd4>
 810a2c6:	2300      	movs	r3, #0
 810a2c8:	3401      	adds	r4, #1
 810a2ca:	9305      	str	r3, [sp, #20]
 810a2cc:	4619      	mov	r1, r3
 810a2ce:	f04f 0c0a 	mov.w	ip, #10
 810a2d2:	4620      	mov	r0, r4
 810a2d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 810a2d8:	3a30      	subs	r2, #48	; 0x30
 810a2da:	2a09      	cmp	r2, #9
 810a2dc:	d903      	bls.n	810a2e6 <_svfiprintf_r+0x1a6>
 810a2de:	2b00      	cmp	r3, #0
 810a2e0:	d0c6      	beq.n	810a270 <_svfiprintf_r+0x130>
 810a2e2:	9105      	str	r1, [sp, #20]
 810a2e4:	e7c4      	b.n	810a270 <_svfiprintf_r+0x130>
 810a2e6:	fb0c 2101 	mla	r1, ip, r1, r2
 810a2ea:	4604      	mov	r4, r0
 810a2ec:	2301      	movs	r3, #1
 810a2ee:	e7f0      	b.n	810a2d2 <_svfiprintf_r+0x192>
 810a2f0:	ab03      	add	r3, sp, #12
 810a2f2:	9300      	str	r3, [sp, #0]
 810a2f4:	462a      	mov	r2, r5
 810a2f6:	4b0f      	ldr	r3, [pc, #60]	; (810a334 <_svfiprintf_r+0x1f4>)
 810a2f8:	a904      	add	r1, sp, #16
 810a2fa:	4638      	mov	r0, r7
 810a2fc:	f7fc fb74 	bl	81069e8 <_printf_float>
 810a300:	1c42      	adds	r2, r0, #1
 810a302:	4606      	mov	r6, r0
 810a304:	d1d6      	bne.n	810a2b4 <_svfiprintf_r+0x174>
 810a306:	89ab      	ldrh	r3, [r5, #12]
 810a308:	065b      	lsls	r3, r3, #25
 810a30a:	f53f af2d 	bmi.w	810a168 <_svfiprintf_r+0x28>
 810a30e:	9809      	ldr	r0, [sp, #36]	; 0x24
 810a310:	b01d      	add	sp, #116	; 0x74
 810a312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a316:	ab03      	add	r3, sp, #12
 810a318:	9300      	str	r3, [sp, #0]
 810a31a:	462a      	mov	r2, r5
 810a31c:	4b05      	ldr	r3, [pc, #20]	; (810a334 <_svfiprintf_r+0x1f4>)
 810a31e:	a904      	add	r1, sp, #16
 810a320:	4638      	mov	r0, r7
 810a322:	f7fc fe05 	bl	8106f30 <_printf_i>
 810a326:	e7eb      	b.n	810a300 <_svfiprintf_r+0x1c0>
 810a328:	0810bac9 	.word	0x0810bac9
 810a32c:	0810bad3 	.word	0x0810bad3
 810a330:	081069e9 	.word	0x081069e9
 810a334:	0810a08d 	.word	0x0810a08d
 810a338:	0810bacf 	.word	0x0810bacf

0810a33c <__sfputc_r>:
 810a33c:	6893      	ldr	r3, [r2, #8]
 810a33e:	3b01      	subs	r3, #1
 810a340:	2b00      	cmp	r3, #0
 810a342:	b410      	push	{r4}
 810a344:	6093      	str	r3, [r2, #8]
 810a346:	da08      	bge.n	810a35a <__sfputc_r+0x1e>
 810a348:	6994      	ldr	r4, [r2, #24]
 810a34a:	42a3      	cmp	r3, r4
 810a34c:	db01      	blt.n	810a352 <__sfputc_r+0x16>
 810a34e:	290a      	cmp	r1, #10
 810a350:	d103      	bne.n	810a35a <__sfputc_r+0x1e>
 810a352:	f85d 4b04 	ldr.w	r4, [sp], #4
 810a356:	f7fd bab0 	b.w	81078ba <__swbuf_r>
 810a35a:	6813      	ldr	r3, [r2, #0]
 810a35c:	1c58      	adds	r0, r3, #1
 810a35e:	6010      	str	r0, [r2, #0]
 810a360:	7019      	strb	r1, [r3, #0]
 810a362:	4608      	mov	r0, r1
 810a364:	f85d 4b04 	ldr.w	r4, [sp], #4
 810a368:	4770      	bx	lr

0810a36a <__sfputs_r>:
 810a36a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a36c:	4606      	mov	r6, r0
 810a36e:	460f      	mov	r7, r1
 810a370:	4614      	mov	r4, r2
 810a372:	18d5      	adds	r5, r2, r3
 810a374:	42ac      	cmp	r4, r5
 810a376:	d101      	bne.n	810a37c <__sfputs_r+0x12>
 810a378:	2000      	movs	r0, #0
 810a37a:	e007      	b.n	810a38c <__sfputs_r+0x22>
 810a37c:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a380:	463a      	mov	r2, r7
 810a382:	4630      	mov	r0, r6
 810a384:	f7ff ffda 	bl	810a33c <__sfputc_r>
 810a388:	1c43      	adds	r3, r0, #1
 810a38a:	d1f3      	bne.n	810a374 <__sfputs_r+0xa>
 810a38c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810a390 <_vfiprintf_r>:
 810a390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a394:	460d      	mov	r5, r1
 810a396:	b09d      	sub	sp, #116	; 0x74
 810a398:	4614      	mov	r4, r2
 810a39a:	4698      	mov	r8, r3
 810a39c:	4606      	mov	r6, r0
 810a39e:	b118      	cbz	r0, 810a3a8 <_vfiprintf_r+0x18>
 810a3a0:	6a03      	ldr	r3, [r0, #32]
 810a3a2:	b90b      	cbnz	r3, 810a3a8 <_vfiprintf_r+0x18>
 810a3a4:	f7fd f982 	bl	81076ac <__sinit>
 810a3a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810a3aa:	07d9      	lsls	r1, r3, #31
 810a3ac:	d405      	bmi.n	810a3ba <_vfiprintf_r+0x2a>
 810a3ae:	89ab      	ldrh	r3, [r5, #12]
 810a3b0:	059a      	lsls	r2, r3, #22
 810a3b2:	d402      	bmi.n	810a3ba <_vfiprintf_r+0x2a>
 810a3b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810a3b6:	f7fd fb92 	bl	8107ade <__retarget_lock_acquire_recursive>
 810a3ba:	89ab      	ldrh	r3, [r5, #12]
 810a3bc:	071b      	lsls	r3, r3, #28
 810a3be:	d501      	bpl.n	810a3c4 <_vfiprintf_r+0x34>
 810a3c0:	692b      	ldr	r3, [r5, #16]
 810a3c2:	b99b      	cbnz	r3, 810a3ec <_vfiprintf_r+0x5c>
 810a3c4:	4629      	mov	r1, r5
 810a3c6:	4630      	mov	r0, r6
 810a3c8:	f7fd fab4 	bl	8107934 <__swsetup_r>
 810a3cc:	b170      	cbz	r0, 810a3ec <_vfiprintf_r+0x5c>
 810a3ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810a3d0:	07dc      	lsls	r4, r3, #31
 810a3d2:	d504      	bpl.n	810a3de <_vfiprintf_r+0x4e>
 810a3d4:	f04f 30ff 	mov.w	r0, #4294967295
 810a3d8:	b01d      	add	sp, #116	; 0x74
 810a3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a3de:	89ab      	ldrh	r3, [r5, #12]
 810a3e0:	0598      	lsls	r0, r3, #22
 810a3e2:	d4f7      	bmi.n	810a3d4 <_vfiprintf_r+0x44>
 810a3e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810a3e6:	f7fd fb7b 	bl	8107ae0 <__retarget_lock_release_recursive>
 810a3ea:	e7f3      	b.n	810a3d4 <_vfiprintf_r+0x44>
 810a3ec:	2300      	movs	r3, #0
 810a3ee:	9309      	str	r3, [sp, #36]	; 0x24
 810a3f0:	2320      	movs	r3, #32
 810a3f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810a3f6:	f8cd 800c 	str.w	r8, [sp, #12]
 810a3fa:	2330      	movs	r3, #48	; 0x30
 810a3fc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 810a5b0 <_vfiprintf_r+0x220>
 810a400:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810a404:	f04f 0901 	mov.w	r9, #1
 810a408:	4623      	mov	r3, r4
 810a40a:	469a      	mov	sl, r3
 810a40c:	f813 2b01 	ldrb.w	r2, [r3], #1
 810a410:	b10a      	cbz	r2, 810a416 <_vfiprintf_r+0x86>
 810a412:	2a25      	cmp	r2, #37	; 0x25
 810a414:	d1f9      	bne.n	810a40a <_vfiprintf_r+0x7a>
 810a416:	ebba 0b04 	subs.w	fp, sl, r4
 810a41a:	d00b      	beq.n	810a434 <_vfiprintf_r+0xa4>
 810a41c:	465b      	mov	r3, fp
 810a41e:	4622      	mov	r2, r4
 810a420:	4629      	mov	r1, r5
 810a422:	4630      	mov	r0, r6
 810a424:	f7ff ffa1 	bl	810a36a <__sfputs_r>
 810a428:	3001      	adds	r0, #1
 810a42a:	f000 80a9 	beq.w	810a580 <_vfiprintf_r+0x1f0>
 810a42e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810a430:	445a      	add	r2, fp
 810a432:	9209      	str	r2, [sp, #36]	; 0x24
 810a434:	f89a 3000 	ldrb.w	r3, [sl]
 810a438:	2b00      	cmp	r3, #0
 810a43a:	f000 80a1 	beq.w	810a580 <_vfiprintf_r+0x1f0>
 810a43e:	2300      	movs	r3, #0
 810a440:	f04f 32ff 	mov.w	r2, #4294967295
 810a444:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810a448:	f10a 0a01 	add.w	sl, sl, #1
 810a44c:	9304      	str	r3, [sp, #16]
 810a44e:	9307      	str	r3, [sp, #28]
 810a450:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810a454:	931a      	str	r3, [sp, #104]	; 0x68
 810a456:	4654      	mov	r4, sl
 810a458:	2205      	movs	r2, #5
 810a45a:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a45e:	4854      	ldr	r0, [pc, #336]	; (810a5b0 <_vfiprintf_r+0x220>)
 810a460:	f7f5 ff3e 	bl	81002e0 <memchr>
 810a464:	9a04      	ldr	r2, [sp, #16]
 810a466:	b9d8      	cbnz	r0, 810a4a0 <_vfiprintf_r+0x110>
 810a468:	06d1      	lsls	r1, r2, #27
 810a46a:	bf44      	itt	mi
 810a46c:	2320      	movmi	r3, #32
 810a46e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810a472:	0713      	lsls	r3, r2, #28
 810a474:	bf44      	itt	mi
 810a476:	232b      	movmi	r3, #43	; 0x2b
 810a478:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810a47c:	f89a 3000 	ldrb.w	r3, [sl]
 810a480:	2b2a      	cmp	r3, #42	; 0x2a
 810a482:	d015      	beq.n	810a4b0 <_vfiprintf_r+0x120>
 810a484:	9a07      	ldr	r2, [sp, #28]
 810a486:	4654      	mov	r4, sl
 810a488:	2000      	movs	r0, #0
 810a48a:	f04f 0c0a 	mov.w	ip, #10
 810a48e:	4621      	mov	r1, r4
 810a490:	f811 3b01 	ldrb.w	r3, [r1], #1
 810a494:	3b30      	subs	r3, #48	; 0x30
 810a496:	2b09      	cmp	r3, #9
 810a498:	d94d      	bls.n	810a536 <_vfiprintf_r+0x1a6>
 810a49a:	b1b0      	cbz	r0, 810a4ca <_vfiprintf_r+0x13a>
 810a49c:	9207      	str	r2, [sp, #28]
 810a49e:	e014      	b.n	810a4ca <_vfiprintf_r+0x13a>
 810a4a0:	eba0 0308 	sub.w	r3, r0, r8
 810a4a4:	fa09 f303 	lsl.w	r3, r9, r3
 810a4a8:	4313      	orrs	r3, r2
 810a4aa:	9304      	str	r3, [sp, #16]
 810a4ac:	46a2      	mov	sl, r4
 810a4ae:	e7d2      	b.n	810a456 <_vfiprintf_r+0xc6>
 810a4b0:	9b03      	ldr	r3, [sp, #12]
 810a4b2:	1d19      	adds	r1, r3, #4
 810a4b4:	681b      	ldr	r3, [r3, #0]
 810a4b6:	9103      	str	r1, [sp, #12]
 810a4b8:	2b00      	cmp	r3, #0
 810a4ba:	bfbb      	ittet	lt
 810a4bc:	425b      	neglt	r3, r3
 810a4be:	f042 0202 	orrlt.w	r2, r2, #2
 810a4c2:	9307      	strge	r3, [sp, #28]
 810a4c4:	9307      	strlt	r3, [sp, #28]
 810a4c6:	bfb8      	it	lt
 810a4c8:	9204      	strlt	r2, [sp, #16]
 810a4ca:	7823      	ldrb	r3, [r4, #0]
 810a4cc:	2b2e      	cmp	r3, #46	; 0x2e
 810a4ce:	d10c      	bne.n	810a4ea <_vfiprintf_r+0x15a>
 810a4d0:	7863      	ldrb	r3, [r4, #1]
 810a4d2:	2b2a      	cmp	r3, #42	; 0x2a
 810a4d4:	d134      	bne.n	810a540 <_vfiprintf_r+0x1b0>
 810a4d6:	9b03      	ldr	r3, [sp, #12]
 810a4d8:	1d1a      	adds	r2, r3, #4
 810a4da:	681b      	ldr	r3, [r3, #0]
 810a4dc:	9203      	str	r2, [sp, #12]
 810a4de:	2b00      	cmp	r3, #0
 810a4e0:	bfb8      	it	lt
 810a4e2:	f04f 33ff 	movlt.w	r3, #4294967295
 810a4e6:	3402      	adds	r4, #2
 810a4e8:	9305      	str	r3, [sp, #20]
 810a4ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 810a5c0 <_vfiprintf_r+0x230>
 810a4ee:	7821      	ldrb	r1, [r4, #0]
 810a4f0:	2203      	movs	r2, #3
 810a4f2:	4650      	mov	r0, sl
 810a4f4:	f7f5 fef4 	bl	81002e0 <memchr>
 810a4f8:	b138      	cbz	r0, 810a50a <_vfiprintf_r+0x17a>
 810a4fa:	9b04      	ldr	r3, [sp, #16]
 810a4fc:	eba0 000a 	sub.w	r0, r0, sl
 810a500:	2240      	movs	r2, #64	; 0x40
 810a502:	4082      	lsls	r2, r0
 810a504:	4313      	orrs	r3, r2
 810a506:	3401      	adds	r4, #1
 810a508:	9304      	str	r3, [sp, #16]
 810a50a:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a50e:	4829      	ldr	r0, [pc, #164]	; (810a5b4 <_vfiprintf_r+0x224>)
 810a510:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810a514:	2206      	movs	r2, #6
 810a516:	f7f5 fee3 	bl	81002e0 <memchr>
 810a51a:	2800      	cmp	r0, #0
 810a51c:	d03f      	beq.n	810a59e <_vfiprintf_r+0x20e>
 810a51e:	4b26      	ldr	r3, [pc, #152]	; (810a5b8 <_vfiprintf_r+0x228>)
 810a520:	bb1b      	cbnz	r3, 810a56a <_vfiprintf_r+0x1da>
 810a522:	9b03      	ldr	r3, [sp, #12]
 810a524:	3307      	adds	r3, #7
 810a526:	f023 0307 	bic.w	r3, r3, #7
 810a52a:	3308      	adds	r3, #8
 810a52c:	9303      	str	r3, [sp, #12]
 810a52e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a530:	443b      	add	r3, r7
 810a532:	9309      	str	r3, [sp, #36]	; 0x24
 810a534:	e768      	b.n	810a408 <_vfiprintf_r+0x78>
 810a536:	fb0c 3202 	mla	r2, ip, r2, r3
 810a53a:	460c      	mov	r4, r1
 810a53c:	2001      	movs	r0, #1
 810a53e:	e7a6      	b.n	810a48e <_vfiprintf_r+0xfe>
 810a540:	2300      	movs	r3, #0
 810a542:	3401      	adds	r4, #1
 810a544:	9305      	str	r3, [sp, #20]
 810a546:	4619      	mov	r1, r3
 810a548:	f04f 0c0a 	mov.w	ip, #10
 810a54c:	4620      	mov	r0, r4
 810a54e:	f810 2b01 	ldrb.w	r2, [r0], #1
 810a552:	3a30      	subs	r2, #48	; 0x30
 810a554:	2a09      	cmp	r2, #9
 810a556:	d903      	bls.n	810a560 <_vfiprintf_r+0x1d0>
 810a558:	2b00      	cmp	r3, #0
 810a55a:	d0c6      	beq.n	810a4ea <_vfiprintf_r+0x15a>
 810a55c:	9105      	str	r1, [sp, #20]
 810a55e:	e7c4      	b.n	810a4ea <_vfiprintf_r+0x15a>
 810a560:	fb0c 2101 	mla	r1, ip, r1, r2
 810a564:	4604      	mov	r4, r0
 810a566:	2301      	movs	r3, #1
 810a568:	e7f0      	b.n	810a54c <_vfiprintf_r+0x1bc>
 810a56a:	ab03      	add	r3, sp, #12
 810a56c:	9300      	str	r3, [sp, #0]
 810a56e:	462a      	mov	r2, r5
 810a570:	4b12      	ldr	r3, [pc, #72]	; (810a5bc <_vfiprintf_r+0x22c>)
 810a572:	a904      	add	r1, sp, #16
 810a574:	4630      	mov	r0, r6
 810a576:	f7fc fa37 	bl	81069e8 <_printf_float>
 810a57a:	4607      	mov	r7, r0
 810a57c:	1c78      	adds	r0, r7, #1
 810a57e:	d1d6      	bne.n	810a52e <_vfiprintf_r+0x19e>
 810a580:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810a582:	07d9      	lsls	r1, r3, #31
 810a584:	d405      	bmi.n	810a592 <_vfiprintf_r+0x202>
 810a586:	89ab      	ldrh	r3, [r5, #12]
 810a588:	059a      	lsls	r2, r3, #22
 810a58a:	d402      	bmi.n	810a592 <_vfiprintf_r+0x202>
 810a58c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810a58e:	f7fd faa7 	bl	8107ae0 <__retarget_lock_release_recursive>
 810a592:	89ab      	ldrh	r3, [r5, #12]
 810a594:	065b      	lsls	r3, r3, #25
 810a596:	f53f af1d 	bmi.w	810a3d4 <_vfiprintf_r+0x44>
 810a59a:	9809      	ldr	r0, [sp, #36]	; 0x24
 810a59c:	e71c      	b.n	810a3d8 <_vfiprintf_r+0x48>
 810a59e:	ab03      	add	r3, sp, #12
 810a5a0:	9300      	str	r3, [sp, #0]
 810a5a2:	462a      	mov	r2, r5
 810a5a4:	4b05      	ldr	r3, [pc, #20]	; (810a5bc <_vfiprintf_r+0x22c>)
 810a5a6:	a904      	add	r1, sp, #16
 810a5a8:	4630      	mov	r0, r6
 810a5aa:	f7fc fcc1 	bl	8106f30 <_printf_i>
 810a5ae:	e7e4      	b.n	810a57a <_vfiprintf_r+0x1ea>
 810a5b0:	0810bac9 	.word	0x0810bac9
 810a5b4:	0810bad3 	.word	0x0810bad3
 810a5b8:	081069e9 	.word	0x081069e9
 810a5bc:	0810a36b 	.word	0x0810a36b
 810a5c0:	0810bacf 	.word	0x0810bacf

0810a5c4 <__sflush_r>:
 810a5c4:	898a      	ldrh	r2, [r1, #12]
 810a5c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810a5ca:	4605      	mov	r5, r0
 810a5cc:	0710      	lsls	r0, r2, #28
 810a5ce:	460c      	mov	r4, r1
 810a5d0:	d458      	bmi.n	810a684 <__sflush_r+0xc0>
 810a5d2:	684b      	ldr	r3, [r1, #4]
 810a5d4:	2b00      	cmp	r3, #0
 810a5d6:	dc05      	bgt.n	810a5e4 <__sflush_r+0x20>
 810a5d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810a5da:	2b00      	cmp	r3, #0
 810a5dc:	dc02      	bgt.n	810a5e4 <__sflush_r+0x20>
 810a5de:	2000      	movs	r0, #0
 810a5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810a5e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810a5e6:	2e00      	cmp	r6, #0
 810a5e8:	d0f9      	beq.n	810a5de <__sflush_r+0x1a>
 810a5ea:	2300      	movs	r3, #0
 810a5ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810a5f0:	682f      	ldr	r7, [r5, #0]
 810a5f2:	6a21      	ldr	r1, [r4, #32]
 810a5f4:	602b      	str	r3, [r5, #0]
 810a5f6:	d032      	beq.n	810a65e <__sflush_r+0x9a>
 810a5f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810a5fa:	89a3      	ldrh	r3, [r4, #12]
 810a5fc:	075a      	lsls	r2, r3, #29
 810a5fe:	d505      	bpl.n	810a60c <__sflush_r+0x48>
 810a600:	6863      	ldr	r3, [r4, #4]
 810a602:	1ac0      	subs	r0, r0, r3
 810a604:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810a606:	b10b      	cbz	r3, 810a60c <__sflush_r+0x48>
 810a608:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810a60a:	1ac0      	subs	r0, r0, r3
 810a60c:	2300      	movs	r3, #0
 810a60e:	4602      	mov	r2, r0
 810a610:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810a612:	6a21      	ldr	r1, [r4, #32]
 810a614:	4628      	mov	r0, r5
 810a616:	47b0      	blx	r6
 810a618:	1c43      	adds	r3, r0, #1
 810a61a:	89a3      	ldrh	r3, [r4, #12]
 810a61c:	d106      	bne.n	810a62c <__sflush_r+0x68>
 810a61e:	6829      	ldr	r1, [r5, #0]
 810a620:	291d      	cmp	r1, #29
 810a622:	d82b      	bhi.n	810a67c <__sflush_r+0xb8>
 810a624:	4a29      	ldr	r2, [pc, #164]	; (810a6cc <__sflush_r+0x108>)
 810a626:	410a      	asrs	r2, r1
 810a628:	07d6      	lsls	r6, r2, #31
 810a62a:	d427      	bmi.n	810a67c <__sflush_r+0xb8>
 810a62c:	2200      	movs	r2, #0
 810a62e:	6062      	str	r2, [r4, #4]
 810a630:	04d9      	lsls	r1, r3, #19
 810a632:	6922      	ldr	r2, [r4, #16]
 810a634:	6022      	str	r2, [r4, #0]
 810a636:	d504      	bpl.n	810a642 <__sflush_r+0x7e>
 810a638:	1c42      	adds	r2, r0, #1
 810a63a:	d101      	bne.n	810a640 <__sflush_r+0x7c>
 810a63c:	682b      	ldr	r3, [r5, #0]
 810a63e:	b903      	cbnz	r3, 810a642 <__sflush_r+0x7e>
 810a640:	6560      	str	r0, [r4, #84]	; 0x54
 810a642:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810a644:	602f      	str	r7, [r5, #0]
 810a646:	2900      	cmp	r1, #0
 810a648:	d0c9      	beq.n	810a5de <__sflush_r+0x1a>
 810a64a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810a64e:	4299      	cmp	r1, r3
 810a650:	d002      	beq.n	810a658 <__sflush_r+0x94>
 810a652:	4628      	mov	r0, r5
 810a654:	f7fe f8d6 	bl	8108804 <_free_r>
 810a658:	2000      	movs	r0, #0
 810a65a:	6360      	str	r0, [r4, #52]	; 0x34
 810a65c:	e7c0      	b.n	810a5e0 <__sflush_r+0x1c>
 810a65e:	2301      	movs	r3, #1
 810a660:	4628      	mov	r0, r5
 810a662:	47b0      	blx	r6
 810a664:	1c41      	adds	r1, r0, #1
 810a666:	d1c8      	bne.n	810a5fa <__sflush_r+0x36>
 810a668:	682b      	ldr	r3, [r5, #0]
 810a66a:	2b00      	cmp	r3, #0
 810a66c:	d0c5      	beq.n	810a5fa <__sflush_r+0x36>
 810a66e:	2b1d      	cmp	r3, #29
 810a670:	d001      	beq.n	810a676 <__sflush_r+0xb2>
 810a672:	2b16      	cmp	r3, #22
 810a674:	d101      	bne.n	810a67a <__sflush_r+0xb6>
 810a676:	602f      	str	r7, [r5, #0]
 810a678:	e7b1      	b.n	810a5de <__sflush_r+0x1a>
 810a67a:	89a3      	ldrh	r3, [r4, #12]
 810a67c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810a680:	81a3      	strh	r3, [r4, #12]
 810a682:	e7ad      	b.n	810a5e0 <__sflush_r+0x1c>
 810a684:	690f      	ldr	r7, [r1, #16]
 810a686:	2f00      	cmp	r7, #0
 810a688:	d0a9      	beq.n	810a5de <__sflush_r+0x1a>
 810a68a:	0793      	lsls	r3, r2, #30
 810a68c:	680e      	ldr	r6, [r1, #0]
 810a68e:	bf08      	it	eq
 810a690:	694b      	ldreq	r3, [r1, #20]
 810a692:	600f      	str	r7, [r1, #0]
 810a694:	bf18      	it	ne
 810a696:	2300      	movne	r3, #0
 810a698:	eba6 0807 	sub.w	r8, r6, r7
 810a69c:	608b      	str	r3, [r1, #8]
 810a69e:	f1b8 0f00 	cmp.w	r8, #0
 810a6a2:	dd9c      	ble.n	810a5de <__sflush_r+0x1a>
 810a6a4:	6a21      	ldr	r1, [r4, #32]
 810a6a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810a6a8:	4643      	mov	r3, r8
 810a6aa:	463a      	mov	r2, r7
 810a6ac:	4628      	mov	r0, r5
 810a6ae:	47b0      	blx	r6
 810a6b0:	2800      	cmp	r0, #0
 810a6b2:	dc06      	bgt.n	810a6c2 <__sflush_r+0xfe>
 810a6b4:	89a3      	ldrh	r3, [r4, #12]
 810a6b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810a6ba:	81a3      	strh	r3, [r4, #12]
 810a6bc:	f04f 30ff 	mov.w	r0, #4294967295
 810a6c0:	e78e      	b.n	810a5e0 <__sflush_r+0x1c>
 810a6c2:	4407      	add	r7, r0
 810a6c4:	eba8 0800 	sub.w	r8, r8, r0
 810a6c8:	e7e9      	b.n	810a69e <__sflush_r+0xda>
 810a6ca:	bf00      	nop
 810a6cc:	dfbffffe 	.word	0xdfbffffe

0810a6d0 <_fflush_r>:
 810a6d0:	b538      	push	{r3, r4, r5, lr}
 810a6d2:	690b      	ldr	r3, [r1, #16]
 810a6d4:	4605      	mov	r5, r0
 810a6d6:	460c      	mov	r4, r1
 810a6d8:	b913      	cbnz	r3, 810a6e0 <_fflush_r+0x10>
 810a6da:	2500      	movs	r5, #0
 810a6dc:	4628      	mov	r0, r5
 810a6de:	bd38      	pop	{r3, r4, r5, pc}
 810a6e0:	b118      	cbz	r0, 810a6ea <_fflush_r+0x1a>
 810a6e2:	6a03      	ldr	r3, [r0, #32]
 810a6e4:	b90b      	cbnz	r3, 810a6ea <_fflush_r+0x1a>
 810a6e6:	f7fc ffe1 	bl	81076ac <__sinit>
 810a6ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810a6ee:	2b00      	cmp	r3, #0
 810a6f0:	d0f3      	beq.n	810a6da <_fflush_r+0xa>
 810a6f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810a6f4:	07d0      	lsls	r0, r2, #31
 810a6f6:	d404      	bmi.n	810a702 <_fflush_r+0x32>
 810a6f8:	0599      	lsls	r1, r3, #22
 810a6fa:	d402      	bmi.n	810a702 <_fflush_r+0x32>
 810a6fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810a6fe:	f7fd f9ee 	bl	8107ade <__retarget_lock_acquire_recursive>
 810a702:	4628      	mov	r0, r5
 810a704:	4621      	mov	r1, r4
 810a706:	f7ff ff5d 	bl	810a5c4 <__sflush_r>
 810a70a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810a70c:	07da      	lsls	r2, r3, #31
 810a70e:	4605      	mov	r5, r0
 810a710:	d4e4      	bmi.n	810a6dc <_fflush_r+0xc>
 810a712:	89a3      	ldrh	r3, [r4, #12]
 810a714:	059b      	lsls	r3, r3, #22
 810a716:	d4e1      	bmi.n	810a6dc <_fflush_r+0xc>
 810a718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810a71a:	f7fd f9e1 	bl	8107ae0 <__retarget_lock_release_recursive>
 810a71e:	e7dd      	b.n	810a6dc <_fflush_r+0xc>

0810a720 <__swhatbuf_r>:
 810a720:	b570      	push	{r4, r5, r6, lr}
 810a722:	460c      	mov	r4, r1
 810a724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810a728:	2900      	cmp	r1, #0
 810a72a:	b096      	sub	sp, #88	; 0x58
 810a72c:	4615      	mov	r5, r2
 810a72e:	461e      	mov	r6, r3
 810a730:	da0d      	bge.n	810a74e <__swhatbuf_r+0x2e>
 810a732:	89a3      	ldrh	r3, [r4, #12]
 810a734:	f013 0f80 	tst.w	r3, #128	; 0x80
 810a738:	f04f 0100 	mov.w	r1, #0
 810a73c:	bf0c      	ite	eq
 810a73e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 810a742:	2340      	movne	r3, #64	; 0x40
 810a744:	2000      	movs	r0, #0
 810a746:	6031      	str	r1, [r6, #0]
 810a748:	602b      	str	r3, [r5, #0]
 810a74a:	b016      	add	sp, #88	; 0x58
 810a74c:	bd70      	pop	{r4, r5, r6, pc}
 810a74e:	466a      	mov	r2, sp
 810a750:	f000 f874 	bl	810a83c <_fstat_r>
 810a754:	2800      	cmp	r0, #0
 810a756:	dbec      	blt.n	810a732 <__swhatbuf_r+0x12>
 810a758:	9901      	ldr	r1, [sp, #4]
 810a75a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 810a75e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 810a762:	4259      	negs	r1, r3
 810a764:	4159      	adcs	r1, r3
 810a766:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810a76a:	e7eb      	b.n	810a744 <__swhatbuf_r+0x24>

0810a76c <__smakebuf_r>:
 810a76c:	898b      	ldrh	r3, [r1, #12]
 810a76e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810a770:	079d      	lsls	r5, r3, #30
 810a772:	4606      	mov	r6, r0
 810a774:	460c      	mov	r4, r1
 810a776:	d507      	bpl.n	810a788 <__smakebuf_r+0x1c>
 810a778:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810a77c:	6023      	str	r3, [r4, #0]
 810a77e:	6123      	str	r3, [r4, #16]
 810a780:	2301      	movs	r3, #1
 810a782:	6163      	str	r3, [r4, #20]
 810a784:	b002      	add	sp, #8
 810a786:	bd70      	pop	{r4, r5, r6, pc}
 810a788:	ab01      	add	r3, sp, #4
 810a78a:	466a      	mov	r2, sp
 810a78c:	f7ff ffc8 	bl	810a720 <__swhatbuf_r>
 810a790:	9900      	ldr	r1, [sp, #0]
 810a792:	4605      	mov	r5, r0
 810a794:	4630      	mov	r0, r6
 810a796:	f7fe f8a9 	bl	81088ec <_malloc_r>
 810a79a:	b948      	cbnz	r0, 810a7b0 <__smakebuf_r+0x44>
 810a79c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810a7a0:	059a      	lsls	r2, r3, #22
 810a7a2:	d4ef      	bmi.n	810a784 <__smakebuf_r+0x18>
 810a7a4:	f023 0303 	bic.w	r3, r3, #3
 810a7a8:	f043 0302 	orr.w	r3, r3, #2
 810a7ac:	81a3      	strh	r3, [r4, #12]
 810a7ae:	e7e3      	b.n	810a778 <__smakebuf_r+0xc>
 810a7b0:	89a3      	ldrh	r3, [r4, #12]
 810a7b2:	6020      	str	r0, [r4, #0]
 810a7b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810a7b8:	81a3      	strh	r3, [r4, #12]
 810a7ba:	9b00      	ldr	r3, [sp, #0]
 810a7bc:	6163      	str	r3, [r4, #20]
 810a7be:	9b01      	ldr	r3, [sp, #4]
 810a7c0:	6120      	str	r0, [r4, #16]
 810a7c2:	b15b      	cbz	r3, 810a7dc <__smakebuf_r+0x70>
 810a7c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810a7c8:	4630      	mov	r0, r6
 810a7ca:	f000 f849 	bl	810a860 <_isatty_r>
 810a7ce:	b128      	cbz	r0, 810a7dc <__smakebuf_r+0x70>
 810a7d0:	89a3      	ldrh	r3, [r4, #12]
 810a7d2:	f023 0303 	bic.w	r3, r3, #3
 810a7d6:	f043 0301 	orr.w	r3, r3, #1
 810a7da:	81a3      	strh	r3, [r4, #12]
 810a7dc:	89a3      	ldrh	r3, [r4, #12]
 810a7de:	431d      	orrs	r5, r3
 810a7e0:	81a5      	strh	r5, [r4, #12]
 810a7e2:	e7cf      	b.n	810a784 <__smakebuf_r+0x18>

0810a7e4 <memmove>:
 810a7e4:	4288      	cmp	r0, r1
 810a7e6:	b510      	push	{r4, lr}
 810a7e8:	eb01 0402 	add.w	r4, r1, r2
 810a7ec:	d902      	bls.n	810a7f4 <memmove+0x10>
 810a7ee:	4284      	cmp	r4, r0
 810a7f0:	4623      	mov	r3, r4
 810a7f2:	d807      	bhi.n	810a804 <memmove+0x20>
 810a7f4:	1e43      	subs	r3, r0, #1
 810a7f6:	42a1      	cmp	r1, r4
 810a7f8:	d008      	beq.n	810a80c <memmove+0x28>
 810a7fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 810a7fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 810a802:	e7f8      	b.n	810a7f6 <memmove+0x12>
 810a804:	4402      	add	r2, r0
 810a806:	4601      	mov	r1, r0
 810a808:	428a      	cmp	r2, r1
 810a80a:	d100      	bne.n	810a80e <memmove+0x2a>
 810a80c:	bd10      	pop	{r4, pc}
 810a80e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810a812:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810a816:	e7f7      	b.n	810a808 <memmove+0x24>

0810a818 <strncmp>:
 810a818:	b510      	push	{r4, lr}
 810a81a:	b16a      	cbz	r2, 810a838 <strncmp+0x20>
 810a81c:	3901      	subs	r1, #1
 810a81e:	1884      	adds	r4, r0, r2
 810a820:	f810 2b01 	ldrb.w	r2, [r0], #1
 810a824:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 810a828:	429a      	cmp	r2, r3
 810a82a:	d103      	bne.n	810a834 <strncmp+0x1c>
 810a82c:	42a0      	cmp	r0, r4
 810a82e:	d001      	beq.n	810a834 <strncmp+0x1c>
 810a830:	2a00      	cmp	r2, #0
 810a832:	d1f5      	bne.n	810a820 <strncmp+0x8>
 810a834:	1ad0      	subs	r0, r2, r3
 810a836:	bd10      	pop	{r4, pc}
 810a838:	4610      	mov	r0, r2
 810a83a:	e7fc      	b.n	810a836 <strncmp+0x1e>

0810a83c <_fstat_r>:
 810a83c:	b538      	push	{r3, r4, r5, lr}
 810a83e:	4d07      	ldr	r5, [pc, #28]	; (810a85c <_fstat_r+0x20>)
 810a840:	2300      	movs	r3, #0
 810a842:	4604      	mov	r4, r0
 810a844:	4608      	mov	r0, r1
 810a846:	4611      	mov	r1, r2
 810a848:	602b      	str	r3, [r5, #0]
 810a84a:	f7f7 fb59 	bl	8101f00 <_fstat>
 810a84e:	1c43      	adds	r3, r0, #1
 810a850:	d102      	bne.n	810a858 <_fstat_r+0x1c>
 810a852:	682b      	ldr	r3, [r5, #0]
 810a854:	b103      	cbz	r3, 810a858 <_fstat_r+0x1c>
 810a856:	6023      	str	r3, [r4, #0]
 810a858:	bd38      	pop	{r3, r4, r5, pc}
 810a85a:	bf00      	nop
 810a85c:	10000434 	.word	0x10000434

0810a860 <_isatty_r>:
 810a860:	b538      	push	{r3, r4, r5, lr}
 810a862:	4d06      	ldr	r5, [pc, #24]	; (810a87c <_isatty_r+0x1c>)
 810a864:	2300      	movs	r3, #0
 810a866:	4604      	mov	r4, r0
 810a868:	4608      	mov	r0, r1
 810a86a:	602b      	str	r3, [r5, #0]
 810a86c:	f7f7 fb58 	bl	8101f20 <_isatty>
 810a870:	1c43      	adds	r3, r0, #1
 810a872:	d102      	bne.n	810a87a <_isatty_r+0x1a>
 810a874:	682b      	ldr	r3, [r5, #0]
 810a876:	b103      	cbz	r3, 810a87a <_isatty_r+0x1a>
 810a878:	6023      	str	r3, [r4, #0]
 810a87a:	bd38      	pop	{r3, r4, r5, pc}
 810a87c:	10000434 	.word	0x10000434

0810a880 <_sbrk_r>:
 810a880:	b538      	push	{r3, r4, r5, lr}
 810a882:	4d06      	ldr	r5, [pc, #24]	; (810a89c <_sbrk_r+0x1c>)
 810a884:	2300      	movs	r3, #0
 810a886:	4604      	mov	r4, r0
 810a888:	4608      	mov	r0, r1
 810a88a:	602b      	str	r3, [r5, #0]
 810a88c:	f7f7 fb60 	bl	8101f50 <_sbrk>
 810a890:	1c43      	adds	r3, r0, #1
 810a892:	d102      	bne.n	810a89a <_sbrk_r+0x1a>
 810a894:	682b      	ldr	r3, [r5, #0]
 810a896:	b103      	cbz	r3, 810a89a <_sbrk_r+0x1a>
 810a898:	6023      	str	r3, [r4, #0]
 810a89a:	bd38      	pop	{r3, r4, r5, pc}
 810a89c:	10000434 	.word	0x10000434

0810a8a0 <nan>:
 810a8a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810a8a8 <nan+0x8>
 810a8a4:	4770      	bx	lr
 810a8a6:	bf00      	nop
 810a8a8:	00000000 	.word	0x00000000
 810a8ac:	7ff80000 	.word	0x7ff80000

0810a8b0 <__assert_func>:
 810a8b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810a8b2:	4614      	mov	r4, r2
 810a8b4:	461a      	mov	r2, r3
 810a8b6:	4b09      	ldr	r3, [pc, #36]	; (810a8dc <__assert_func+0x2c>)
 810a8b8:	681b      	ldr	r3, [r3, #0]
 810a8ba:	4605      	mov	r5, r0
 810a8bc:	68d8      	ldr	r0, [r3, #12]
 810a8be:	b14c      	cbz	r4, 810a8d4 <__assert_func+0x24>
 810a8c0:	4b07      	ldr	r3, [pc, #28]	; (810a8e0 <__assert_func+0x30>)
 810a8c2:	9100      	str	r1, [sp, #0]
 810a8c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810a8c8:	4906      	ldr	r1, [pc, #24]	; (810a8e4 <__assert_func+0x34>)
 810a8ca:	462b      	mov	r3, r5
 810a8cc:	f000 fbca 	bl	810b064 <fiprintf>
 810a8d0:	f000 fbda 	bl	810b088 <abort>
 810a8d4:	4b04      	ldr	r3, [pc, #16]	; (810a8e8 <__assert_func+0x38>)
 810a8d6:	461c      	mov	r4, r3
 810a8d8:	e7f3      	b.n	810a8c2 <__assert_func+0x12>
 810a8da:	bf00      	nop
 810a8dc:	10000078 	.word	0x10000078
 810a8e0:	0810bae2 	.word	0x0810bae2
 810a8e4:	0810baef 	.word	0x0810baef
 810a8e8:	0810bb1d 	.word	0x0810bb1d

0810a8ec <_calloc_r>:
 810a8ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810a8ee:	fba1 2402 	umull	r2, r4, r1, r2
 810a8f2:	b94c      	cbnz	r4, 810a908 <_calloc_r+0x1c>
 810a8f4:	4611      	mov	r1, r2
 810a8f6:	9201      	str	r2, [sp, #4]
 810a8f8:	f7fd fff8 	bl	81088ec <_malloc_r>
 810a8fc:	9a01      	ldr	r2, [sp, #4]
 810a8fe:	4605      	mov	r5, r0
 810a900:	b930      	cbnz	r0, 810a910 <_calloc_r+0x24>
 810a902:	4628      	mov	r0, r5
 810a904:	b003      	add	sp, #12
 810a906:	bd30      	pop	{r4, r5, pc}
 810a908:	220c      	movs	r2, #12
 810a90a:	6002      	str	r2, [r0, #0]
 810a90c:	2500      	movs	r5, #0
 810a90e:	e7f8      	b.n	810a902 <_calloc_r+0x16>
 810a910:	4621      	mov	r1, r4
 810a912:	f7fd f867 	bl	81079e4 <memset>
 810a916:	e7f4      	b.n	810a902 <_calloc_r+0x16>

0810a918 <rshift>:
 810a918:	6903      	ldr	r3, [r0, #16]
 810a91a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810a91e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810a922:	ea4f 1261 	mov.w	r2, r1, asr #5
 810a926:	f100 0414 	add.w	r4, r0, #20
 810a92a:	dd45      	ble.n	810a9b8 <rshift+0xa0>
 810a92c:	f011 011f 	ands.w	r1, r1, #31
 810a930:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810a934:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810a938:	d10c      	bne.n	810a954 <rshift+0x3c>
 810a93a:	f100 0710 	add.w	r7, r0, #16
 810a93e:	4629      	mov	r1, r5
 810a940:	42b1      	cmp	r1, r6
 810a942:	d334      	bcc.n	810a9ae <rshift+0x96>
 810a944:	1a9b      	subs	r3, r3, r2
 810a946:	009b      	lsls	r3, r3, #2
 810a948:	1eea      	subs	r2, r5, #3
 810a94a:	4296      	cmp	r6, r2
 810a94c:	bf38      	it	cc
 810a94e:	2300      	movcc	r3, #0
 810a950:	4423      	add	r3, r4
 810a952:	e015      	b.n	810a980 <rshift+0x68>
 810a954:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810a958:	f1c1 0820 	rsb	r8, r1, #32
 810a95c:	40cf      	lsrs	r7, r1
 810a95e:	f105 0e04 	add.w	lr, r5, #4
 810a962:	46a1      	mov	r9, r4
 810a964:	4576      	cmp	r6, lr
 810a966:	46f4      	mov	ip, lr
 810a968:	d815      	bhi.n	810a996 <rshift+0x7e>
 810a96a:	1a9a      	subs	r2, r3, r2
 810a96c:	0092      	lsls	r2, r2, #2
 810a96e:	3a04      	subs	r2, #4
 810a970:	3501      	adds	r5, #1
 810a972:	42ae      	cmp	r6, r5
 810a974:	bf38      	it	cc
 810a976:	2200      	movcc	r2, #0
 810a978:	18a3      	adds	r3, r4, r2
 810a97a:	50a7      	str	r7, [r4, r2]
 810a97c:	b107      	cbz	r7, 810a980 <rshift+0x68>
 810a97e:	3304      	adds	r3, #4
 810a980:	1b1a      	subs	r2, r3, r4
 810a982:	42a3      	cmp	r3, r4
 810a984:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810a988:	bf08      	it	eq
 810a98a:	2300      	moveq	r3, #0
 810a98c:	6102      	str	r2, [r0, #16]
 810a98e:	bf08      	it	eq
 810a990:	6143      	streq	r3, [r0, #20]
 810a992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810a996:	f8dc c000 	ldr.w	ip, [ip]
 810a99a:	fa0c fc08 	lsl.w	ip, ip, r8
 810a99e:	ea4c 0707 	orr.w	r7, ip, r7
 810a9a2:	f849 7b04 	str.w	r7, [r9], #4
 810a9a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 810a9aa:	40cf      	lsrs	r7, r1
 810a9ac:	e7da      	b.n	810a964 <rshift+0x4c>
 810a9ae:	f851 cb04 	ldr.w	ip, [r1], #4
 810a9b2:	f847 cf04 	str.w	ip, [r7, #4]!
 810a9b6:	e7c3      	b.n	810a940 <rshift+0x28>
 810a9b8:	4623      	mov	r3, r4
 810a9ba:	e7e1      	b.n	810a980 <rshift+0x68>

0810a9bc <__hexdig_fun>:
 810a9bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 810a9c0:	2b09      	cmp	r3, #9
 810a9c2:	d802      	bhi.n	810a9ca <__hexdig_fun+0xe>
 810a9c4:	3820      	subs	r0, #32
 810a9c6:	b2c0      	uxtb	r0, r0
 810a9c8:	4770      	bx	lr
 810a9ca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 810a9ce:	2b05      	cmp	r3, #5
 810a9d0:	d801      	bhi.n	810a9d6 <__hexdig_fun+0x1a>
 810a9d2:	3847      	subs	r0, #71	; 0x47
 810a9d4:	e7f7      	b.n	810a9c6 <__hexdig_fun+0xa>
 810a9d6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 810a9da:	2b05      	cmp	r3, #5
 810a9dc:	d801      	bhi.n	810a9e2 <__hexdig_fun+0x26>
 810a9de:	3827      	subs	r0, #39	; 0x27
 810a9e0:	e7f1      	b.n	810a9c6 <__hexdig_fun+0xa>
 810a9e2:	2000      	movs	r0, #0
 810a9e4:	4770      	bx	lr
	...

0810a9e8 <__gethex>:
 810a9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a9ec:	4617      	mov	r7, r2
 810a9ee:	680a      	ldr	r2, [r1, #0]
 810a9f0:	b085      	sub	sp, #20
 810a9f2:	f102 0b02 	add.w	fp, r2, #2
 810a9f6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 810a9fa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 810a9fe:	4681      	mov	r9, r0
 810aa00:	468a      	mov	sl, r1
 810aa02:	9302      	str	r3, [sp, #8]
 810aa04:	32fe      	adds	r2, #254	; 0xfe
 810aa06:	eb02 030b 	add.w	r3, r2, fp
 810aa0a:	46d8      	mov	r8, fp
 810aa0c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 810aa10:	9301      	str	r3, [sp, #4]
 810aa12:	2830      	cmp	r0, #48	; 0x30
 810aa14:	d0f7      	beq.n	810aa06 <__gethex+0x1e>
 810aa16:	f7ff ffd1 	bl	810a9bc <__hexdig_fun>
 810aa1a:	4604      	mov	r4, r0
 810aa1c:	2800      	cmp	r0, #0
 810aa1e:	d138      	bne.n	810aa92 <__gethex+0xaa>
 810aa20:	49a7      	ldr	r1, [pc, #668]	; (810acc0 <__gethex+0x2d8>)
 810aa22:	2201      	movs	r2, #1
 810aa24:	4640      	mov	r0, r8
 810aa26:	f7ff fef7 	bl	810a818 <strncmp>
 810aa2a:	4606      	mov	r6, r0
 810aa2c:	2800      	cmp	r0, #0
 810aa2e:	d169      	bne.n	810ab04 <__gethex+0x11c>
 810aa30:	f898 0001 	ldrb.w	r0, [r8, #1]
 810aa34:	465d      	mov	r5, fp
 810aa36:	f7ff ffc1 	bl	810a9bc <__hexdig_fun>
 810aa3a:	2800      	cmp	r0, #0
 810aa3c:	d064      	beq.n	810ab08 <__gethex+0x120>
 810aa3e:	465a      	mov	r2, fp
 810aa40:	7810      	ldrb	r0, [r2, #0]
 810aa42:	2830      	cmp	r0, #48	; 0x30
 810aa44:	4690      	mov	r8, r2
 810aa46:	f102 0201 	add.w	r2, r2, #1
 810aa4a:	d0f9      	beq.n	810aa40 <__gethex+0x58>
 810aa4c:	f7ff ffb6 	bl	810a9bc <__hexdig_fun>
 810aa50:	2301      	movs	r3, #1
 810aa52:	fab0 f480 	clz	r4, r0
 810aa56:	0964      	lsrs	r4, r4, #5
 810aa58:	465e      	mov	r6, fp
 810aa5a:	9301      	str	r3, [sp, #4]
 810aa5c:	4642      	mov	r2, r8
 810aa5e:	4615      	mov	r5, r2
 810aa60:	3201      	adds	r2, #1
 810aa62:	7828      	ldrb	r0, [r5, #0]
 810aa64:	f7ff ffaa 	bl	810a9bc <__hexdig_fun>
 810aa68:	2800      	cmp	r0, #0
 810aa6a:	d1f8      	bne.n	810aa5e <__gethex+0x76>
 810aa6c:	4994      	ldr	r1, [pc, #592]	; (810acc0 <__gethex+0x2d8>)
 810aa6e:	2201      	movs	r2, #1
 810aa70:	4628      	mov	r0, r5
 810aa72:	f7ff fed1 	bl	810a818 <strncmp>
 810aa76:	b978      	cbnz	r0, 810aa98 <__gethex+0xb0>
 810aa78:	b946      	cbnz	r6, 810aa8c <__gethex+0xa4>
 810aa7a:	1c6e      	adds	r6, r5, #1
 810aa7c:	4632      	mov	r2, r6
 810aa7e:	4615      	mov	r5, r2
 810aa80:	3201      	adds	r2, #1
 810aa82:	7828      	ldrb	r0, [r5, #0]
 810aa84:	f7ff ff9a 	bl	810a9bc <__hexdig_fun>
 810aa88:	2800      	cmp	r0, #0
 810aa8a:	d1f8      	bne.n	810aa7e <__gethex+0x96>
 810aa8c:	1b73      	subs	r3, r6, r5
 810aa8e:	009e      	lsls	r6, r3, #2
 810aa90:	e004      	b.n	810aa9c <__gethex+0xb4>
 810aa92:	2400      	movs	r4, #0
 810aa94:	4626      	mov	r6, r4
 810aa96:	e7e1      	b.n	810aa5c <__gethex+0x74>
 810aa98:	2e00      	cmp	r6, #0
 810aa9a:	d1f7      	bne.n	810aa8c <__gethex+0xa4>
 810aa9c:	782b      	ldrb	r3, [r5, #0]
 810aa9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810aaa2:	2b50      	cmp	r3, #80	; 0x50
 810aaa4:	d13d      	bne.n	810ab22 <__gethex+0x13a>
 810aaa6:	786b      	ldrb	r3, [r5, #1]
 810aaa8:	2b2b      	cmp	r3, #43	; 0x2b
 810aaaa:	d02f      	beq.n	810ab0c <__gethex+0x124>
 810aaac:	2b2d      	cmp	r3, #45	; 0x2d
 810aaae:	d031      	beq.n	810ab14 <__gethex+0x12c>
 810aab0:	1c69      	adds	r1, r5, #1
 810aab2:	f04f 0b00 	mov.w	fp, #0
 810aab6:	7808      	ldrb	r0, [r1, #0]
 810aab8:	f7ff ff80 	bl	810a9bc <__hexdig_fun>
 810aabc:	1e42      	subs	r2, r0, #1
 810aabe:	b2d2      	uxtb	r2, r2
 810aac0:	2a18      	cmp	r2, #24
 810aac2:	d82e      	bhi.n	810ab22 <__gethex+0x13a>
 810aac4:	f1a0 0210 	sub.w	r2, r0, #16
 810aac8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810aacc:	f7ff ff76 	bl	810a9bc <__hexdig_fun>
 810aad0:	f100 3cff 	add.w	ip, r0, #4294967295
 810aad4:	fa5f fc8c 	uxtb.w	ip, ip
 810aad8:	f1bc 0f18 	cmp.w	ip, #24
 810aadc:	d91d      	bls.n	810ab1a <__gethex+0x132>
 810aade:	f1bb 0f00 	cmp.w	fp, #0
 810aae2:	d000      	beq.n	810aae6 <__gethex+0xfe>
 810aae4:	4252      	negs	r2, r2
 810aae6:	4416      	add	r6, r2
 810aae8:	f8ca 1000 	str.w	r1, [sl]
 810aaec:	b1dc      	cbz	r4, 810ab26 <__gethex+0x13e>
 810aaee:	9b01      	ldr	r3, [sp, #4]
 810aaf0:	2b00      	cmp	r3, #0
 810aaf2:	bf14      	ite	ne
 810aaf4:	f04f 0800 	movne.w	r8, #0
 810aaf8:	f04f 0806 	moveq.w	r8, #6
 810aafc:	4640      	mov	r0, r8
 810aafe:	b005      	add	sp, #20
 810ab00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ab04:	4645      	mov	r5, r8
 810ab06:	4626      	mov	r6, r4
 810ab08:	2401      	movs	r4, #1
 810ab0a:	e7c7      	b.n	810aa9c <__gethex+0xb4>
 810ab0c:	f04f 0b00 	mov.w	fp, #0
 810ab10:	1ca9      	adds	r1, r5, #2
 810ab12:	e7d0      	b.n	810aab6 <__gethex+0xce>
 810ab14:	f04f 0b01 	mov.w	fp, #1
 810ab18:	e7fa      	b.n	810ab10 <__gethex+0x128>
 810ab1a:	230a      	movs	r3, #10
 810ab1c:	fb03 0002 	mla	r0, r3, r2, r0
 810ab20:	e7d0      	b.n	810aac4 <__gethex+0xdc>
 810ab22:	4629      	mov	r1, r5
 810ab24:	e7e0      	b.n	810aae8 <__gethex+0x100>
 810ab26:	eba5 0308 	sub.w	r3, r5, r8
 810ab2a:	3b01      	subs	r3, #1
 810ab2c:	4621      	mov	r1, r4
 810ab2e:	2b07      	cmp	r3, #7
 810ab30:	dc0a      	bgt.n	810ab48 <__gethex+0x160>
 810ab32:	4648      	mov	r0, r9
 810ab34:	f7fd ff66 	bl	8108a04 <_Balloc>
 810ab38:	4604      	mov	r4, r0
 810ab3a:	b940      	cbnz	r0, 810ab4e <__gethex+0x166>
 810ab3c:	4b61      	ldr	r3, [pc, #388]	; (810acc4 <__gethex+0x2dc>)
 810ab3e:	4602      	mov	r2, r0
 810ab40:	21e4      	movs	r1, #228	; 0xe4
 810ab42:	4861      	ldr	r0, [pc, #388]	; (810acc8 <__gethex+0x2e0>)
 810ab44:	f7ff feb4 	bl	810a8b0 <__assert_func>
 810ab48:	3101      	adds	r1, #1
 810ab4a:	105b      	asrs	r3, r3, #1
 810ab4c:	e7ef      	b.n	810ab2e <__gethex+0x146>
 810ab4e:	f100 0a14 	add.w	sl, r0, #20
 810ab52:	2300      	movs	r3, #0
 810ab54:	495a      	ldr	r1, [pc, #360]	; (810acc0 <__gethex+0x2d8>)
 810ab56:	f8cd a004 	str.w	sl, [sp, #4]
 810ab5a:	469b      	mov	fp, r3
 810ab5c:	45a8      	cmp	r8, r5
 810ab5e:	d342      	bcc.n	810abe6 <__gethex+0x1fe>
 810ab60:	9801      	ldr	r0, [sp, #4]
 810ab62:	f840 bb04 	str.w	fp, [r0], #4
 810ab66:	eba0 000a 	sub.w	r0, r0, sl
 810ab6a:	1080      	asrs	r0, r0, #2
 810ab6c:	6120      	str	r0, [r4, #16]
 810ab6e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 810ab72:	4658      	mov	r0, fp
 810ab74:	f7fe f838 	bl	8108be8 <__hi0bits>
 810ab78:	683d      	ldr	r5, [r7, #0]
 810ab7a:	eba8 0000 	sub.w	r0, r8, r0
 810ab7e:	42a8      	cmp	r0, r5
 810ab80:	dd59      	ble.n	810ac36 <__gethex+0x24e>
 810ab82:	eba0 0805 	sub.w	r8, r0, r5
 810ab86:	4641      	mov	r1, r8
 810ab88:	4620      	mov	r0, r4
 810ab8a:	f7fe fbc7 	bl	810931c <__any_on>
 810ab8e:	4683      	mov	fp, r0
 810ab90:	b1b8      	cbz	r0, 810abc2 <__gethex+0x1da>
 810ab92:	f108 33ff 	add.w	r3, r8, #4294967295
 810ab96:	1159      	asrs	r1, r3, #5
 810ab98:	f003 021f 	and.w	r2, r3, #31
 810ab9c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 810aba0:	f04f 0b01 	mov.w	fp, #1
 810aba4:	fa0b f202 	lsl.w	r2, fp, r2
 810aba8:	420a      	tst	r2, r1
 810abaa:	d00a      	beq.n	810abc2 <__gethex+0x1da>
 810abac:	455b      	cmp	r3, fp
 810abae:	dd06      	ble.n	810abbe <__gethex+0x1d6>
 810abb0:	f1a8 0102 	sub.w	r1, r8, #2
 810abb4:	4620      	mov	r0, r4
 810abb6:	f7fe fbb1 	bl	810931c <__any_on>
 810abba:	2800      	cmp	r0, #0
 810abbc:	d138      	bne.n	810ac30 <__gethex+0x248>
 810abbe:	f04f 0b02 	mov.w	fp, #2
 810abc2:	4641      	mov	r1, r8
 810abc4:	4620      	mov	r0, r4
 810abc6:	f7ff fea7 	bl	810a918 <rshift>
 810abca:	4446      	add	r6, r8
 810abcc:	68bb      	ldr	r3, [r7, #8]
 810abce:	42b3      	cmp	r3, r6
 810abd0:	da41      	bge.n	810ac56 <__gethex+0x26e>
 810abd2:	4621      	mov	r1, r4
 810abd4:	4648      	mov	r0, r9
 810abd6:	f7fd ff55 	bl	8108a84 <_Bfree>
 810abda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810abdc:	2300      	movs	r3, #0
 810abde:	6013      	str	r3, [r2, #0]
 810abe0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 810abe4:	e78a      	b.n	810aafc <__gethex+0x114>
 810abe6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 810abea:	2a2e      	cmp	r2, #46	; 0x2e
 810abec:	d014      	beq.n	810ac18 <__gethex+0x230>
 810abee:	2b20      	cmp	r3, #32
 810abf0:	d106      	bne.n	810ac00 <__gethex+0x218>
 810abf2:	9b01      	ldr	r3, [sp, #4]
 810abf4:	f843 bb04 	str.w	fp, [r3], #4
 810abf8:	f04f 0b00 	mov.w	fp, #0
 810abfc:	9301      	str	r3, [sp, #4]
 810abfe:	465b      	mov	r3, fp
 810ac00:	7828      	ldrb	r0, [r5, #0]
 810ac02:	9303      	str	r3, [sp, #12]
 810ac04:	f7ff feda 	bl	810a9bc <__hexdig_fun>
 810ac08:	9b03      	ldr	r3, [sp, #12]
 810ac0a:	f000 000f 	and.w	r0, r0, #15
 810ac0e:	4098      	lsls	r0, r3
 810ac10:	ea4b 0b00 	orr.w	fp, fp, r0
 810ac14:	3304      	adds	r3, #4
 810ac16:	e7a1      	b.n	810ab5c <__gethex+0x174>
 810ac18:	45a8      	cmp	r8, r5
 810ac1a:	d8e8      	bhi.n	810abee <__gethex+0x206>
 810ac1c:	2201      	movs	r2, #1
 810ac1e:	4628      	mov	r0, r5
 810ac20:	9303      	str	r3, [sp, #12]
 810ac22:	f7ff fdf9 	bl	810a818 <strncmp>
 810ac26:	4926      	ldr	r1, [pc, #152]	; (810acc0 <__gethex+0x2d8>)
 810ac28:	9b03      	ldr	r3, [sp, #12]
 810ac2a:	2800      	cmp	r0, #0
 810ac2c:	d1df      	bne.n	810abee <__gethex+0x206>
 810ac2e:	e795      	b.n	810ab5c <__gethex+0x174>
 810ac30:	f04f 0b03 	mov.w	fp, #3
 810ac34:	e7c5      	b.n	810abc2 <__gethex+0x1da>
 810ac36:	da0b      	bge.n	810ac50 <__gethex+0x268>
 810ac38:	eba5 0800 	sub.w	r8, r5, r0
 810ac3c:	4621      	mov	r1, r4
 810ac3e:	4642      	mov	r2, r8
 810ac40:	4648      	mov	r0, r9
 810ac42:	f7fe f939 	bl	8108eb8 <__lshift>
 810ac46:	eba6 0608 	sub.w	r6, r6, r8
 810ac4a:	4604      	mov	r4, r0
 810ac4c:	f100 0a14 	add.w	sl, r0, #20
 810ac50:	f04f 0b00 	mov.w	fp, #0
 810ac54:	e7ba      	b.n	810abcc <__gethex+0x1e4>
 810ac56:	687b      	ldr	r3, [r7, #4]
 810ac58:	42b3      	cmp	r3, r6
 810ac5a:	dd73      	ble.n	810ad44 <__gethex+0x35c>
 810ac5c:	1b9e      	subs	r6, r3, r6
 810ac5e:	42b5      	cmp	r5, r6
 810ac60:	dc34      	bgt.n	810accc <__gethex+0x2e4>
 810ac62:	68fb      	ldr	r3, [r7, #12]
 810ac64:	2b02      	cmp	r3, #2
 810ac66:	d023      	beq.n	810acb0 <__gethex+0x2c8>
 810ac68:	2b03      	cmp	r3, #3
 810ac6a:	d025      	beq.n	810acb8 <__gethex+0x2d0>
 810ac6c:	2b01      	cmp	r3, #1
 810ac6e:	d115      	bne.n	810ac9c <__gethex+0x2b4>
 810ac70:	42b5      	cmp	r5, r6
 810ac72:	d113      	bne.n	810ac9c <__gethex+0x2b4>
 810ac74:	2d01      	cmp	r5, #1
 810ac76:	d10b      	bne.n	810ac90 <__gethex+0x2a8>
 810ac78:	9a02      	ldr	r2, [sp, #8]
 810ac7a:	687b      	ldr	r3, [r7, #4]
 810ac7c:	6013      	str	r3, [r2, #0]
 810ac7e:	2301      	movs	r3, #1
 810ac80:	6123      	str	r3, [r4, #16]
 810ac82:	f8ca 3000 	str.w	r3, [sl]
 810ac86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810ac88:	f04f 0862 	mov.w	r8, #98	; 0x62
 810ac8c:	601c      	str	r4, [r3, #0]
 810ac8e:	e735      	b.n	810aafc <__gethex+0x114>
 810ac90:	1e69      	subs	r1, r5, #1
 810ac92:	4620      	mov	r0, r4
 810ac94:	f7fe fb42 	bl	810931c <__any_on>
 810ac98:	2800      	cmp	r0, #0
 810ac9a:	d1ed      	bne.n	810ac78 <__gethex+0x290>
 810ac9c:	4621      	mov	r1, r4
 810ac9e:	4648      	mov	r0, r9
 810aca0:	f7fd fef0 	bl	8108a84 <_Bfree>
 810aca4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810aca6:	2300      	movs	r3, #0
 810aca8:	6013      	str	r3, [r2, #0]
 810acaa:	f04f 0850 	mov.w	r8, #80	; 0x50
 810acae:	e725      	b.n	810aafc <__gethex+0x114>
 810acb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810acb2:	2b00      	cmp	r3, #0
 810acb4:	d1f2      	bne.n	810ac9c <__gethex+0x2b4>
 810acb6:	e7df      	b.n	810ac78 <__gethex+0x290>
 810acb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810acba:	2b00      	cmp	r3, #0
 810acbc:	d1dc      	bne.n	810ac78 <__gethex+0x290>
 810acbe:	e7ed      	b.n	810ac9c <__gethex+0x2b4>
 810acc0:	0810b974 	.word	0x0810b974
 810acc4:	0810b809 	.word	0x0810b809
 810acc8:	0810bb1e 	.word	0x0810bb1e
 810accc:	f106 38ff 	add.w	r8, r6, #4294967295
 810acd0:	f1bb 0f00 	cmp.w	fp, #0
 810acd4:	d133      	bne.n	810ad3e <__gethex+0x356>
 810acd6:	f1b8 0f00 	cmp.w	r8, #0
 810acda:	d004      	beq.n	810ace6 <__gethex+0x2fe>
 810acdc:	4641      	mov	r1, r8
 810acde:	4620      	mov	r0, r4
 810ace0:	f7fe fb1c 	bl	810931c <__any_on>
 810ace4:	4683      	mov	fp, r0
 810ace6:	ea4f 1268 	mov.w	r2, r8, asr #5
 810acea:	2301      	movs	r3, #1
 810acec:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 810acf0:	f008 081f 	and.w	r8, r8, #31
 810acf4:	fa03 f308 	lsl.w	r3, r3, r8
 810acf8:	4213      	tst	r3, r2
 810acfa:	4631      	mov	r1, r6
 810acfc:	4620      	mov	r0, r4
 810acfe:	bf18      	it	ne
 810ad00:	f04b 0b02 	orrne.w	fp, fp, #2
 810ad04:	1bad      	subs	r5, r5, r6
 810ad06:	f7ff fe07 	bl	810a918 <rshift>
 810ad0a:	687e      	ldr	r6, [r7, #4]
 810ad0c:	f04f 0802 	mov.w	r8, #2
 810ad10:	f1bb 0f00 	cmp.w	fp, #0
 810ad14:	d04a      	beq.n	810adac <__gethex+0x3c4>
 810ad16:	68fb      	ldr	r3, [r7, #12]
 810ad18:	2b02      	cmp	r3, #2
 810ad1a:	d016      	beq.n	810ad4a <__gethex+0x362>
 810ad1c:	2b03      	cmp	r3, #3
 810ad1e:	d018      	beq.n	810ad52 <__gethex+0x36a>
 810ad20:	2b01      	cmp	r3, #1
 810ad22:	d109      	bne.n	810ad38 <__gethex+0x350>
 810ad24:	f01b 0f02 	tst.w	fp, #2
 810ad28:	d006      	beq.n	810ad38 <__gethex+0x350>
 810ad2a:	f8da 3000 	ldr.w	r3, [sl]
 810ad2e:	ea4b 0b03 	orr.w	fp, fp, r3
 810ad32:	f01b 0f01 	tst.w	fp, #1
 810ad36:	d10f      	bne.n	810ad58 <__gethex+0x370>
 810ad38:	f048 0810 	orr.w	r8, r8, #16
 810ad3c:	e036      	b.n	810adac <__gethex+0x3c4>
 810ad3e:	f04f 0b01 	mov.w	fp, #1
 810ad42:	e7d0      	b.n	810ace6 <__gethex+0x2fe>
 810ad44:	f04f 0801 	mov.w	r8, #1
 810ad48:	e7e2      	b.n	810ad10 <__gethex+0x328>
 810ad4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810ad4c:	f1c3 0301 	rsb	r3, r3, #1
 810ad50:	930f      	str	r3, [sp, #60]	; 0x3c
 810ad52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810ad54:	2b00      	cmp	r3, #0
 810ad56:	d0ef      	beq.n	810ad38 <__gethex+0x350>
 810ad58:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810ad5c:	f104 0214 	add.w	r2, r4, #20
 810ad60:	ea4f 038b 	mov.w	r3, fp, lsl #2
 810ad64:	9301      	str	r3, [sp, #4]
 810ad66:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 810ad6a:	2300      	movs	r3, #0
 810ad6c:	4694      	mov	ip, r2
 810ad6e:	f852 1b04 	ldr.w	r1, [r2], #4
 810ad72:	f1b1 3fff 	cmp.w	r1, #4294967295
 810ad76:	d01e      	beq.n	810adb6 <__gethex+0x3ce>
 810ad78:	3101      	adds	r1, #1
 810ad7a:	f8cc 1000 	str.w	r1, [ip]
 810ad7e:	f1b8 0f02 	cmp.w	r8, #2
 810ad82:	f104 0214 	add.w	r2, r4, #20
 810ad86:	d13d      	bne.n	810ae04 <__gethex+0x41c>
 810ad88:	683b      	ldr	r3, [r7, #0]
 810ad8a:	3b01      	subs	r3, #1
 810ad8c:	42ab      	cmp	r3, r5
 810ad8e:	d10b      	bne.n	810ada8 <__gethex+0x3c0>
 810ad90:	1169      	asrs	r1, r5, #5
 810ad92:	2301      	movs	r3, #1
 810ad94:	f005 051f 	and.w	r5, r5, #31
 810ad98:	fa03 f505 	lsl.w	r5, r3, r5
 810ad9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810ada0:	421d      	tst	r5, r3
 810ada2:	bf18      	it	ne
 810ada4:	f04f 0801 	movne.w	r8, #1
 810ada8:	f048 0820 	orr.w	r8, r8, #32
 810adac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810adae:	601c      	str	r4, [r3, #0]
 810adb0:	9b02      	ldr	r3, [sp, #8]
 810adb2:	601e      	str	r6, [r3, #0]
 810adb4:	e6a2      	b.n	810aafc <__gethex+0x114>
 810adb6:	4290      	cmp	r0, r2
 810adb8:	f842 3c04 	str.w	r3, [r2, #-4]
 810adbc:	d8d6      	bhi.n	810ad6c <__gethex+0x384>
 810adbe:	68a2      	ldr	r2, [r4, #8]
 810adc0:	4593      	cmp	fp, r2
 810adc2:	db17      	blt.n	810adf4 <__gethex+0x40c>
 810adc4:	6861      	ldr	r1, [r4, #4]
 810adc6:	4648      	mov	r0, r9
 810adc8:	3101      	adds	r1, #1
 810adca:	f7fd fe1b 	bl	8108a04 <_Balloc>
 810adce:	4682      	mov	sl, r0
 810add0:	b918      	cbnz	r0, 810adda <__gethex+0x3f2>
 810add2:	4b1b      	ldr	r3, [pc, #108]	; (810ae40 <__gethex+0x458>)
 810add4:	4602      	mov	r2, r0
 810add6:	2184      	movs	r1, #132	; 0x84
 810add8:	e6b3      	b.n	810ab42 <__gethex+0x15a>
 810adda:	6922      	ldr	r2, [r4, #16]
 810addc:	3202      	adds	r2, #2
 810adde:	f104 010c 	add.w	r1, r4, #12
 810ade2:	0092      	lsls	r2, r2, #2
 810ade4:	300c      	adds	r0, #12
 810ade6:	f7fc fe7c 	bl	8107ae2 <memcpy>
 810adea:	4621      	mov	r1, r4
 810adec:	4648      	mov	r0, r9
 810adee:	f7fd fe49 	bl	8108a84 <_Bfree>
 810adf2:	4654      	mov	r4, sl
 810adf4:	6922      	ldr	r2, [r4, #16]
 810adf6:	1c51      	adds	r1, r2, #1
 810adf8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 810adfc:	6121      	str	r1, [r4, #16]
 810adfe:	2101      	movs	r1, #1
 810ae00:	6151      	str	r1, [r2, #20]
 810ae02:	e7bc      	b.n	810ad7e <__gethex+0x396>
 810ae04:	6921      	ldr	r1, [r4, #16]
 810ae06:	4559      	cmp	r1, fp
 810ae08:	dd0b      	ble.n	810ae22 <__gethex+0x43a>
 810ae0a:	2101      	movs	r1, #1
 810ae0c:	4620      	mov	r0, r4
 810ae0e:	f7ff fd83 	bl	810a918 <rshift>
 810ae12:	68bb      	ldr	r3, [r7, #8]
 810ae14:	3601      	adds	r6, #1
 810ae16:	42b3      	cmp	r3, r6
 810ae18:	f6ff aedb 	blt.w	810abd2 <__gethex+0x1ea>
 810ae1c:	f04f 0801 	mov.w	r8, #1
 810ae20:	e7c2      	b.n	810ada8 <__gethex+0x3c0>
 810ae22:	f015 051f 	ands.w	r5, r5, #31
 810ae26:	d0f9      	beq.n	810ae1c <__gethex+0x434>
 810ae28:	9b01      	ldr	r3, [sp, #4]
 810ae2a:	441a      	add	r2, r3
 810ae2c:	f1c5 0520 	rsb	r5, r5, #32
 810ae30:	f852 0c04 	ldr.w	r0, [r2, #-4]
 810ae34:	f7fd fed8 	bl	8108be8 <__hi0bits>
 810ae38:	42a8      	cmp	r0, r5
 810ae3a:	dbe6      	blt.n	810ae0a <__gethex+0x422>
 810ae3c:	e7ee      	b.n	810ae1c <__gethex+0x434>
 810ae3e:	bf00      	nop
 810ae40:	0810b809 	.word	0x0810b809

0810ae44 <L_shift>:
 810ae44:	f1c2 0208 	rsb	r2, r2, #8
 810ae48:	0092      	lsls	r2, r2, #2
 810ae4a:	b570      	push	{r4, r5, r6, lr}
 810ae4c:	f1c2 0620 	rsb	r6, r2, #32
 810ae50:	6843      	ldr	r3, [r0, #4]
 810ae52:	6804      	ldr	r4, [r0, #0]
 810ae54:	fa03 f506 	lsl.w	r5, r3, r6
 810ae58:	432c      	orrs	r4, r5
 810ae5a:	40d3      	lsrs	r3, r2
 810ae5c:	6004      	str	r4, [r0, #0]
 810ae5e:	f840 3f04 	str.w	r3, [r0, #4]!
 810ae62:	4288      	cmp	r0, r1
 810ae64:	d3f4      	bcc.n	810ae50 <L_shift+0xc>
 810ae66:	bd70      	pop	{r4, r5, r6, pc}

0810ae68 <__match>:
 810ae68:	b530      	push	{r4, r5, lr}
 810ae6a:	6803      	ldr	r3, [r0, #0]
 810ae6c:	3301      	adds	r3, #1
 810ae6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 810ae72:	b914      	cbnz	r4, 810ae7a <__match+0x12>
 810ae74:	6003      	str	r3, [r0, #0]
 810ae76:	2001      	movs	r0, #1
 810ae78:	bd30      	pop	{r4, r5, pc}
 810ae7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 810ae7e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 810ae82:	2d19      	cmp	r5, #25
 810ae84:	bf98      	it	ls
 810ae86:	3220      	addls	r2, #32
 810ae88:	42a2      	cmp	r2, r4
 810ae8a:	d0f0      	beq.n	810ae6e <__match+0x6>
 810ae8c:	2000      	movs	r0, #0
 810ae8e:	e7f3      	b.n	810ae78 <__match+0x10>

0810ae90 <__hexnan>:
 810ae90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ae94:	680b      	ldr	r3, [r1, #0]
 810ae96:	6801      	ldr	r1, [r0, #0]
 810ae98:	115e      	asrs	r6, r3, #5
 810ae9a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810ae9e:	f013 031f 	ands.w	r3, r3, #31
 810aea2:	b087      	sub	sp, #28
 810aea4:	bf18      	it	ne
 810aea6:	3604      	addne	r6, #4
 810aea8:	2500      	movs	r5, #0
 810aeaa:	1f37      	subs	r7, r6, #4
 810aeac:	4682      	mov	sl, r0
 810aeae:	4690      	mov	r8, r2
 810aeb0:	9301      	str	r3, [sp, #4]
 810aeb2:	f846 5c04 	str.w	r5, [r6, #-4]
 810aeb6:	46b9      	mov	r9, r7
 810aeb8:	463c      	mov	r4, r7
 810aeba:	9502      	str	r5, [sp, #8]
 810aebc:	46ab      	mov	fp, r5
 810aebe:	784a      	ldrb	r2, [r1, #1]
 810aec0:	1c4b      	adds	r3, r1, #1
 810aec2:	9303      	str	r3, [sp, #12]
 810aec4:	b342      	cbz	r2, 810af18 <__hexnan+0x88>
 810aec6:	4610      	mov	r0, r2
 810aec8:	9105      	str	r1, [sp, #20]
 810aeca:	9204      	str	r2, [sp, #16]
 810aecc:	f7ff fd76 	bl	810a9bc <__hexdig_fun>
 810aed0:	2800      	cmp	r0, #0
 810aed2:	d14f      	bne.n	810af74 <__hexnan+0xe4>
 810aed4:	9a04      	ldr	r2, [sp, #16]
 810aed6:	9905      	ldr	r1, [sp, #20]
 810aed8:	2a20      	cmp	r2, #32
 810aeda:	d818      	bhi.n	810af0e <__hexnan+0x7e>
 810aedc:	9b02      	ldr	r3, [sp, #8]
 810aede:	459b      	cmp	fp, r3
 810aee0:	dd13      	ble.n	810af0a <__hexnan+0x7a>
 810aee2:	454c      	cmp	r4, r9
 810aee4:	d206      	bcs.n	810aef4 <__hexnan+0x64>
 810aee6:	2d07      	cmp	r5, #7
 810aee8:	dc04      	bgt.n	810aef4 <__hexnan+0x64>
 810aeea:	462a      	mov	r2, r5
 810aeec:	4649      	mov	r1, r9
 810aeee:	4620      	mov	r0, r4
 810aef0:	f7ff ffa8 	bl	810ae44 <L_shift>
 810aef4:	4544      	cmp	r4, r8
 810aef6:	d950      	bls.n	810af9a <__hexnan+0x10a>
 810aef8:	2300      	movs	r3, #0
 810aefa:	f1a4 0904 	sub.w	r9, r4, #4
 810aefe:	f844 3c04 	str.w	r3, [r4, #-4]
 810af02:	f8cd b008 	str.w	fp, [sp, #8]
 810af06:	464c      	mov	r4, r9
 810af08:	461d      	mov	r5, r3
 810af0a:	9903      	ldr	r1, [sp, #12]
 810af0c:	e7d7      	b.n	810aebe <__hexnan+0x2e>
 810af0e:	2a29      	cmp	r2, #41	; 0x29
 810af10:	d155      	bne.n	810afbe <__hexnan+0x12e>
 810af12:	3102      	adds	r1, #2
 810af14:	f8ca 1000 	str.w	r1, [sl]
 810af18:	f1bb 0f00 	cmp.w	fp, #0
 810af1c:	d04f      	beq.n	810afbe <__hexnan+0x12e>
 810af1e:	454c      	cmp	r4, r9
 810af20:	d206      	bcs.n	810af30 <__hexnan+0xa0>
 810af22:	2d07      	cmp	r5, #7
 810af24:	dc04      	bgt.n	810af30 <__hexnan+0xa0>
 810af26:	462a      	mov	r2, r5
 810af28:	4649      	mov	r1, r9
 810af2a:	4620      	mov	r0, r4
 810af2c:	f7ff ff8a 	bl	810ae44 <L_shift>
 810af30:	4544      	cmp	r4, r8
 810af32:	d934      	bls.n	810af9e <__hexnan+0x10e>
 810af34:	f1a8 0204 	sub.w	r2, r8, #4
 810af38:	4623      	mov	r3, r4
 810af3a:	f853 1b04 	ldr.w	r1, [r3], #4
 810af3e:	f842 1f04 	str.w	r1, [r2, #4]!
 810af42:	429f      	cmp	r7, r3
 810af44:	d2f9      	bcs.n	810af3a <__hexnan+0xaa>
 810af46:	1b3b      	subs	r3, r7, r4
 810af48:	f023 0303 	bic.w	r3, r3, #3
 810af4c:	3304      	adds	r3, #4
 810af4e:	3e03      	subs	r6, #3
 810af50:	3401      	adds	r4, #1
 810af52:	42a6      	cmp	r6, r4
 810af54:	bf38      	it	cc
 810af56:	2304      	movcc	r3, #4
 810af58:	4443      	add	r3, r8
 810af5a:	2200      	movs	r2, #0
 810af5c:	f843 2b04 	str.w	r2, [r3], #4
 810af60:	429f      	cmp	r7, r3
 810af62:	d2fb      	bcs.n	810af5c <__hexnan+0xcc>
 810af64:	683b      	ldr	r3, [r7, #0]
 810af66:	b91b      	cbnz	r3, 810af70 <__hexnan+0xe0>
 810af68:	4547      	cmp	r7, r8
 810af6a:	d126      	bne.n	810afba <__hexnan+0x12a>
 810af6c:	2301      	movs	r3, #1
 810af6e:	603b      	str	r3, [r7, #0]
 810af70:	2005      	movs	r0, #5
 810af72:	e025      	b.n	810afc0 <__hexnan+0x130>
 810af74:	3501      	adds	r5, #1
 810af76:	2d08      	cmp	r5, #8
 810af78:	f10b 0b01 	add.w	fp, fp, #1
 810af7c:	dd06      	ble.n	810af8c <__hexnan+0xfc>
 810af7e:	4544      	cmp	r4, r8
 810af80:	d9c3      	bls.n	810af0a <__hexnan+0x7a>
 810af82:	2300      	movs	r3, #0
 810af84:	f844 3c04 	str.w	r3, [r4, #-4]
 810af88:	2501      	movs	r5, #1
 810af8a:	3c04      	subs	r4, #4
 810af8c:	6822      	ldr	r2, [r4, #0]
 810af8e:	f000 000f 	and.w	r0, r0, #15
 810af92:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 810af96:	6020      	str	r0, [r4, #0]
 810af98:	e7b7      	b.n	810af0a <__hexnan+0x7a>
 810af9a:	2508      	movs	r5, #8
 810af9c:	e7b5      	b.n	810af0a <__hexnan+0x7a>
 810af9e:	9b01      	ldr	r3, [sp, #4]
 810afa0:	2b00      	cmp	r3, #0
 810afa2:	d0df      	beq.n	810af64 <__hexnan+0xd4>
 810afa4:	f1c3 0320 	rsb	r3, r3, #32
 810afa8:	f04f 32ff 	mov.w	r2, #4294967295
 810afac:	40da      	lsrs	r2, r3
 810afae:	f856 3c04 	ldr.w	r3, [r6, #-4]
 810afb2:	4013      	ands	r3, r2
 810afb4:	f846 3c04 	str.w	r3, [r6, #-4]
 810afb8:	e7d4      	b.n	810af64 <__hexnan+0xd4>
 810afba:	3f04      	subs	r7, #4
 810afbc:	e7d2      	b.n	810af64 <__hexnan+0xd4>
 810afbe:	2004      	movs	r0, #4
 810afc0:	b007      	add	sp, #28
 810afc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810afc6 <__ascii_mbtowc>:
 810afc6:	b082      	sub	sp, #8
 810afc8:	b901      	cbnz	r1, 810afcc <__ascii_mbtowc+0x6>
 810afca:	a901      	add	r1, sp, #4
 810afcc:	b142      	cbz	r2, 810afe0 <__ascii_mbtowc+0x1a>
 810afce:	b14b      	cbz	r3, 810afe4 <__ascii_mbtowc+0x1e>
 810afd0:	7813      	ldrb	r3, [r2, #0]
 810afd2:	600b      	str	r3, [r1, #0]
 810afd4:	7812      	ldrb	r2, [r2, #0]
 810afd6:	1e10      	subs	r0, r2, #0
 810afd8:	bf18      	it	ne
 810afda:	2001      	movne	r0, #1
 810afdc:	b002      	add	sp, #8
 810afde:	4770      	bx	lr
 810afe0:	4610      	mov	r0, r2
 810afe2:	e7fb      	b.n	810afdc <__ascii_mbtowc+0x16>
 810afe4:	f06f 0001 	mvn.w	r0, #1
 810afe8:	e7f8      	b.n	810afdc <__ascii_mbtowc+0x16>

0810afea <_realloc_r>:
 810afea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810afee:	4680      	mov	r8, r0
 810aff0:	4614      	mov	r4, r2
 810aff2:	460e      	mov	r6, r1
 810aff4:	b921      	cbnz	r1, 810b000 <_realloc_r+0x16>
 810aff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810affa:	4611      	mov	r1, r2
 810affc:	f7fd bc76 	b.w	81088ec <_malloc_r>
 810b000:	b92a      	cbnz	r2, 810b00e <_realloc_r+0x24>
 810b002:	f7fd fbff 	bl	8108804 <_free_r>
 810b006:	4625      	mov	r5, r4
 810b008:	4628      	mov	r0, r5
 810b00a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810b00e:	f000 f842 	bl	810b096 <_malloc_usable_size_r>
 810b012:	4284      	cmp	r4, r0
 810b014:	4607      	mov	r7, r0
 810b016:	d802      	bhi.n	810b01e <_realloc_r+0x34>
 810b018:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 810b01c:	d812      	bhi.n	810b044 <_realloc_r+0x5a>
 810b01e:	4621      	mov	r1, r4
 810b020:	4640      	mov	r0, r8
 810b022:	f7fd fc63 	bl	81088ec <_malloc_r>
 810b026:	4605      	mov	r5, r0
 810b028:	2800      	cmp	r0, #0
 810b02a:	d0ed      	beq.n	810b008 <_realloc_r+0x1e>
 810b02c:	42bc      	cmp	r4, r7
 810b02e:	4622      	mov	r2, r4
 810b030:	4631      	mov	r1, r6
 810b032:	bf28      	it	cs
 810b034:	463a      	movcs	r2, r7
 810b036:	f7fc fd54 	bl	8107ae2 <memcpy>
 810b03a:	4631      	mov	r1, r6
 810b03c:	4640      	mov	r0, r8
 810b03e:	f7fd fbe1 	bl	8108804 <_free_r>
 810b042:	e7e1      	b.n	810b008 <_realloc_r+0x1e>
 810b044:	4635      	mov	r5, r6
 810b046:	e7df      	b.n	810b008 <_realloc_r+0x1e>

0810b048 <__ascii_wctomb>:
 810b048:	b149      	cbz	r1, 810b05e <__ascii_wctomb+0x16>
 810b04a:	2aff      	cmp	r2, #255	; 0xff
 810b04c:	bf85      	ittet	hi
 810b04e:	238a      	movhi	r3, #138	; 0x8a
 810b050:	6003      	strhi	r3, [r0, #0]
 810b052:	700a      	strbls	r2, [r1, #0]
 810b054:	f04f 30ff 	movhi.w	r0, #4294967295
 810b058:	bf98      	it	ls
 810b05a:	2001      	movls	r0, #1
 810b05c:	4770      	bx	lr
 810b05e:	4608      	mov	r0, r1
 810b060:	4770      	bx	lr
	...

0810b064 <fiprintf>:
 810b064:	b40e      	push	{r1, r2, r3}
 810b066:	b503      	push	{r0, r1, lr}
 810b068:	4601      	mov	r1, r0
 810b06a:	ab03      	add	r3, sp, #12
 810b06c:	4805      	ldr	r0, [pc, #20]	; (810b084 <fiprintf+0x20>)
 810b06e:	f853 2b04 	ldr.w	r2, [r3], #4
 810b072:	6800      	ldr	r0, [r0, #0]
 810b074:	9301      	str	r3, [sp, #4]
 810b076:	f7ff f98b 	bl	810a390 <_vfiprintf_r>
 810b07a:	b002      	add	sp, #8
 810b07c:	f85d eb04 	ldr.w	lr, [sp], #4
 810b080:	b003      	add	sp, #12
 810b082:	4770      	bx	lr
 810b084:	10000078 	.word	0x10000078

0810b088 <abort>:
 810b088:	b508      	push	{r3, lr}
 810b08a:	2006      	movs	r0, #6
 810b08c:	f000 f834 	bl	810b0f8 <raise>
 810b090:	2001      	movs	r0, #1
 810b092:	f7f6 fee4 	bl	8101e5e <_exit>

0810b096 <_malloc_usable_size_r>:
 810b096:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810b09a:	1f18      	subs	r0, r3, #4
 810b09c:	2b00      	cmp	r3, #0
 810b09e:	bfbc      	itt	lt
 810b0a0:	580b      	ldrlt	r3, [r1, r0]
 810b0a2:	18c0      	addlt	r0, r0, r3
 810b0a4:	4770      	bx	lr

0810b0a6 <_raise_r>:
 810b0a6:	291f      	cmp	r1, #31
 810b0a8:	b538      	push	{r3, r4, r5, lr}
 810b0aa:	4604      	mov	r4, r0
 810b0ac:	460d      	mov	r5, r1
 810b0ae:	d904      	bls.n	810b0ba <_raise_r+0x14>
 810b0b0:	2316      	movs	r3, #22
 810b0b2:	6003      	str	r3, [r0, #0]
 810b0b4:	f04f 30ff 	mov.w	r0, #4294967295
 810b0b8:	bd38      	pop	{r3, r4, r5, pc}
 810b0ba:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 810b0bc:	b112      	cbz	r2, 810b0c4 <_raise_r+0x1e>
 810b0be:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810b0c2:	b94b      	cbnz	r3, 810b0d8 <_raise_r+0x32>
 810b0c4:	4620      	mov	r0, r4
 810b0c6:	f000 f831 	bl	810b12c <_getpid_r>
 810b0ca:	462a      	mov	r2, r5
 810b0cc:	4601      	mov	r1, r0
 810b0ce:	4620      	mov	r0, r4
 810b0d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810b0d4:	f000 b818 	b.w	810b108 <_kill_r>
 810b0d8:	2b01      	cmp	r3, #1
 810b0da:	d00a      	beq.n	810b0f2 <_raise_r+0x4c>
 810b0dc:	1c59      	adds	r1, r3, #1
 810b0de:	d103      	bne.n	810b0e8 <_raise_r+0x42>
 810b0e0:	2316      	movs	r3, #22
 810b0e2:	6003      	str	r3, [r0, #0]
 810b0e4:	2001      	movs	r0, #1
 810b0e6:	e7e7      	b.n	810b0b8 <_raise_r+0x12>
 810b0e8:	2400      	movs	r4, #0
 810b0ea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810b0ee:	4628      	mov	r0, r5
 810b0f0:	4798      	blx	r3
 810b0f2:	2000      	movs	r0, #0
 810b0f4:	e7e0      	b.n	810b0b8 <_raise_r+0x12>
	...

0810b0f8 <raise>:
 810b0f8:	4b02      	ldr	r3, [pc, #8]	; (810b104 <raise+0xc>)
 810b0fa:	4601      	mov	r1, r0
 810b0fc:	6818      	ldr	r0, [r3, #0]
 810b0fe:	f7ff bfd2 	b.w	810b0a6 <_raise_r>
 810b102:	bf00      	nop
 810b104:	10000078 	.word	0x10000078

0810b108 <_kill_r>:
 810b108:	b538      	push	{r3, r4, r5, lr}
 810b10a:	4d07      	ldr	r5, [pc, #28]	; (810b128 <_kill_r+0x20>)
 810b10c:	2300      	movs	r3, #0
 810b10e:	4604      	mov	r4, r0
 810b110:	4608      	mov	r0, r1
 810b112:	4611      	mov	r1, r2
 810b114:	602b      	str	r3, [r5, #0]
 810b116:	f7f6 fe92 	bl	8101e3e <_kill>
 810b11a:	1c43      	adds	r3, r0, #1
 810b11c:	d102      	bne.n	810b124 <_kill_r+0x1c>
 810b11e:	682b      	ldr	r3, [r5, #0]
 810b120:	b103      	cbz	r3, 810b124 <_kill_r+0x1c>
 810b122:	6023      	str	r3, [r4, #0]
 810b124:	bd38      	pop	{r3, r4, r5, pc}
 810b126:	bf00      	nop
 810b128:	10000434 	.word	0x10000434

0810b12c <_getpid_r>:
 810b12c:	f7f6 be7f 	b.w	8101e2e <_getpid>

0810b130 <_init>:
 810b130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b132:	bf00      	nop
 810b134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810b136:	bc08      	pop	{r3}
 810b138:	469e      	mov	lr, r3
 810b13a:	4770      	bx	lr

0810b13c <_fini>:
 810b13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b13e:	bf00      	nop
 810b140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810b142:	bc08      	pop	{r3}
 810b144:	469e      	mov	lr, r3
 810b146:	4770      	bx	lr
